"use strict";(self.webpackChunkblogs=self.webpackChunkblogs||[]).push([[2114],{15216:e=>{e.exports=JSON.parse('{"permalink":"/ja/blog/Most-Design-Patterns-Are-Just-Dependency-Injection-In-Disguise","source":"@site/blog/2025-07-12T10_48-most-design-patterns-are-just-dependency-injection-in-disguise/content.md","title":"Most Design Patterns Are Just Dependency Injection in Disguise","description":"Design patterns are a helpful way to talk about structure \u2014 reusable blueprints for solving common problems in code. They give us a shared vocabulary, and when used well, they make systems more flexible and understandable.","date":"2025-07-12T00:00:00.000Z","tags":[{"inline":false,"label":"python","permalink":"/ja/blog/tags/python","description":"general dicussion about programming in python"},{"inline":true,"label":"design patterns","permalink":"/ja/blog/tags/design-patterns"},{"inline":false,"label":"OOP","permalink":"/ja/blog/tags/oop","description":"Object-oriented programming principles and practices"}],"readingTime":4.805,"hasTruncateMarker":true,"authors":[{"name":"raceychan","title":"author of lihil, a developer.","url":"https://github.com/raceychan","page":{"permalink":"/ja/blog/authors/raceychan"},"socials":{"x":"https://x.com/raceychan","github":"https://github.com/raceychan"},"imageURL":"https://github.com/raceychan.png","key":"raceychan"}],"frontMatter":{"slug":"Most-Design-Patterns-Are-Just-Dependency-Injection-In-Disguise","title":"Most Design Patterns Are Just Dependency Injection in Disguise","authors":["raceychan"],"tags":["python","design patterns","oop"],"toc_min_heading_level":2,"toc_max_heading_level":5},"unlisted":false,"nextItem":{"title":"Design Patterns You Should Unlearn in Python-Part2","permalink":"/ja/blog/design-patterns-you-should-unlearn-in-python-part2"}}')},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>r});var s=t(96540);const a={},o=s.createContext(a);function i(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(o.Provider,{value:n},e.children)}},96150:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var s=t(15216),a=t(74848),o=t(28453);const i={slug:"Most-Design-Patterns-Are-Just-Dependency-Injection-In-Disguise",title:"Most Design Patterns Are Just Dependency Injection in Disguise",authors:["raceychan"],tags:["python","design patterns","oop"],toc_min_heading_level:2,toc_max_heading_level:5},r="Most Design Patterns Are Just Dependency Injection in Disguise",l={authorsImageUrls:[void 0]},c=[];function u(e){const n={p:"p",strong:"strong",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"Design patterns are a helpful way to talk about structure \u2014 reusable blueprints for solving common problems in code. They give us a shared vocabulary, and when used well, they make systems more flexible and understandable."}),"\n",(0,a.jsx)(n.p,{children:"But once you\u2019ve worked with a few of them, you start to notice something: a lot of patterns look suspiciously similar in actual implementation. You\u2019re injecting different behaviors, delegating to different components, maybe wrapping an object to change what it does \u2014 but structurally, it\u2019s often the same playbook with different labels."}),"\n",(0,a.jsxs)(n.p,{children:["This post looks at a few well-known patterns \u2014 Strategy, State, Adapter, Proxy, Command \u2014 and makes the case that most of them reduce to the same fundamental technique: ",(0,a.jsx)(n.strong,{children:"Dependency Injection"}),". And once you add in two key design principles \u2014 ",(0,a.jsx)(n.strong,{children:"Open/Closed"})," and ",(0,a.jsx)(n.strong,{children:"Liskov Substitution"})," \u2014 you\u2019ll find you can design pattern-like solutions without memorizing any formal templates."]})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}}}]);