"use strict";(self.webpackChunkblogs=self.webpackChunkblogs||[]).push([[3081],{28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var o=t(96540);const a={},i=o.createContext(a);function s(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),o.createElement(i.Provider,{value:n},e.children)}},42828:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var o=t(96544),a=t(74848),i=t(28453);const s={slug:"design-patterns-you-should-unlearn-in-python-part1",title:"Design Patterns You Should Unlearn in Python-Part1",authors:["raceychan"],tags:["python","design patterns","oop"],toc_min_heading_level:2,toc_max_heading_level:5},l=void 0,r={authorsImageUrls:[void 0]},c=[{value:"Singleton: When You Want a Global Variable but Make It Look Fancy",id:"singleton-when-you-want-a-global-variable-but-make-it-look-fancy",level:3},{value:"Why Singleton Made Sense in C++",id:"why-singleton-made-sense-in-c",level:3},{value:"The Pythonic Alternative: Just Use Modules (Seriously)",id:"the-pythonic-alternative-just-use-modules-seriously",level:3},{value:"Want to Delay Creation? Use Closures",id:"want-to-delay-creation-use-closures",level:3},{value:"Builder Pattern: Overcomplicating Object Creation Like a Boss",id:"builder-pattern-overcomplicating-object-creation-like-a-boss",level:3},{value:"The Pythonic Alternative: Default Arguments and Factory Functions \u2014 No Builders Required",id:"the-pythonic-alternative-default-arguments-and-factory-functions--no-builders-required",level:3},{value:"1. Use Default Arguments Like a Normal Human",id:"1-use-default-arguments-like-a-normal-human",level:4},{value:"2. Want Something Fancier? Use a Factory Function with Overloads",id:"2-want-something-fancier-use-a-factory-function-with-overloads",level:4}];function d(e){const n={a:"a",code:"code",em:"em",h3:"h3",h4:"h4",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{src:"https://unsplash.com/photos/ipmwlGIXzcw/download?ixid=M3wxMjA3fDB8MXxhbGx8fHx8fHx8fHwxNzUwMzQwMjYwfA&force=true&w=1920",alt:"image-1.jpg"})}),"\n",(0,a.jsx)(n.p,{children:"Search for \u201cdesign patterns in Python\u201d and you\u2019ll be rewarded with a parade of tutorials showing off how to faithfully re-implement Gang of Four patterns \u2014 complete with class diagrams, factory hierarchies, and enough boilerplate to heat a small village. They\u2019ll make you feel like you\u2019re writing \u201cserious\u201d code. Smart. Professional. Enterprise-ready."}),"\n",(0,a.jsxs)(n.p,{children:["But here\u2019s the problem: ",(0,a.jsx)(n.strong,{children:"most of these patterns solve problems Python doesn\u2019t have"}),". They were designed for languages like Java and C++, where you have to jump through hoops just to get basic things done \u2014 no first-class functions, no dynamic typing, no modules as namespaces. Of course you\u2019d need a Factory or a Singleton if your language gives you nothing else to work with."]}),"\n",(0,a.jsx)(n.p,{children:"Blindly copying those patterns into Python doesn\u2019t make you clever. It makes your code harder to read, harder to test, and harder to explain to the next poor soul who has to maintain it \u2014 possibly you, three months from now."}),"\n",(0,a.jsx)(n.p,{children:"In this post, we\u2019ll go over a few classic GOF patterns that you should unlearn as a Python developer. For each one, we\u2019ll look at:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"How it\u2019s usually (and badly) implemented in Python,"}),"\n",(0,a.jsx)(n.li,{children:"Why it actually made sense back when people were writing Java in 2001,"}),"\n",(0,a.jsx)(n.li,{children:"And what the Pythonic alternative looks like \u2014 because yes, there\u2019s almost always a simpler way."}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["Let\u2019s start with the biggest offender: ",(0,a.jsx)(n.strong,{children:"Creational Patterns"})," \u2014 aka, a whole category of solutions to problems Python already solved."]}),"\n",(0,a.jsx)(n.h3,{id:"singleton-when-you-want-a-global-variable-but-make-it-look-fancy",children:"Singleton: When You Want a Global Variable but Make It Look Fancy"}),"\n",(0,a.jsxs)(n.p,{children:["Ah yes, the Singleton. The go-to pattern for developers who want global state but still want to feel like they\u2019re writing ",(0,a.jsx)(n.em,{children:"object-oriented"})," code. In Python, you\u2019ll often see this \u201csmart\u201d implementation using ",(0,a.jsx)(n.code,{children:"__new__"})," and a class variable:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'class Singleton:\n    _instance: "Singleton" | None = None\n\n    def __new__(cls, *args, **kwargs):\n        if cls._instance is None:\n            cls._instance = super().__new__(cls)\n        return cls._instance\n'})}),"\n",(0,a.jsxs)(n.p,{children:["It ",(0,a.jsx)(n.em,{children:"feels"})," clever \u2014 until you try to actually use it."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"s1 = Singleton(name=\"Alice\", age=30)\ns2 = Singleton(name=\"Bob\", age=25)\n\nprint(s1.name)  # 'Alice'\nprint(s2.name)  # Still 'Alice'!\n"})}),"\n",(0,a.jsxs)(n.p,{children:["What happened? Well, it turns out you\u2019re always getting the same instance, no matter what parameters you pass. Your second call to ",(0,a.jsx)(n.code,{children:'Singleton(name="Bob", age=25)'})," didn\u2019t create anything new \u2014 it just silently reused the original object, with its original attributes. No warning. No error. Just quietly wrong."]}),"\n",(0,a.jsx)(n.p,{children:"But things get worse when you try to subclass it:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"class DBConnection:\n    _instance = None\n    def __new__(cls, *args, **kwargs):\n        if cls._instance is None:\n            cls._instance = super().__new__(cls)\n        return cls._instance\n\nclass MySqlConnection(DBConnection): ...\nclass PostGresConnection(DBConnection): ...\n\nconn1 = MySqlConnection()\nconn2 = PostGresConnection()\n"})}),"\n",(0,a.jsxs)(n.p,{children:["You might expect two separate objects, one for each subclass. But nope \u2014 both ",(0,a.jsx)(n.code,{children:"conn1"})," and ",(0,a.jsx)(n.code,{children:"conn2"})," are the same instance. That\u2019s because ",(0,a.jsx)(n.code,{children:"_instance"})," lives on the base class, not per subclass. So congratulations: ",(0,a.jsx)(n.strong,{children:"you\u2019ve now built the ultimate surprise box."})," ",(0,a.jsx)(n.code,{children:"PostGresConnection()"})," might return a ",(0,a.jsx)(n.code,{children:"MySqlConnection"}),", and ",(0,a.jsx)(n.code,{children:"MySqlConnection()"})," might give you a ",(0,a.jsx)(n.code,{children:"PostGresConnection"}),". It all depends on which one you happened to instantiate first."]}),"\n",(0,a.jsx)(n.p,{children:"Hope your app enjoys the roulette."}),"\n",(0,a.jsx)(n.h3,{id:"why-singleton-made-sense-in-c",children:"Why Singleton Made Sense in C++"}),"\n",(0,a.jsx)(n.p,{children:"Let\u2019s be clear: the Singleton pattern didn\u2019t appear out of thin air. It was born in the wild west of C++ \u2014 a language with no real module system and only a limited notion of namespaces."}),"\n",(0,a.jsxs)(n.p,{children:["In C++, your code lives in header and source files, all crammed together during compilation. There\u2019s no clean way to say \u201cthis is private to this file\u201d or \u201cthis global object only exists once\u201d without jumping through hoops. The language gives you ",(0,a.jsx)(n.strong,{children:"global variables"}),", which quickly become a mess if you don\u2019t control their initialization and lifetime carefully."]}),"\n",(0,a.jsxs)(n.p,{children:["Because C++ doesn\u2019t have modules (before c++20) or proper package systems, Singleton was a clever hack to guarantee ",(0,a.jsx)(n.strong,{children:"exactly one"})," instance of a class, avoiding the nightmare of duplicate globals and multiple definitions. It\u2019s like the language forced you to invent a pattern to handle what Python solves with a simple module-level object."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cpp",children:'// logger.h\n\n#ifndef LOGGER_H\n#define LOGGER_H\n\nclass Logger {\npublic:\n    void log(const char* msg);\n};\n\nextern Logger globalLogger; // Declaration\n#endif\n\n// logger.cpp\n\n#include "logger.h"\n#include <iostream>\n\nLogger globalLogger; // Definition\n\nvoid Logger::log(const char* msg) {\n    std::cout << msg << std::endl;\n}\n\n// main.cpp\n\n#include "logger.h"\n\nint main() {\n    globalLogger.log("Starting the app");\n    return 0;\n}\n\n'})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"globalLogger"})," is defined in one translation unit (",(0,a.jsx)(n.code,{children:"logger.cpp"}),"), but if you accidentally define it in multiple places, the linker will complain about duplicate symbols. Managing this global state is tricky \u2014 and the Singleton pattern wraps this idea into a class that controls its own single instance, so you don\u2019t have to worry about multiple definitions."]}),"\n",(0,a.jsx)(n.p,{children:"So yes, Singleton is basically a band-aid for C++\u2019s lack of modularity and clean global state management \u2014 not a holy grail of software design."}),"\n",(0,a.jsx)(n.h3,{id:"the-pythonic-alternative-just-use-modules-seriously",children:"The Pythonic Alternative: Just Use Modules (Seriously)"}),"\n",(0,a.jsxs)(n.p,{children:["If you want a ",(0,a.jsx)(n.strong,{children:"global, single instance"})," in Python, you don\u2019t need to reinvent the wheel with complicated Singleton classes. Python already gives you everything you need \u2014 in the form of ",(0,a.jsx)(n.strong,{children:"modules"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"Just create your object at the module level, and it\u2019s guaranteed to be a singleton for as long as that module is imported:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# settings.py\nfrom typing import Final\n\nclass Settings: ...\n\nsettings: Final[Settings] = Settings() # add typing.Final to settings so type checker would complain if someone is trying to re-assign the settings object.\n"})}),"\n",(0,a.jsx)(n.h3,{id:"want-to-delay-creation-use-closures",children:"Want to Delay Creation? Use Closures"}),"\n",(0,a.jsxs)(n.p,{children:["Okay, maybe you want to ",(0,a.jsx)(n.strong,{children:"delay"})," creating the object until it\u2019s actually needed \u2014 lazy initialization. Still no need for Singleton patterns."]}),"\n",(0,a.jsx)(n.p,{children:"Use a simple function with a closure and an internal variable to store the instance:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def _settings():\n    settings: Settings = Settings()\n\n    def get_settings() -> Settings:\n        return settings\n\n    def set_settings(value: Settings) -> None:\n        nonlocal settings\n        settings = value\n\n    return get_settings, set_settings\n\nget_settings, set_settings = _settings()\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"https://github.com/raceychan/lihil/blob/master/lihil/config/__init__.py",children:"Example of this pattern from github"})}),"\n",(0,a.jsxs)(n.p,{children:["This approach is especially useful when your settings object depends on values only available at runtime \u2014 for example, the path to an environment file (",(0,a.jsx)(n.code,{children:"env_file: Path"}),"). With lazy initialization via closure, you can defer creating the ",(0,a.jsx)(n.code,{children:"Settings"})," instance until you have all the necessary information, instead of forcing it at import time."]}),"\n",(0,a.jsx)(n.h3,{id:"builder-pattern-overcomplicating-object-creation-like-a-boss",children:"Builder Pattern: Overcomplicating Object Creation Like a Boss"}),"\n",(0,a.jsx)(n.p,{children:"If you\u2019ve dabbled in design patterns, you\u2019ve probably seen the Builder pattern praised as the elegant way to construct complex objects step-by-step. In languages like Java or C++, where constructors can\u2019t have default arguments and object immutability is king, this makes some sense."}),"\n",(0,a.jsx)(n.p,{children:"But in Python? Oh boy. You\u2019ll often find \u201cbuilders\u201d that look like this:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'class CarBuilder:\n    def __init__(self):\n        self._color = None\n        self._engine = None\n\n    def set_color(self, color: str) -> "CarBuilder":\n        self._color = color\n        return self\n\n    def set_engine(self, engine: str) -> "CarBuilder":\n        self._engine = engine\n        return self\n\n    def build(self) -> "Car":\n        return Car(color=self._color, engine=self._engine)\n\nclass Car:\n    def __init__(self, color: str, engine: str):\n        self.color = color\n        self.engine = engine\n\ncar = (\n    CarBuilder()\n    .set_color("red")\n    .set_engine("V8")\n    .build()\n)\n'})}),"\n",(0,a.jsx)(n.p,{children:"This is the kind of code that makes you look like you know what you\u2019re doing... until you realize you just reinvented named arguments with method chaining and extra classes. All that boilerplate, just to avoid using Python\u2019s default arguments or keyword arguments?"}),"\n",(0,a.jsxs)(n.p,{children:["Congratulations! You\u2019ve just made a ",(0,a.jsx)(n.em,{children:"builder"})," to work around a problem Python already solves out of the box."]}),"\n",(0,a.jsx)(n.p,{children:"why Builder pattern is often needed due to lack of default parameter values:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'public class Car {\n    private final String color;\n    private final String engine;\n\n    private Car(Builder builder) {\n        this.color = builder.color;\n        this.engine = builder.engine;\n    }\n\n    public static class Builder {\n        private String color;   // no default value\n        private String engine;  // no default value\n\n        public Builder setColor(String color) {\n            this.color = color;\n            return this;\n        }\n\n        public Builder setEngine(String engine) {\n            this.engine = engine;\n            return this;\n        }\n\n        public Car build() {\n            // You might want to add validation here\n            return new Car(this);\n        }\n    }\n\n    public static void main(String[] args) {\n        Car car = new Car.Builder()\n            .setColor("Red")\n            .setEngine("V8")\n            .build();\n    }\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"In Java, constructors can\u2019t have default values for parameters, and method overloading quickly becomes cumbersome for many options. The Builder pattern solves this by allowing step-by-step construction with optional parameters."}),"\n",(0,a.jsx)(n.h3,{id:"the-pythonic-alternative-default-arguments-and-factory-functions--no-builders-required",children:"The Pythonic Alternative: Default Arguments and Factory Functions \u2014 No Builders Required"}),"\n",(0,a.jsx)(n.p,{children:"So how do we build complex objects in Python without all the ceremony? Simple: we just use the language like it was meant to be used."}),"\n",(0,a.jsx)(n.h4,{id:"1-use-default-arguments-like-a-normal-human",children:"1. Use Default Arguments Like a Normal Human"}),"\n",(0,a.jsx)(n.p,{children:"In Python, we don\u2019t need to chain setters just to create an object. We can give parameters default values right in the constructor \u2014 no extra classes needed:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'class Car:\n    def __init__(self, color: str = "black", engine: str = "V4"):\n        self.color = color\n        self.engine = engine\n\ncar = Car(color="red", engine="V8")\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Boom. Readable, concise, and infinitely easier to test. You want a default car? Just call ",(0,a.jsx)(n.code,{children:"Car()"}),". You want something fancy? Pass in the arguments. Done."]}),"\n",(0,a.jsx)(n.h4,{id:"2-want-something-fancier-use-a-factory-function-with-overloads",children:"2. Want Something Fancier? Use a Factory Function with Overloads"}),"\n",(0,a.jsxs)(n.p,{children:["If you want more control or better editor support (e.g. different argument combos), a ",(0,a.jsx)(n.strong,{children:"factory function"})," with ",(0,a.jsx)(n.code,{children:"typing.overload"})," gives you flexibility ",(0,a.jsx)(n.em,{children:"without"})," creating a whole ",(0,a.jsx)(n.code,{children:"Builder"})," class:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from typing import overload\n\nclass Car:\n    def __init__(self, color: str, engine: str):\n        self.color = color\n        self.engine = engine\n\n@overload\ndef make_car() -> Car: ...\n@overload\ndef make_car(color: str) -> Car: ...\n@overload\ndef make_car(color: str, engine: str) -> Car: ...\n\ndef make_car(color: str = "black", engine: str = "V4") -> Car:\n    return Car(color=color, engine=engine)\n\ncar1 = make_car()\ncar2 = make_car("red")\ncar3 = make_car("blue", "V8")\n'})}),"\n",(0,a.jsx)(n.p,{children:"You get clean logic, helpful autocompletion in your IDE, and zero boilerplate. Imagine that \u2014 solving the builder problem with just functions and defaults. Who knew?"})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},96544:e=>{e.exports=JSON.parse('{"permalink":"/ja/blog/design-patterns-you-should-unlearn-in-python-part1","source":"@site/blog/2025-06-19T14_07-design-patterns-you-should-unlearn-in-python/content.md","title":"Design Patterns You Should Unlearn in Python-Part1","description":"image-1.jpg","date":"2025-06-19T00:00:00.000Z","tags":[{"inline":false,"label":"python","permalink":"/ja/blog/tags/python","description":"general dicussion about programming in python"},{"inline":true,"label":"design patterns","permalink":"/ja/blog/tags/design-patterns"},{"inline":false,"label":"OOP","permalink":"/ja/blog/tags/oop","description":"Object-oriented programming principles and practices"}],"readingTime":8.09,"hasTruncateMarker":true,"authors":[{"name":"raceychan","title":"author of lihil, a developer.","url":"https://github.com/raceychan","page":{"permalink":"/ja/blog/authors/raceychan"},"socials":{"x":"https://x.com/raceychan","github":"https://github.com/raceychan"},"imageURL":"https://github.com/raceychan.png","key":"raceychan"}],"frontMatter":{"slug":"design-patterns-you-should-unlearn-in-python-part1","title":"Design Patterns You Should Unlearn in Python-Part1","authors":["raceychan"],"tags":["python","design patterns","oop"],"toc_min_heading_level":2,"toc_max_heading_level":5},"unlisted":false,"prevItem":{"title":"Design Patterns You Should Unlearn in Python-Part2","permalink":"/ja/blog/design-patterns-you-should-unlearn-in-python-part2"},"nextItem":{"title":"Decorators and Functional programming","permalink":"/ja/blog/decorators-and--functional-programming"}}')}}]);