<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="rss.xsl"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Lihil Blog</title>
        <link>https://lihil.cc/ja/blog</link>
        <description>Lihil Blog</description>
        <lastBuildDate>Sun, 03 Aug 2025 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>ja</language>
        <item>
            <title><![CDATA[Encapsulation Beyond Syntax: Do Access Modifiers Still Matter?]]></title>
            <link>https://lihil.cc/ja/blog/encapsulation-beyond-syntax-do-access-modifiers-still-matter</link>
            <guid>https://lihil.cc/ja/blog/encapsulation-beyond-syntax-do-access-modifiers-still-matter</guid>
            <pubDate>Sun, 03 Aug 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[gears]]></description>
            <content:encoded><![CDATA[<p><img decoding="async" loading="lazy" src="https://unsplash.com/photos/JBZvYieOmCQ/download?ixid=M3wxMjA3fDB8MXxzZWFyY2h8N3x8bWVjaGFuaWNzfGVufDB8fHx8MTc1NDI0NjQ1OXww&amp;force=true&amp;w=1920" alt="gears" class="img_ev3q"></p>
<p>Encapsulation in Python is one of those topics that often gets brushed off,  either as unnecessary boilerplate or as baggage from statically typed languages like Java and C++. In many Python teams, it’s treated as optional, or worse, irrelevant.</p>
<p>But this casual attitude has a cost.</p>
<p>As Python takes on a bigger role in enterprise software, especially with the rise of AI, more teams are building larger, more complex systems together. Without proper encapsulation, internal changes in one part of the codebase can leak out and break things for everyone else. It becomes harder to reason about code boundaries, harder to collaborate, and harder to move fast without stepping on each other’s toes.</p>
<p>In this post, we’ll talk about <strong>why encapsulation still matters in Python</strong>, why it’s becoming increasingly important, and how to approach it in a way that actually fits the language and its philosophy.</p>
<p>And just in case you’re wondering: <strong>no, this won’t be one of those "here’s how to mimic Java’s access modifiers in Python" posts.</strong> We're going deeper than that.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="access-modifiers-what-they-are-and-what-they-look-like"><strong>Access Modifiers: What They Are, and What They Look Like</strong><a href="https://lihil.cc/ja/blog/encapsulation-beyond-syntax-do-access-modifiers-still-matter#access-modifiers-what-they-are-and-what-they-look-like" class="hash-link" aria-label="access-modifiers-what-they-are-and-what-they-look-like への直接リンク" title="access-modifiers-what-they-are-and-what-they-look-like への直接リンク">​</a></h2>
<p>When people think of encapsulation, they often jump straight to <strong>access modifiers</strong>, and it’s easy to see why. In many languages, access modifiers are the main way to draw boundaries between internal and external code.</p>
<p>In Java, for example, you have explicit keywords:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">public class UserService {</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    protected UserRepository repository;</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    public void register(User user) {</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        // ...</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Here, <code>protected</code> means no one outside the class(and its subclasses) can touch <code>repository</code>, and <code>public</code> means anyone can call <code>register</code>.</p>
<blockquote>
<p><code>protected</code> is less strict in java, other classes <strong>in the same package</strong> can access protected member as well.</p>
</blockquote>
<p>Python, on the other hand, doesn’t have strict access modifiers. Instead, it relies on naming conventions:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token keyword" style="color:#81A1C1">class</span><span class="token plain"> </span><span class="token class-name" style="color:#8FBCBB">UserService</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">__init__</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> repo</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> UserRepository</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        self</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">_repository </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> repo</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">register</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> user</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> UserInfo</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        </span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>In this example, the leading underscore in <code>_repository</code> is Python’s way of saying “hey, this is internal,  don’t mess with it.” But it’s just a convention. You <em>can</em> still access it from the outside. If your type checker is configured correctly, it might warn you, but nothing at the interpreter level will stop you. No exceptions will be raised.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="why-do-we-need-encapsulation"><strong>Why Do We Need Encapsulation?</strong><a href="https://lihil.cc/ja/blog/encapsulation-beyond-syntax-do-access-modifiers-still-matter#why-do-we-need-encapsulation" class="hash-link" aria-label="why-do-we-need-encapsulation への直接リンク" title="why-do-we-need-encapsulation への直接リンク">​</a></h3>
<p>The primary reason is simple: <strong>to draw a line between what's internal and what's public</strong>. That line lets other developers,  or even future-you,  know what’s safe to rely on and what isn’t. When a method or attribute is marked internal (e.g. with a leading underscore), you're saying: <em>this is part of the implementation, not the interface.</em></p>
<p>Why does that matter? Because once other parts of the codebase,  or worse, external systems,  start depending on your internal details, <strong>you lose the freedom to change them</strong>. If you need to refactor, simplify, or remove something, you risk breaking unknown callers.</p>
<p>This is not a new problem. Software engineering has wrestled with this for decades, and the solution has been expressed through principles like the <strong>Open/Closed Principle (OCP)</strong>:</p>
<blockquote>
<p><em>Software entities should be open for extension but closed for modification.</em></p>
</blockquote>
<p>Encapsulation supports this by letting you change how things work internally, <strong>without changing the parts others depend on</strong>. When we design a class with a clear public interface and hidden internals, we make it easier to evolve the code over time without introducing regressions.</p>
<p>When we <em>do</em> need to expose something, we can still preserve encapsulation using tools like <code>@property</code>. This lets us provide a stable public interface, while keeping the flexibility to change how things work behind the scenes,  coercing types, adding guards, lazy-loading data, etc.</p>
<p>In general, when a class represents business logic, it’s often a good idea to <strong>default to making members protected</strong> and <strong>only expose public methods that represent meaningful, validated operations</strong>.</p>
<p>Take this example:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token decorator annotation punctuation" style="color:#8FBCBB">@dataclass</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">class</span><span class="token plain"> </span><span class="token class-name" style="color:#8FBCBB">UserInfo</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    email</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">str</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    name</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">str</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    role</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">str</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> </span><span class="token string" style="color:#A3BE8C">"user"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">class</span><span class="token plain"> </span><span class="token class-name" style="color:#8FBCBB">UserService</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">__init__</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> user_repo</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> UserRepository</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        self</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">_repo </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> user_repo</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">register</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> user</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> UserInfo</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        self</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">_validate_email</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">user</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">email</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        self</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">_validate_role</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">user</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">role</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        self</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">_repo</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">add_user</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">user</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">_validate_email</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> email</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">str</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">_validate_role</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> role</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">str</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Here, we don't want other services to call <code>_validate_email</code> or <code>_repo.add_user()</code> directly. Those are internal details that can change. What we <em>do</em> want them to use is the stable <code>register()</code> interface.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="what-happens-without-it"><strong>What Happens Without It?</strong><a href="https://lihil.cc/ja/blog/encapsulation-beyond-syntax-do-access-modifiers-still-matter#what-happens-without-it" class="hash-link" aria-label="what-happens-without-it への直接リンク" title="what-happens-without-it への直接リンク">​</a></h3>
<p>Now let’s imagine we didn’t bother with any of this,  we just exposed everything.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token comment" style="color:#4C566A;font-style:italic"># Somewhere else in the codebase</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">service </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> UserService</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">user </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> UserProfile</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">email</span><span class="token operator" style="color:#81A1C1">=</span><span class="token string" style="color:#A3BE8C">"a@example.com"</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> name</span><span class="token operator" style="color:#81A1C1">=</span><span class="token string" style="color:#A3BE8C">"Alice"</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">service</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">repository</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">add_user</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">user</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain">  </span><span class="token comment" style="color:#4C566A;font-style:italic"># Uh-oh</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Other parts of the system might start calling <code>user_repo.add_user()</code> directly, bypassing all the validation logic in <code>UserService.register()</code>. That could lead to subtle, inconsistent behavior, or worse,  bad data getting into your system.</p>
<p>Or maybe someone starts reusing <code>_validate_email()</code> from somewhere else. But since it was never meant to be used externally, one day we remove it during a refactor,  and now their code breaks. Whose fault is it? Technically not yours, but it sure won't feel that way when you’re on the hook for fixing it.</p>
<p>When everything is public, <strong>every change becomes dangerous</strong>. Before touching anything, you have to check who’s using it. Modify a method? Now you’re spelunking through half the codebase, updating every dependent. It’s a maintenance nightmare.</p>
<p>Encapsulation reduces that cognitive load. It tells you what you can change freely and what you need to be careful with. It gives your code <strong>safe zones</strong>.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="why-we-didnt-need-it-as-much-before"><strong>Why We Didn’t Need It as Much Before</strong><a href="https://lihil.cc/ja/blog/encapsulation-beyond-syntax-do-access-modifiers-still-matter#why-we-didnt-need-it-as-much-before" class="hash-link" aria-label="why-we-didnt-need-it-as-much-before への直接リンク" title="why-we-didnt-need-it-as-much-before への直接リンク">​</a></h3>
<p>So why hasn’t this been a bigger issue in Python until now?</p>
<p>Because for a long time, Python wasn’t used to build large systems with lots of contributors. It was a scripting language,  great for small utilities, automation, scientific experiments, or one-off data analyses. In those cases, it didn’t matter if you exposed your internals. You were often the only one touching the code anyway.</p>
<p>But that’s changed. Python is now powering <strong>production-grade systems</strong>, especially in AI, web services, and data infrastructure. With more teams, more contributors, and more complexity, the lack of boundaries starts to hurt.</p>
<p>Also, before Python 3.6, we simply didn’t have the tools to enforce encapsulation effectively. Without type hints and the ecosystem around them, it was hard to even notice violations of protected members, let alone prevent them. Now, with tools like pyright, mypy, and IDEs like VSCode, we can catch those violations early.</p>
<p><img decoding="async" loading="lazy" alt="procted_attr" src="https://lihil.cc/ja/assets/images/protected_attr-70c2b72b17e6d2780038a5c1115b505b.png" width="1907" height="262" class="img_ev3q"></p>
<ul>
<li>
<p>Example vscode config from lihil</p>
<div class="language-toml codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-toml codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token plain">[tool.pyright]</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">exclude = ["tests"]</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">include = ["lihil/*.py"]</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">python_version = "3.10"</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">typeCheckingMode = "strict"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="when-to-use-access-modifier-and-when-not-to">when to use access modifier and when not to<a href="https://lihil.cc/ja/blog/encapsulation-beyond-syntax-do-access-modifiers-still-matter#when-to-use-access-modifier-and-when-not-to" class="hash-link" aria-label="when to use access modifier and when not to への直接リンク" title="when to use access modifier and when not to への直接リンク">​</a></h2>
<p>Not all classes are created equal. Their purpose affects how much encapsulation you really need,  and what kind.</p>
<p>Let’s take two common categories: <strong>data classes</strong> and <strong>service classes</strong>.</p>
<p>Data classes are meant to carry state. But sometimes we start stuffing behavior and dependencies into them,  and that’s when things get messy. Consider this example:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token decorator annotation punctuation" style="color:#8FBCBB">@dataclass</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">class</span><span class="token plain"> </span><span class="token class-name" style="color:#8FBCBB">UserManager</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    users</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">list</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token plain">UserInfo</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    engine</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> AsyncEngine  </span><span class="token comment" style="color:#4C566A;font-style:italic"># external dependency</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">add_user</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> user_info</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> UserInfo</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        </span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>At first glance, this looks fine. But <code>engine</code> is not really just data,  it’s a dependency. It probably shouldn't be public, but because this is a dataclass, <em>everything is public by default</em>. You don’t get any real control over what’s exposed, which can lead to tight coupling and leaky abstractions.</p>
<p>Now let’s flip the problem: a service class with too many internal configuration values.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token keyword" style="color:#81A1C1">class</span><span class="token plain"> </span><span class="token class-name" style="color:#8FBCBB">FileDownloader</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">__init__</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> session</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> ClientSession</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        self</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">_session </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> session</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        self</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">_max_concurrent </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> </span><span class="token number" style="color:#81A1C1">3</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        self</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">_max_file_size </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> </span><span class="token number" style="color:#81A1C1">100</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">*</span><span class="token plain"> </span><span class="token number" style="color:#81A1C1">1024</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">*</span><span class="token plain"> </span><span class="token number" style="color:#81A1C1">1024</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        self</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">_timeout </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> </span><span class="token number" style="color:#81A1C1">10</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        self</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">_retries </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> </span><span class="token number" style="color:#81A1C1">2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        self</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">_allow_redirect </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> </span><span class="token boolean" style="color:#81A1C1">True</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        </span><span class="token comment" style="color:#4C566A;font-style:italic"># and the list goes on...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">download</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> url</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">str</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        </span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Each of these config values might need to be accessed from outside the class, but none of them are really <em>business logic</em>. So now you're stuck adding five <code>@property</code> methods just to make them selectively public. That's tedious and clutters the class with boilerplate.</p>
<p>A better approach? Extract the config into a separate dataclass:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token decorator annotation punctuation" style="color:#8FBCBB">@dataclass</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">class</span><span class="token plain"> </span><span class="token class-name" style="color:#8FBCBB">DownloadConfig</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    max_concurrent</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">int</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> </span><span class="token number" style="color:#81A1C1">3</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    max_file_size</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">int</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> </span><span class="token number" style="color:#81A1C1">100</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">*</span><span class="token plain"> </span><span class="token number" style="color:#81A1C1">1024</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">*</span><span class="token plain"> </span><span class="token number" style="color:#81A1C1">1024</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    timeout</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">int</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> </span><span class="token number" style="color:#81A1C1">10</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    retries</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">int</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> </span><span class="token number" style="color:#81A1C1">2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    allow_redirect</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">bool</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> </span><span class="token boolean" style="color:#81A1C1">True</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">class</span><span class="token plain"> </span><span class="token class-name" style="color:#8FBCBB">FileDownloader</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">__init__</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> session</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> ClientSession</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> config</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> DownloadConfig</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        self</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">_session </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> session</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        self</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">_config </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> config</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token decorator annotation punctuation" style="color:#8FBCBB">@property</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">config</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">-</span><span class="token operator" style="color:#81A1C1">&gt;</span><span class="token plain"> DownloadConfig</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"> self</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">_config</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Now the <code>FileDownloader</code> focuses on behavior, and the data lives in a plain, easy-to-inspect structure. No clutter. No second-guessing access modifiers.</p>
<p>If you mix state and behavior carelessly, encapsulation decisions get exhausting,  you’ll find yourself manually evaluating every attribute and method. But when the design is clear, the modifiers fall into place naturally.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="anti-patterns">Anti-patterns<a href="https://lihil.cc/ja/blog/encapsulation-beyond-syntax-do-access-modifiers-still-matter#anti-patterns" class="hash-link" aria-label="Anti-patterns への直接リンク" title="Anti-patterns への直接リンク">​</a></h3>
<p>The worst-case scenario is blindly adding getters and setters for everything,  especially when they don’t do anything useful. If you’re not doing validation, type coercion, or state transformation, a setter is just noise.</p>
<p>Let’s look at an example:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token keyword" style="color:#81A1C1">class</span><span class="token plain"> </span><span class="token class-name" style="color:#8FBCBB">Project</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">__init__</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> status</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">str</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        self</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">_status </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> status</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">	</span><span class="token decorator annotation punctuation" style="color:#8FBCBB">@property</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">status</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">-</span><span class="token operator" style="color:#81A1C1">&gt;</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">str</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"> self</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">_status</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">	</span><span class="token decorator annotation punctuation" style="color:#8FBCBB">@status</span><span class="token decorator annotation punctuation" style="color:#8FBCBB">.</span><span class="token decorator annotation punctuation" style="color:#8FBCBB">setter</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">status</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> status</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">str</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> self</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">_status </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> status</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>What value does this add? The methods don’t protect anything. They don’t clarify intent. They just waste space and give a false sense of encapsulation.</p>
<p>Now compare that to this alternative:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token keyword" style="color:#81A1C1">class</span><span class="token plain"> </span><span class="token class-name" style="color:#8FBCBB">Project</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">__init__</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> status</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">str</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        self</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">_status </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> status</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">mark_as_completed</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> reason</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">str</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">|</span><span class="token plain"> </span><span class="token boolean" style="color:#81A1C1">None</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> </span><span class="token boolean" style="color:#81A1C1">None</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:#A3BE8C">"""Mark the project as completed, with an optional reason for tracking."""</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        </span><span class="token keyword" style="color:#81A1C1">if</span><span class="token plain"> self</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">_status </span><span class="token operator" style="color:#81A1C1">==</span><span class="token plain"> </span><span class="token string" style="color:#A3BE8C">"comleted"</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">	        </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">		</span><span class="token keyword" style="color:#81A1C1">if</span><span class="token plain"> self</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">_status </span><span class="token keyword" style="color:#81A1C1">not</span><span class="token plain"> </span><span class="token keyword" style="color:#81A1C1">in</span><span class="token plain"> </span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token string" style="color:#A3BE8C">"started"</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> </span><span class="token string" style="color:#A3BE8C">"running"</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">		    </span><span class="token keyword" style="color:#81A1C1">raise</span><span class="token plain"> InvalidStatusError</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">_status</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        self</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">_status </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> </span><span class="token string" style="color:#A3BE8C">"completed"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        </span><span class="token keyword" style="color:#81A1C1">if</span><span class="token plain"> reason</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">            self</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">_log_reason</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">reason</span><span class="token punctuation" style="color:#8FBCBB">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This version is doing real work. You can pass multiple arguments. The method names express intent. The docstrings help the reader understand context. It’s much more maintainable and far less dogmatic.</p>
<p>And while we’re at it: don’t abuse <strong>inheritance</strong> either. You can spend all day trying to protect internals from subclasses,  or you can just stop subclassing altogether.</p>
<p>Sometimes the simpler answer is to design your class as effectively <strong>final</strong>, and let other classes <strong>depend on it via composition</strong>. You avoid the pitfalls of fragile base classes, and you make encapsulation easier to reason about.</p>
<p>Yes, <em>composition over inheritance</em>. Not always. But definitely more often than some legacy tutorials would have you believe.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="encapsulation-beyond-classes"><strong>Encapsulation Beyond Classes</strong><a href="https://lihil.cc/ja/blog/encapsulation-beyond-syntax-do-access-modifiers-still-matter#encapsulation-beyond-classes" class="hash-link" aria-label="encapsulation-beyond-classes への直接リンク" title="encapsulation-beyond-classes への直接リンク">​</a></h3>
<p>Encapsulation isn’t just about hiding attributes inside a class. The same principle applies at higher levels,  <strong>modules</strong>, <strong>packages</strong>, and even <strong>entire applications</strong>. It's all about controlling what gets exposed and what stays internal.</p>
<p>Let’s look at a few examples.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="python-module-level">Python (Module-Level)<a href="https://lihil.cc/ja/blog/encapsulation-beyond-syntax-do-access-modifiers-still-matter#python-module-level" class="hash-link" aria-label="Python (Module-Level) への直接リンク" title="Python (Module-Level) への直接リンク">​</a></h3>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token comment" style="color:#4C566A;font-style:italic"># token_service/__init__.py </span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">from</span><span class="token plain"> </span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">service </span><span class="token keyword" style="color:#81A1C1">import</span><span class="token plain"> TokenService  </span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">__all__ </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token string" style="color:#A3BE8C">"TokenService"</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token plain">  </span><span class="token comment" style="color:#4C566A;font-style:italic"># Everything else stays internal</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>You can also use leading underscores for private helpers:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token comment" style="color:#4C566A;font-style:italic"># token_service/utils.py </span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">_sign_payload</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This tells both humans and tools: "this isn’t part of the public interface."</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="typescript-filemodule-level">TypeScript (File/Module-Level)<a href="https://lihil.cc/ja/blog/encapsulation-beyond-syntax-do-access-modifiers-still-matter#typescript-filemodule-level" class="hash-link" aria-label="TypeScript (File/Module-Level) への直接リンク" title="TypeScript (File/Module-Level) への直接リンク">​</a></h3>
<div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token comment" style="color:#4C566A;font-style:italic">// token_service.ts</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">export</span><span class="token plain"> </span><span class="token keyword" style="color:#81A1C1">class</span><span class="token plain"> </span><span class="token class-name" style="color:#8FBCBB">TokenService</span><span class="token plain"> </span><span class="token punctuation" style="color:#8FBCBB">{</span><span class="token punctuation" style="color:#8FBCBB">}</span><span class="token plain">       </span><span class="token comment" style="color:#4C566A;font-style:italic">// public</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">class</span><span class="token plain"> </span><span class="token class-name" style="color:#8FBCBB">InternalCache</span><span class="token plain"> </span><span class="token punctuation" style="color:#8FBCBB">{</span><span class="token punctuation" style="color:#8FBCBB">}</span><span class="token plain">             </span><span class="token comment" style="color:#4C566A;font-style:italic">// not exported = internal to the module</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>If it’s not exported, it’s not part of the API. That’s module-level encapsulation.</p>
<hr>
<p>And you can scale this even further.</p>
<ul>
<li>At the <strong>package level</strong>, you decide which modules to expose in <code>__init__.py</code> or in your <code>pyproject.toml</code>.</li>
<li>At the <strong>application level</strong>, you expose only selected routes in your web API or specific commands in your CLI. Everything else stays behind the scenes.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="encapsulation-beyond-code">Encapsulation beyond code<a href="https://lihil.cc/ja/blog/encapsulation-beyond-syntax-do-access-modifiers-still-matter#encapsulation-beyond-code" class="hash-link" aria-label="Encapsulation beyond code への直接リンク" title="Encapsulation beyond code への直接リンク">​</a></h2>
<p>Encapsulation doesn’t stop at classes, functions, or modules, it applies at the <strong>architectural level</strong>, too.</p>
<p>In a microservice-based system, each service is an isolated unit with its own data, logic, and internal state. You don’t (and shouldn’t) reach across service boundaries to query another service’s database or call its internal methods. Instead, communication happens through <strong>well-defined interfaces</strong>, usually REST, gRPC, or message queues.</p>
<p>This is encapsulation at the system level:</p>
<ul>
<li>A service only exposes the API endpoints it wants others to use.</li>
<li>Internal components like DAOs, caches, feature flags, or job queues are entirely hidden.</li>
<li>Breaking changes can be avoided because external consumers never depend on internal details.</li>
</ul>
<p>A good example would be an <strong>API Gateway</strong>. To the caller, it stays transparent. But behind the scenes, the gateway might route the request to multiple services, apply authentication, logging, retries, or circuit-breaking logic. None of that is exposed. The caller doesn't know, and doesn't need to.</p>
<p>It’s the same idea as <code>private</code> or <code>protected</code>, just scaled out over a network.</p>
<p>Whether you’re defining a Python method, a Go module, or a service boundary in your infrastructure, the principle is the same:</p>
<blockquote>
<p><strong>Hide internal details. Expose a clean, intentional interface. Decouple everything else.</strong></p>
</blockquote>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="wrapping-up"><strong>Wrapping Up</strong><a href="https://lihil.cc/ja/blog/encapsulation-beyond-syntax-do-access-modifiers-still-matter#wrapping-up" class="hash-link" aria-label="wrapping-up への直接リンク" title="wrapping-up への直接リンク">​</a></h3>
<p>Encapsulation isn’t about following rules,  it’s about creating <strong>boundaries that protect your code</strong>. Whether you’re building a Python library, designing a class, organizing a module, or architecting an entire system, the goal is the same: <strong>make the interface clear, keep the internals private, and give yourself room to evolve</strong>.</p>
<p>In Python, we don’t have enforced access modifiers,  and that’s fine. We have conventions, type checkers, and design discipline. What matters is that you <em>use them deliberately</em>.</p>
<p>Don’t add encapsulation for its own sake. But don’t dismiss it just because you’re writing Python. If anything, Python’s flexibility makes it <em>more</em> important to clearly mark your boundaries.</p>
<p>Start by separating your data classes from your service classes. Use underscores to guide intention. Avoid meaningless setters. Prefer real methods with real names. And think in terms of public interfaces,  whether you're building a class or an entire API.</p>]]></content:encoded>
            <category>python</category>
            <category>OOP</category>
        </item>
        <item>
            <title><![CDATA[Design Patterns You Should Unlearn in Python-Part2]]></title>
            <link>https://lihil.cc/ja/blog/design-patterns-you-should-unlearn-in-python-part2</link>
            <guid>https://lihil.cc/ja/blog/design-patterns-you-should-unlearn-in-python-part2</guid>
            <pubDate>Fri, 20 Jun 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[image-1.jpg]]></description>
            <content:encoded><![CDATA[<p><img decoding="async" loading="lazy" src="https://unsplash.com/photos/so5nsYDOdxw/download?ixid=M3wxMjA3fDB8MXxhbGx8fHx8fHx8fHwxNzUwNDQyOTM2fA&amp;force=true&amp;w=1920" alt="image-1.jpg" class="img_ev3q"></p>
<p>Ever since the <em>Gang of Four</em> released their legendary <em>Design Patterns</em> book in the 90s, "design patterns" have been a cornerstone of how developers talk about software architecture. Over time, though, the term itself has grown fuzzier. When someone mentions a pattern today, they might be referring to:</p>
<ul>
<li>The <strong>intent</strong> behind the pattern: the problem it's trying to solve.</li>
<li>The <strong>implementation</strong>: the exact class structure or code to achieve it.</li>
</ul>
<p>When we talk about “design patterns you should unlearn in Python,” we’re talking about the second kind: the implementation. These patterns still solve real problems. But in Python, the way you solve them often looks nothing like the solutions shown in C++ or Java.</p>
<p>That’s the key idea behind this series. The moral is simple:</p>
<blockquote>
<p>Bears learn to climb trees to reach food. But Eagles do not climb, they fly.</p>
</blockquote>
<p>In Part 1, we took apart the Builder and Singleton patterns, showing how Python’s features (like default arguments or modules) make many “classic” implementations unnecessary or even counterproductive.</p>
<p>Now, let’s move on to two more patterns: <strong>Flyweight</strong> and <strong>Prototype</strong>. Both solve real problems. But as you'll see, Python gives us simpler, more natural ways to solve them.</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="flyweight-pattern-sharing-to-save-memory">Flyweight Pattern: Sharing to Save Memory<a href="https://lihil.cc/ja/blog/design-patterns-you-should-unlearn-in-python-part2#flyweight-pattern-sharing-to-save-memory" class="hash-link" aria-label="Flyweight Pattern: Sharing to Save Memory への直接リンク" title="Flyweight Pattern: Sharing to Save Memory への直接リンク">​</a></h2>
<p>In Part 1, we looked at Singleton, a classic example of overengineering in Python, where a simple module or closure often does the job better.</p>
<p>Flyweight is closely related. If Singleton is about having <strong>only one instance per class</strong>, Flyweight is about having <strong>one instance per unique set of parameters</strong>. Both patterns try to avoid excessive object creation, just in different ways.</p>
<p>But here’s the problem: developers often reach for Singleton when they really need Flyweight. Or worse, they don’t need either.</p>
<p>Here’s a quick litmus test:</p>
<ul>
<li><strong>No constructor parameters</strong> (or they’re always the same)? You probably don’t need a class. Just use a module-level object.</li>
<li><strong>Constructor parameters matter</strong>? Then Singleton is likely the wrong choice, a Flyweight-style pattern might be more appropriate.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="flyweight-from-the-book">Flyweight from the book<a href="https://lihil.cc/ja/blog/design-patterns-you-should-unlearn-in-python-part2#flyweight-from-the-book" class="hash-link" aria-label="Flyweight from the book への直接リンク" title="Flyweight from the book への直接リンク">​</a></h3>
<p>The Flyweight pattern was originally created to handle memory constraints in object-heavy applications. As the GoF book puts it:</p>
<blockquote>
<p>"Use sharing to support large numbers of fine-grained objects efficiently."</p>
</blockquote>
<p>The classic example is a document editor that represents thousands of characters. Each character with its own font, size, and position is a tiny object, but when you have tens of thousands of them, the memory cost adds up fast. Creating one full object per character can easily exhaust memory, especially in older environments with tight constraints.</p>
<blockquote>
<p>The book has detailed illustration on this, we will append links to this at the bottom of th article.</p>
</blockquote>
<p>Flyweight solves this by reusing shared parts of each character(like the glyph and font) and storing only the unique parts separately.</p>
<p>If you search online for how to implement the Flyweight pattern in Python, you’ll often run into examples like this:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token keyword" style="color:#81A1C1">from</span><span class="token plain"> typing </span><span class="token keyword" style="color:#81A1C1">import</span><span class="token plain"> ClassVar</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">from</span><span class="token plain"> dataclasses </span><span class="token keyword" style="color:#81A1C1">import</span><span class="token plain"> dataclass</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">class</span><span class="token plain"> </span><span class="token class-name" style="color:#8FBCBB">User</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    _users</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> ClassVar</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token builtin" style="color:#8FBCBB">dict</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token builtin" style="color:#8FBCBB">tuple</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token builtin" style="color:#8FBCBB">str</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">int</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> </span><span class="token string" style="color:#A3BE8C">"User"</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#8FBCBB">{</span><span class="token punctuation" style="color:#8FBCBB">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">__new__</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">cls</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> name</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">str</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> age</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">int</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">-</span><span class="token operator" style="color:#81A1C1">&gt;</span><span class="token plain"> </span><span class="token string" style="color:#A3BE8C">"User"</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        </span><span class="token keyword" style="color:#81A1C1">if</span><span class="token plain"> </span><span class="token keyword" style="color:#81A1C1">not</span><span class="token plain"> </span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">u </span><span class="token operator" style="color:#81A1C1">:=</span><span class="token plain"> cls</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">_users</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">get</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">name</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> age</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">            cls</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">_users</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">name</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> age</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> u </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">super</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">__new__</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">cls</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"> u</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">__init__</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> name</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">str</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> age</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">int</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">       self</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">name </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> name</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">       self</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">age </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> age</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This approach that uses <code>__new__</code> in combination with a class variable to control the creation of instances, similar to what we had in the singleton pattern, is an example of over-engineering most of the time, and tends to open a rabbit hole of problems.</p>
<p>The core issue is that <strong>mutable class variables are shared across all instances, and across subclasses too</strong>. This makes them very easy to mutate accidentally from multiple places in your codebase. Because the cache lives at the class level, it becomes difficult to control, track, or test.</p>
<p>The use of the <code>__new__</code> magic method makes things even worse. It bypasses the usual object creation flow, and can easily create surprising behavior, especially when subclassing. For example, would you expect this code to raise an error?</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token plain">u </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> User</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token string" style="color:#A3BE8C">"user"</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> </span><span class="token number" style="color:#81A1C1">20</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">assert</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">type</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">u</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token keyword" style="color:#81A1C1">is</span><span class="token plain"> User</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Imaging someone inherit your class:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token keyword" style="color:#81A1C1">class</span><span class="token plain"> </span><span class="token class-name" style="color:#8FBCBB">Admin</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">User</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">In </span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token number" style="color:#81A1C1">6</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> Admin</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token string" style="color:#A3BE8C">"user"</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token number" style="color:#81A1C1">20</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">Out</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token number" style="color:#81A1C1">6</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">&lt;</span><span class="token plain">__main__</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">Admin at </span><span class="token number" style="color:#81A1C1">0x7c123e18b650</span><span class="token operator" style="color:#81A1C1">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">In </span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token number" style="color:#81A1C1">7</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> User</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token string" style="color:#A3BE8C">"user"</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token number" style="color:#81A1C1">20</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">Out</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token number" style="color:#81A1C1">7</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">&lt;</span><span class="token plain">__main__</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">Admin at </span><span class="token number" style="color:#81A1C1">0x7c123e18b650</span><span class="token operator" style="color:#81A1C1">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>If you're working in a larger codebase or using third-party tools that instantiate a sbuclass of <code>User</code> without knowing about your custom <code>__new__</code>, these surprises turn into hard-to-debug runtime errors. Once you start rewriting object creation logic with <strong>new</strong> and shared caches, you're on shaky ground. It’s fragile, implicit, and rarely worth it in Python.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="better-approach-a-factory-function-with-cache">Better approach: A factory function with cache:<a href="https://lihil.cc/ja/blog/design-patterns-you-should-unlearn-in-python-part2#better-approach-a-factory-function-with-cache" class="hash-link" aria-label="Better approach: A factory function with cache: への直接リンク" title="Better approach: A factory function with cache: への直接リンク">​</a></h3>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token keyword" style="color:#81A1C1">from</span><span class="token plain"> functools </span><span class="token keyword" style="color:#81A1C1">import</span><span class="token plain"> lru_cache</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token decorator annotation punctuation" style="color:#8FBCBB">@lru_cache</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">create_user</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">name</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">str</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> age</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">int</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">-</span><span class="token operator" style="color:#81A1C1">&gt;</span><span class="token plain"> User</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"> User</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">name</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> age</span><span class="token punctuation" style="color:#8FBCBB">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This avoids all the pitfalls of <code>__new__</code> and class-level state. It’s simple, explicit, and safe.</p>
<p>Unlike the previous implementation, <code>lru_cache</code> guarantees that <code>create_user(...)</code> always returns a real <code>User</code> and not its subclasses. And because the cache is tied to the function, not the class, instances can't accidentally mutate or replace shared state. You can reason about it just like any other function: same inputs, same output, always predictable.</p>
<p>one small caveat is to avoid using it like this where you put the <code>lru_cache</code> decorated function side a class as a method.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token keyword" style="color:#81A1C1">class</span><span class="token plain"> </span><span class="token class-name" style="color:#8FBCBB">UserFactory</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token decorator annotation punctuation" style="color:#8FBCBB">@lru_cache</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">create_user</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> name</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">str</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> age</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">int</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">-</span><span class="token operator" style="color:#81A1C1">&gt;</span><span class="token plain"> User</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"> User</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">name</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> age</span><span class="token punctuation" style="color:#8FBCBB">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>In this case, every instance of <code>UserFactory</code> will have its own separate cache. That’s because <code>self</code> is included in the arguments being hashed. So calling <code>factory1.create_user("Alice", 30)</code> and <code>factory2.create_user("Alice", 30)</code> won’t hit the same cache, even if everything else is the same.</p>
<p>Also, when constructor params contain mutable objects, you might do a little DIY, just like what python <code>re.compile</code> did.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockTitle_Ktv7">re.compile from python 3.11</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token plain">_cache </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#8FBCBB">{</span><span class="token punctuation" style="color:#8FBCBB">}</span><span class="token plain">  </span><span class="token comment" style="color:#4C566A;font-style:italic"># ordered!</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">_MAXCACHE </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> </span><span class="token number" style="color:#81A1C1">512</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">_compile</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">pattern</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> flags</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token comment" style="color:#4C566A;font-style:italic"># internal: compile pattern</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">if</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">isinstance</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">flags</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> RegexFlag</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        flags </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> flags</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">value</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">try</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"> _cache</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token builtin" style="color:#8FBCBB">type</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">pattern</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> pattern</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> flags</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">except</span><span class="token plain"> KeyError</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        </span><span class="token keyword" style="color:#81A1C1">pass</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">if</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">isinstance</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">pattern</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> Pattern</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        </span><span class="token keyword" style="color:#81A1C1">if</span><span class="token plain"> flags</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">            </span><span class="token keyword" style="color:#81A1C1">raise</span><span class="token plain"> ValueError</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"> pattern</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">if</span><span class="token plain"> </span><span class="token keyword" style="color:#81A1C1">not</span><span class="token plain"> _compiler</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">isstring</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">pattern</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        </span><span class="token keyword" style="color:#81A1C1">raise</span><span class="token plain"> TypeError</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">if</span><span class="token plain"> flags </span><span class="token operator" style="color:#81A1C1">&amp;</span><span class="token plain"> T</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        </span><span class="token keyword" style="color:#81A1C1">import</span><span class="token plain"> warnings</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        warnings</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">warn</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    p </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> _compiler</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token builtin" style="color:#8FBCBB">compile</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">pattern</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> flags</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">if</span><span class="token plain"> </span><span class="token keyword" style="color:#81A1C1">not</span><span class="token plain"> </span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">flags </span><span class="token operator" style="color:#81A1C1">&amp;</span><span class="token plain"> DEBUG</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        </span><span class="token keyword" style="color:#81A1C1">if</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">len</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">_cache</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">&gt;=</span><span class="token plain"> _MAXCACHE</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">            </span><span class="token comment" style="color:#4C566A;font-style:italic"># Drop the oldest item</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">            </span><span class="token keyword" style="color:#81A1C1">try</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">                </span><span class="token keyword" style="color:#81A1C1">del</span><span class="token plain"> _cache</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token builtin" style="color:#8FBCBB">next</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token builtin" style="color:#8FBCBB">iter</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">_cache</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">            </span><span class="token keyword" style="color:#81A1C1">except</span><span class="token plain"> </span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">StopIteration</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> RuntimeError</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> KeyError</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">                </span><span class="token keyword" style="color:#81A1C1">pass</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        _cache</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token builtin" style="color:#8FBCBB">type</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">pattern</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> pattern</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> flags</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> p</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"> p</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="prototype-pattern-what-problem-is-it-solving">Prototype Pattern: What Problem Is It Solving?<a href="https://lihil.cc/ja/blog/design-patterns-you-should-unlearn-in-python-part2#prototype-pattern-what-problem-is-it-solving" class="hash-link" aria-label="Prototype Pattern: What Problem Is It Solving? への直接リンク" title="Prototype Pattern: What Problem Is It Solving? への直接リンク">​</a></h3>
<p>Now that we’ve seen how the Flyweight pattern often collapses into a simple caching function in Python, let’s look at another pattern that frequently gets reinterpreted (or misunderstood) in modern code: <strong>Prototype</strong>.</p>
<p>Prototype is especially interesting because the way it’s presented in many online tutorials today, “reuse object state to create new objects”, is not actually its original focus. In the <em>Design Patterns</em> book, the problem it solves is more architectural, and has to do with <strong>decoupling object creation from a framework that doesn’t know about your custom types</strong>.</p>
<p>Imagine you're building a music editor using a GUI framework. There's a <code>GraphicTool</code> class provided by the framework that users interact with to create graphics.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token keyword" style="color:#81A1C1">class</span><span class="token plain"> </span><span class="token class-name" style="color:#8FBCBB">GraphicTool</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">click</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">-</span><span class="token operator" style="color:#81A1C1">&gt;</span><span class="token plain"> Graphics</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token comment" style="color:#4C566A;font-style:italic"># when users click the GraphicTool it would return a graph object that would be rendered on the screen.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>You define your own classes like <code>MusicalNote</code>, which inherit from the base <code>Graphics</code> type:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token keyword" style="color:#81A1C1">from</span><span class="token plain"> gui </span><span class="token keyword" style="color:#81A1C1">import</span><span class="token plain"> Graphics</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">class</span><span class="token plain"> </span><span class="token class-name" style="color:#8FBCBB">MusicalNote</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">Graphics</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">	</span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">__init__</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> note</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">str</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> </span><span class="token string" style="color:#A3BE8C">"C4"</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">	    self</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">note </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> note</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Here’s the problem the GoF book describes:</p>
<blockquote>
<p>"&nbsp;GraphicTool presents a problem to the framework designer. The classes for notes and staves are specific to our application, but the GraphicTool class belongs to the framework. GraphicTool doesn't know how to create instances of our music classes to add to the score."</p>
</blockquote>
<p>And it continues:</p>
<blockquote>
<p>"&nbsp;The question is, how can the framework use it to parameterize instances of GraphicTool by the&nbsp;<em>class</em>&nbsp;of Graphic they're supposed to create?"</p>
</blockquote>
<p>In short, although <code>GraphicTool</code> knows how to work with the base <code>Graphics</code> type defined by the library, it has no knowledge of the concrete subclasses like <code>MusicalNote</code> that are defined in the client application. Yet it is the GUI library who must create and place these objects when users interact with the tool palette.</p>
<p>This creates a tension. The framework can’t be expected to hardcode support for every user-defined subclass of <code>Graphics</code>. Nor is it practical to subclass <code>GraphicTool</code> for each new graphic type the client might introduce. To address this, the <strong>Prototype</strong> pattern offers a solution: rather than teaching the framework how to construct every possible object, the client supplies a preconfigured instance(a prototype) that the framework can clone whenever a new object is needed.</p>
<p>Under this pattern, you define a <code>clone()</code> method on your custom graphic class such as <code>MusicalNote</code>. This method returns a new copy of the object, allowing <code>GraphicTool</code> to remain completely unaware of the specific type it is cloning. It simply holds a reference to the prototype and invokes <code>proto.clone()</code> whenever it needs to create a new instance. In this way, the creation logic stays entirely in the hands of the client, while the framework remains flexible and extensible.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token keyword" style="color:#81A1C1">class</span><span class="token plain"> </span><span class="token class-name" style="color:#8FBCBB">GraphicTool</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">__init__</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> proto</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> Graphics</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        self</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">proto </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> proto</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        </span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">click</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">-</span><span class="token operator" style="color:#81A1C1">&gt;</span><span class="token plain"> Graphic</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"> self</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">proto</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">clone</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token punctuation" style="color:#8FBCBB">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>From the client code, you might do:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token plain">g </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> GraphicTool</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">proto</span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain">MusicalNote</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This works because you implement a <code>clone()</code> method on your custom class, and the tool just calls that to get a new object.</p>
<p>But in Python, this approach feels a little... off. Wouldn’t you just pass a <strong>class</strong> or <strong>factory function</strong> instead? That’s how we handle this kind of situation all the time. It’s cleaner, easier to read, and plays nicer with the rest of the language:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token keyword" style="color:#81A1C1">class</span><span class="token plain"> </span><span class="token class-name" style="color:#8FBCBB">GraphicTool</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">__init__</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> graph_factory</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> Callable</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> Graphics</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        self</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">graph_factory </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> graph_factory</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        </span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">click</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">-</span><span class="token operator" style="color:#81A1C1">&gt;</span><span class="token plain"> Graphic</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"> self</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">graph_factory</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        </span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token comment" style="color:#4C566A;font-style:italic"># from client code</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">g </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> GrpahicTool</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">graph_factory</span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain">MusicalNote</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token comment" style="color:#4C566A;font-style:italic"># To create with default values, pass factory, say lambda: MusicalNote(note="C5")</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">g </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> GraphicTool</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">graph_factory</span><span class="token operator" style="color:#81A1C1">=</span><span class="token keyword" style="color:#81A1C1">lambda</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> MusicalNote</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">note</span><span class="token operator" style="color:#81A1C1">=</span><span class="token string" style="color:#A3BE8C">"C5"</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This pattern of passing a callable is everywhere in Python. From <code>asyncio</code>'s <code>set_task_factory()</code> to the <code>target</code> parameter in <code>threading.Thread</code>, Python developers lean on factories because they’re straightforward and flexible.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="why-didnt-the-gang-of-four-book-recommend-passing-a-factory-instead">why didn’t the <strong>Gang of Four</strong> book recommend passing a factory instead?<a href="https://lihil.cc/ja/blog/design-patterns-you-should-unlearn-in-python-part2#why-didnt-the-gang-of-four-book-recommend-passing-a-factory-instead" class="hash-link" aria-label="why-didnt-the-gang-of-four-book-recommend-passing-a-factory-instead への直接リンク" title="why-didnt-the-gang-of-four-book-recommend-passing-a-factory-instead への直接リンク">​</a></h3>
<p>The book itself provides the answer:</p>
<blockquote>
<p>" Prototype is particularly useful with static languages like C++, where classes are not objects, and little or no type information is available at run-time. It's less important in languages like Smalltalk or Objective C that provide what amounts to a prototype (i.e., a class object) for creating instances of each class."</p>
</blockquote>
<p>In other words, languages like C++ (especially pre-C++11) didn't support passing classes or lambdas as first-class objects. You couldn’t treat types as values or pass around factory functions. That’s why the Prototype pattern , cloning a sample object instead of constructing a new one, made sense in those contexts.</p>
<p>But in dynamic, reflective languages like Python, where classes and functions are first-class citizens, we have simpler, clearer alternatives. Instead of cloning objects with a <code>clone()</code> method, we just pass a <strong>factory function or class constructor</strong> ,  and we get more flexibility, better readability, and tighter integration with the language ecosystem.</p>
<p>So while the Prototype pattern remains a clever solution to a real problem in statically typed languages, in Python, it’s often <strong>an unnecessary workaround</strong> for a problem we don’t have.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="wrapping-up">Wrapping Up<a href="https://lihil.cc/ja/blog/design-patterns-you-should-unlearn-in-python-part2#wrapping-up" class="hash-link" aria-label="Wrapping Up への直接リンク" title="Wrapping Up への直接リンク">​</a></h3>
<p>Flyweight and Prototype both solve real problems: minimizing object creation and decoupling object construction from frameworks.</p>
<p>But the way they were designed in the context of C++ and Java doesn't always translate cleanly to Python.</p>
<p>In Python, we get powerful tools out of the box: first-class functions, flexible constructors, easy memoization with <code>functools.lru_cache</code>, and dynamic types. When we use those tools effectively, many classic patterns fade into the background, not because we’re ignoring good design, but because we’ve outgrown the constraints that made those patterns necessary in the first place.</p>
<p>So when you're tempted to reach for an old-school design pattern, pause and ask: <em>Is there a simpler, more natural way to express this in Python?</em></p>
<p>Most of the time, there is.</p>
<hr>
<p>Links:</p>
<p><a href="https://www.cs.unc.edu/~stotts/GOF/hires/pat4ffso.htm" target="_blank" rel="noopener noreferrer">GOF flyweight pattern</a></p>
<p><a href="https://github.com/python/cpython/blob/main/InternalDocs/string_interning.md" target="_blank" rel="noopener noreferrer">string interning from cpython github repo</a></p>
<p><a href="https://github.com/gennad/Design-Patterns-in-Python/blob/master/flyweight.py" target="_blank" rel="noopener noreferrer">Random flyweight implementation in python I found online</a></p>
<hr>
<p>Thank list</p>
<ul>
<li>
<p>Thanks u/commy2 for fixing the flyweight user code example</p>
</li>
<li>
<p>Thanks u/camel_hopper for fixing typo "Graphic" -&gt; "Graphics"</p>
</li>
<li>
<p>Thanks u/tomysshadow for fixing typo "GrpahicTool" -&gt; "GraphicTool"</p>
</li>
</ul>]]></content:encoded>
            <category>python</category>
            <category>design patterns</category>
            <category>OOP</category>
        </item>
        <item>
            <title><![CDATA[Design Patterns You Should Unlearn in Python-Part1]]></title>
            <link>https://lihil.cc/ja/blog/design-patterns-you-should-unlearn-in-python-part1</link>
            <guid>https://lihil.cc/ja/blog/design-patterns-you-should-unlearn-in-python-part1</guid>
            <pubDate>Thu, 19 Jun 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[image-1.jpg]]></description>
            <content:encoded><![CDATA[<p><img decoding="async" loading="lazy" src="https://unsplash.com/photos/ipmwlGIXzcw/download?ixid=M3wxMjA3fDB8MXxhbGx8fHx8fHx8fHwxNzUwMzQwMjYwfA&amp;force=true&amp;w=1920" alt="image-1.jpg" class="img_ev3q"></p>
<p>Search for “design patterns in Python” and you’ll be rewarded with a parade of tutorials showing off how to faithfully re-implement Gang of Four patterns — complete with class diagrams, factory hierarchies, and enough boilerplate to heat a small village. They’ll make you feel like you’re writing “serious” code. Smart. Professional. Enterprise-ready.</p>
<p>But here’s the problem: <strong>most of these patterns solve problems Python doesn’t have</strong>. They were designed for languages like Java and C++, where you have to jump through hoops just to get basic things done — no first-class functions, no dynamic typing, no modules as namespaces. Of course you’d need a Factory or a Singleton if your language gives you nothing else to work with.</p>
<p>Blindly copying those patterns into Python doesn’t make you clever. It makes your code harder to read, harder to test, and harder to explain to the next poor soul who has to maintain it — possibly you, three months from now.</p>
<p>In this post, we’ll go over a few classic GOF patterns that you should unlearn as a Python developer. For each one, we’ll look at:</p>
<ol>
<li>How it’s usually (and badly) implemented in Python,</li>
<li>Why it actually made sense back when people were writing Java in 2001,</li>
<li>And what the Pythonic alternative looks like — because yes, there’s almost always a simpler way.</li>
</ol>
<p>Let’s start with the biggest offender: <strong>Creational Patterns</strong> — aka, a whole category of solutions to problems Python already solved.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="singleton-when-you-want-a-global-variable-but-make-it-look-fancy">Singleton: When You Want a Global Variable but Make It Look Fancy<a href="https://lihil.cc/ja/blog/design-patterns-you-should-unlearn-in-python-part1#singleton-when-you-want-a-global-variable-but-make-it-look-fancy" class="hash-link" aria-label="Singleton: When You Want a Global Variable but Make It Look Fancy への直接リンク" title="Singleton: When You Want a Global Variable but Make It Look Fancy への直接リンク">​</a></h3>
<p>Ah yes, the Singleton. The go-to pattern for developers who want global state but still want to feel like they’re writing <em>object-oriented</em> code. In Python, you’ll often see this “smart” implementation using <code>__new__</code> and a class variable:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token keyword" style="color:#81A1C1">class</span><span class="token plain"> </span><span class="token class-name" style="color:#8FBCBB">Singleton</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    _instance</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token string" style="color:#A3BE8C">"Singleton"</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">|</span><span class="token plain"> </span><span class="token boolean" style="color:#81A1C1">None</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> </span><span class="token boolean" style="color:#81A1C1">None</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">__new__</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">cls</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">*</span><span class="token plain">args</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">**</span><span class="token plain">kwargs</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        </span><span class="token keyword" style="color:#81A1C1">if</span><span class="token plain"> cls</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">_instance </span><span class="token keyword" style="color:#81A1C1">is</span><span class="token plain"> </span><span class="token boolean" style="color:#81A1C1">None</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">            cls</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">_instance </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">super</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">__new__</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">cls</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"> cls</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">_instance</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>It <em>feels</em> clever — until you try to actually use it.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token plain">s1 </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> Singleton</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">name</span><span class="token operator" style="color:#81A1C1">=</span><span class="token string" style="color:#A3BE8C">"Alice"</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> age</span><span class="token operator" style="color:#81A1C1">=</span><span class="token number" style="color:#81A1C1">30</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">s2 </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> Singleton</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">name</span><span class="token operator" style="color:#81A1C1">=</span><span class="token string" style="color:#A3BE8C">"Bob"</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> age</span><span class="token operator" style="color:#81A1C1">=</span><span class="token number" style="color:#81A1C1">25</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">print</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">s1</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">name</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain">  </span><span class="token comment" style="color:#4C566A;font-style:italic"># 'Alice'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">print</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">s2</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">name</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain">  </span><span class="token comment" style="color:#4C566A;font-style:italic"># Still 'Alice'!</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>What happened? Well, it turns out you’re always getting the same instance, no matter what parameters you pass. Your second call to <code>Singleton(name="Bob", age=25)</code> didn’t create anything new — it just silently reused the original object, with its original attributes. No warning. No error. Just quietly wrong.</p>
<p>But things get worse when you try to subclass it:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token keyword" style="color:#81A1C1">class</span><span class="token plain"> </span><span class="token class-name" style="color:#8FBCBB">DBConnection</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    _instance </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> </span><span class="token boolean" style="color:#81A1C1">None</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">__new__</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">cls</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">*</span><span class="token plain">args</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">**</span><span class="token plain">kwargs</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        </span><span class="token keyword" style="color:#81A1C1">if</span><span class="token plain"> cls</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">_instance </span><span class="token keyword" style="color:#81A1C1">is</span><span class="token plain"> </span><span class="token boolean" style="color:#81A1C1">None</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">            cls</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">_instance </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">super</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">__new__</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">cls</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"> cls</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">_instance</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">class</span><span class="token plain"> </span><span class="token class-name" style="color:#8FBCBB">MySqlConnection</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">DBConnection</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">class</span><span class="token plain"> </span><span class="token class-name" style="color:#8FBCBB">PostGresConnection</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">DBConnection</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">conn1 </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> MySqlConnection</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">conn2 </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> PostGresConnection</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token punctuation" style="color:#8FBCBB">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>You might expect two separate objects, one for each subclass. But nope — both <code>conn1</code> and <code>conn2</code> are the same instance. That’s because <code>_instance</code> lives on the base class, not per subclass. So congratulations: <strong>you’ve now built the ultimate surprise box.</strong> <code>PostGresConnection()</code> might return a <code>MySqlConnection</code>, and <code>MySqlConnection()</code> might give you a <code>PostGresConnection</code>. It all depends on which one you happened to instantiate first.</p>
<p>Hope your app enjoys the roulette.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="why-singleton-made-sense-in-c">Why Singleton Made Sense in C++<a href="https://lihil.cc/ja/blog/design-patterns-you-should-unlearn-in-python-part1#why-singleton-made-sense-in-c" class="hash-link" aria-label="Why Singleton Made Sense in C++ への直接リンク" title="Why Singleton Made Sense in C++ への直接リンク">​</a></h3>
<p>Let’s be clear: the Singleton pattern didn’t appear out of thin air. It was born in the wild west of C++ — a language with no real module system and only a limited notion of namespaces.</p>
<p>In C++, your code lives in header and source files, all crammed together during compilation. There’s no clean way to say “this is private to this file” or “this global object only exists once” without jumping through hoops. The language gives you <strong>global variables</strong>, which quickly become a mess if you don’t control their initialization and lifetime carefully.</p>
<p>Because C++ doesn’t have modules (before c++20) or proper package systems, Singleton was a clever hack to guarantee <strong>exactly one</strong> instance of a class, avoiding the nightmare of duplicate globals and multiple definitions. It’s like the language forced you to invent a pattern to handle what Python solves with a simple module-level object.</p>
<div class="language-cpp codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-cpp codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token comment" style="color:#4C566A;font-style:italic">// logger.h</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token macro property directive-hash">#</span><span class="token macro property directive keyword" style="color:#81A1C1">ifndef</span><span class="token macro property"> </span><span class="token macro property expression">LOGGER_H</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token macro property directive-hash">#</span><span class="token macro property directive keyword" style="color:#81A1C1">define</span><span class="token macro property"> </span><span class="token macro property macro-name">LOGGER_H</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">class</span><span class="token plain"> </span><span class="token class-name" style="color:#8FBCBB">Logger</span><span class="token plain"> </span><span class="token punctuation" style="color:#8FBCBB">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">public</span><span class="token operator" style="color:#81A1C1">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">void</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">log</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token keyword" style="color:#81A1C1">const</span><span class="token plain"> </span><span class="token keyword" style="color:#81A1C1">char</span><span class="token operator" style="color:#81A1C1">*</span><span class="token plain"> msg</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token punctuation" style="color:#8FBCBB">}</span><span class="token punctuation" style="color:#8FBCBB">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">extern</span><span class="token plain"> Logger globalLogger</span><span class="token punctuation" style="color:#8FBCBB">;</span><span class="token plain"> </span><span class="token comment" style="color:#4C566A;font-style:italic">// Declaration</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token macro property directive-hash">#</span><span class="token macro property directive keyword" style="color:#81A1C1">endif</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token comment" style="color:#4C566A;font-style:italic">// logger.cpp</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token macro property directive-hash">#</span><span class="token macro property directive keyword" style="color:#81A1C1">include</span><span class="token macro property"> </span><span class="token macro property string" style="color:#A3BE8C">"logger.h"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token macro property directive-hash">#</span><span class="token macro property directive keyword" style="color:#81A1C1">include</span><span class="token macro property"> </span><span class="token macro property string" style="color:#A3BE8C">&lt;iostream&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">Logger globalLogger</span><span class="token punctuation" style="color:#8FBCBB">;</span><span class="token plain"> </span><span class="token comment" style="color:#4C566A;font-style:italic">// Definition</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">void</span><span class="token plain"> </span><span class="token class-name" style="color:#8FBCBB">Logger</span><span class="token double-colon punctuation" style="color:#8FBCBB">::</span><span class="token function" style="color:#88C0D0">log</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token keyword" style="color:#81A1C1">const</span><span class="token plain"> </span><span class="token keyword" style="color:#81A1C1">char</span><span class="token operator" style="color:#81A1C1">*</span><span class="token plain"> msg</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8FBCBB">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    std</span><span class="token double-colon punctuation" style="color:#8FBCBB">::</span><span class="token plain">cout </span><span class="token operator" style="color:#81A1C1">&lt;&lt;</span><span class="token plain"> msg </span><span class="token operator" style="color:#81A1C1">&lt;&lt;</span><span class="token plain"> std</span><span class="token double-colon punctuation" style="color:#8FBCBB">::</span><span class="token plain">endl</span><span class="token punctuation" style="color:#8FBCBB">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token punctuation" style="color:#8FBCBB">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token comment" style="color:#4C566A;font-style:italic">// main.cpp</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token macro property directive-hash">#</span><span class="token macro property directive keyword" style="color:#81A1C1">include</span><span class="token macro property"> </span><span class="token macro property string" style="color:#A3BE8C">"logger.h"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">int</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">main</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#8FBCBB">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    globalLogger</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token function" style="color:#88C0D0">log</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token string" style="color:#A3BE8C">"Starting the app"</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"> </span><span class="token number" style="color:#81A1C1">0</span><span class="token punctuation" style="color:#8FBCBB">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token punctuation" style="color:#8FBCBB">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The <code>globalLogger</code> is defined in one translation unit (<code>logger.cpp</code>), but if you accidentally define it in multiple places, the linker will complain about duplicate symbols. Managing this global state is tricky — and the Singleton pattern wraps this idea into a class that controls its own single instance, so you don’t have to worry about multiple definitions.</p>
<p>So yes, Singleton is basically a band-aid for C++’s lack of modularity and clean global state management — not a holy grail of software design.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-pythonic-alternative-just-use-modules-seriously">The Pythonic Alternative: Just Use Modules (Seriously)<a href="https://lihil.cc/ja/blog/design-patterns-you-should-unlearn-in-python-part1#the-pythonic-alternative-just-use-modules-seriously" class="hash-link" aria-label="The Pythonic Alternative: Just Use Modules (Seriously) への直接リンク" title="The Pythonic Alternative: Just Use Modules (Seriously) への直接リンク">​</a></h3>
<p>If you want a <strong>global, single instance</strong> in Python, you don’t need to reinvent the wheel with complicated Singleton classes. Python already gives you everything you need — in the form of <strong>modules</strong>.</p>
<p>Just create your object at the module level, and it’s guaranteed to be a singleton for as long as that module is imported:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token comment" style="color:#4C566A;font-style:italic"># settings.py</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">from</span><span class="token plain"> typing </span><span class="token keyword" style="color:#81A1C1">import</span><span class="token plain"> Final</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">class</span><span class="token plain"> </span><span class="token class-name" style="color:#8FBCBB">Settings</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">settings</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> Final</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token plain">Settings</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> Settings</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token comment" style="color:#4C566A;font-style:italic"># add typing.Final to settings so type checker would complain if someone is trying to re-assign the settings object.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="want-to-delay-creation-use-closures">Want to Delay Creation? Use Closures<a href="https://lihil.cc/ja/blog/design-patterns-you-should-unlearn-in-python-part1#want-to-delay-creation-use-closures" class="hash-link" aria-label="Want to Delay Creation? Use Closures への直接リンク" title="Want to Delay Creation? Use Closures への直接リンク">​</a></h3>
<p>Okay, maybe you want to <strong>delay</strong> creating the object until it’s actually needed — lazy initialization. Still no need for Singleton patterns.</p>
<p>Use a simple function with a closure and an internal variable to store the instance:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">_settings</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    settings</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> Settings </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> Settings</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">get_settings</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">-</span><span class="token operator" style="color:#81A1C1">&gt;</span><span class="token plain"> Settings</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"> settings</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">set_settings</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">value</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> Settings</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">-</span><span class="token operator" style="color:#81A1C1">&gt;</span><span class="token plain"> </span><span class="token boolean" style="color:#81A1C1">None</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        </span><span class="token keyword" style="color:#81A1C1">nonlocal</span><span class="token plain"> settings</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        settings </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> value</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"> get_settings</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> set_settings</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">get_settings</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> set_settings </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> _settings</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token punctuation" style="color:#8FBCBB">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><a href="https://github.com/raceychan/lihil/blob/master/lihil/config/__init__.py" target="_blank" rel="noopener noreferrer">Example of this pattern from github</a></p>
<p>This approach is especially useful when your settings object depends on values only available at runtime — for example, the path to an environment file (<code>env_file: Path</code>). With lazy initialization via closure, you can defer creating the <code>Settings</code> instance until you have all the necessary information, instead of forcing it at import time.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="builder-pattern-overcomplicating-object-creation-like-a-boss">Builder Pattern: Overcomplicating Object Creation Like a Boss<a href="https://lihil.cc/ja/blog/design-patterns-you-should-unlearn-in-python-part1#builder-pattern-overcomplicating-object-creation-like-a-boss" class="hash-link" aria-label="Builder Pattern: Overcomplicating Object Creation Like a Boss への直接リンク" title="Builder Pattern: Overcomplicating Object Creation Like a Boss への直接リンク">​</a></h3>
<p>If you’ve dabbled in design patterns, you’ve probably seen the Builder pattern praised as the elegant way to construct complex objects step-by-step. In languages like Java or C++, where constructors can’t have default arguments and object immutability is king, this makes some sense.</p>
<p>But in Python? Oh boy. You’ll often find “builders” that look like this:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token keyword" style="color:#81A1C1">class</span><span class="token plain"> </span><span class="token class-name" style="color:#8FBCBB">CarBuilder</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">__init__</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        self</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">_color </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> </span><span class="token boolean" style="color:#81A1C1">None</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        self</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">_engine </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> </span><span class="token boolean" style="color:#81A1C1">None</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">set_color</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> color</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">str</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">-</span><span class="token operator" style="color:#81A1C1">&gt;</span><span class="token plain"> </span><span class="token string" style="color:#A3BE8C">"CarBuilder"</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        self</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">_color </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> color</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"> self</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">set_engine</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> engine</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">str</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">-</span><span class="token operator" style="color:#81A1C1">&gt;</span><span class="token plain"> </span><span class="token string" style="color:#A3BE8C">"CarBuilder"</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        self</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">_engine </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> engine</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"> self</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">build</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">-</span><span class="token operator" style="color:#81A1C1">&gt;</span><span class="token plain"> </span><span class="token string" style="color:#A3BE8C">"Car"</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"> Car</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">color</span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain">self</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">_color</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> engine</span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain">self</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">_engine</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">class</span><span class="token plain"> </span><span class="token class-name" style="color:#8FBCBB">Car</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">__init__</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> color</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">str</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> engine</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">str</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        self</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">color </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> color</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        self</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">engine </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> engine</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">car </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    CarBuilder</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">set_color</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token string" style="color:#A3BE8C">"red"</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">set_engine</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token string" style="color:#A3BE8C">"V8"</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">build</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token punctuation" style="color:#8FBCBB">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This is the kind of code that makes you look like you know what you’re doing... until you realize you just reinvented named arguments with method chaining and extra classes. All that boilerplate, just to avoid using Python’s default arguments or keyword arguments?</p>
<p>Congratulations! You’ve just made a <em>builder</em> to work around a problem Python already solves out of the box.</p>
<p>why Builder pattern is often needed due to lack of default parameter values:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token plain">public class Car {</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    private final String color;</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    private final String engine;</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    private Car(Builder builder) {</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        this.color = builder.color;</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        this.engine = builder.engine;</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    public static class Builder {</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        private String color;   // no default value</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        private String engine;  // no default value</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        public Builder setColor(String color) {</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">            this.color = color;</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">            return this;</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        public Builder setEngine(String engine) {</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">            this.engine = engine;</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">            return this;</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        public Car build() {</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">            // You might want to add validation here</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">            return new Car(this);</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    public static void main(String[] args) {</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        Car car = new Car.Builder()</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">            .setColor("Red")</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">            .setEngine("V8")</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">            .build();</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>In Java, constructors can’t have default values for parameters, and method overloading quickly becomes cumbersome for many options. The Builder pattern solves this by allowing step-by-step construction with optional parameters.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-pythonic-alternative-default-arguments-and-factory-functions--no-builders-required">The Pythonic Alternative: Default Arguments and Factory Functions — No Builders Required<a href="https://lihil.cc/ja/blog/design-patterns-you-should-unlearn-in-python-part1#the-pythonic-alternative-default-arguments-and-factory-functions--no-builders-required" class="hash-link" aria-label="The Pythonic Alternative: Default Arguments and Factory Functions — No Builders Required への直接リンク" title="The Pythonic Alternative: Default Arguments and Factory Functions — No Builders Required への直接リンク">​</a></h3>
<p>So how do we build complex objects in Python without all the ceremony? Simple: we just use the language like it was meant to be used.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="1-use-default-arguments-like-a-normal-human">1. Use Default Arguments Like a Normal Human<a href="https://lihil.cc/ja/blog/design-patterns-you-should-unlearn-in-python-part1#1-use-default-arguments-like-a-normal-human" class="hash-link" aria-label="1. Use Default Arguments Like a Normal Human への直接リンク" title="1. Use Default Arguments Like a Normal Human への直接リンク">​</a></h4>
<p>In Python, we don’t need to chain setters just to create an object. We can give parameters default values right in the constructor — no extra classes needed:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token keyword" style="color:#81A1C1">class</span><span class="token plain"> </span><span class="token class-name" style="color:#8FBCBB">Car</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">__init__</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> color</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">str</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> </span><span class="token string" style="color:#A3BE8C">"black"</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> engine</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">str</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> </span><span class="token string" style="color:#A3BE8C">"V4"</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        self</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">color </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> color</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        self</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">engine </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> engine</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">car </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> Car</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">color</span><span class="token operator" style="color:#81A1C1">=</span><span class="token string" style="color:#A3BE8C">"red"</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> engine</span><span class="token operator" style="color:#81A1C1">=</span><span class="token string" style="color:#A3BE8C">"V8"</span><span class="token punctuation" style="color:#8FBCBB">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Boom. Readable, concise, and infinitely easier to test. You want a default car? Just call <code>Car()</code>. You want something fancy? Pass in the arguments. Done.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="2-want-something-fancier-use-a-factory-function-with-overloads">2. Want Something Fancier? Use a Factory Function with Overloads<a href="https://lihil.cc/ja/blog/design-patterns-you-should-unlearn-in-python-part1#2-want-something-fancier-use-a-factory-function-with-overloads" class="hash-link" aria-label="2. Want Something Fancier? Use a Factory Function with Overloads への直接リンク" title="2. Want Something Fancier? Use a Factory Function with Overloads への直接リンク">​</a></h4>
<p>If you want more control or better editor support (e.g. different argument combos), a <strong>factory function</strong> with <code>typing.overload</code> gives you flexibility <em>without</em> creating a whole <code>Builder</code> class:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token keyword" style="color:#81A1C1">from</span><span class="token plain"> typing </span><span class="token keyword" style="color:#81A1C1">import</span><span class="token plain"> overload</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">class</span><span class="token plain"> </span><span class="token class-name" style="color:#8FBCBB">Car</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">__init__</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> color</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">str</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> engine</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">str</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        self</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">color </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> color</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        self</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">engine </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> engine</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token decorator annotation punctuation" style="color:#8FBCBB">@overload</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">make_car</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">-</span><span class="token operator" style="color:#81A1C1">&gt;</span><span class="token plain"> Car</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token decorator annotation punctuation" style="color:#8FBCBB">@overload</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">make_car</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">color</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">str</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">-</span><span class="token operator" style="color:#81A1C1">&gt;</span><span class="token plain"> Car</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token decorator annotation punctuation" style="color:#8FBCBB">@overload</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">make_car</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">color</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">str</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> engine</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">str</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">-</span><span class="token operator" style="color:#81A1C1">&gt;</span><span class="token plain"> Car</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">make_car</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">color</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">str</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> </span><span class="token string" style="color:#A3BE8C">"black"</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> engine</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">str</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> </span><span class="token string" style="color:#A3BE8C">"V4"</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">-</span><span class="token operator" style="color:#81A1C1">&gt;</span><span class="token plain"> Car</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"> Car</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">color</span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain">color</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> engine</span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain">engine</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">car1 </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> make_car</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">car2 </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> make_car</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token string" style="color:#A3BE8C">"red"</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">car3 </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> make_car</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token string" style="color:#A3BE8C">"blue"</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> </span><span class="token string" style="color:#A3BE8C">"V8"</span><span class="token punctuation" style="color:#8FBCBB">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>You get clean logic, helpful autocompletion in your IDE, and zero boilerplate. Imagine that — solving the builder problem with just functions and defaults. Who knew?</p>]]></content:encoded>
            <category>python</category>
            <category>design patterns</category>
            <category>OOP</category>
        </item>
        <item>
            <title><![CDATA[Decorators and Functional programming]]></title>
            <link>https://lihil.cc/ja/blog/decorators-and--functional-programming</link>
            <guid>https://lihil.cc/ja/blog/decorators-and--functional-programming</guid>
            <pubDate>Wed, 28 May 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[lego]]></description>
            <content:encoded><![CDATA[<p><img decoding="async" loading="lazy" alt="lego" src="https://lihil.cc/ja/assets/images/lego-0490433a307831263d3f9192f897ede4.jpg" width="1920" height="2560" class="img_ev3q"></p>
<p>I often see people ask how to "do functional programming in Python"—as if it requires special tools or libraries.</p>
<p>But the truth is, many Python developers are already using functional programming techniques without realizing it. One of the clearest examples is the use of decorators.</p>
<p>Decorators are not only a staple of modern Python codebases but also a practical bridge between traditional imperative programming and the functional programming paradigm.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-essence-of-decorators">The Essence of Decorators<a href="https://lihil.cc/ja/blog/decorators-and--functional-programming#the-essence-of-decorators" class="hash-link" aria-label="The Essence of Decorators への直接リンク" title="The Essence of Decorators への直接リンク">​</a></h2>
<p>At their core, decorators are higher-order functions: a fundamental concept in functional programming.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-a-higher-order-function">What is a Higher-Order Function?<a href="https://lihil.cc/ja/blog/decorators-and--functional-programming#what-is-a-higher-order-function" class="hash-link" aria-label="What is a Higher-Order Function? への直接リンク" title="What is a Higher-Order Function? への直接リンク">​</a></h3>
<p>According to Wikipedia, a higher-order function is a function that either(or both):</p>
<ul>
<li>Takes one or more functions as arguments</li>
<li>Returns a function as its result.</li>
</ul>
<p>Let me give a naive example for this</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token keyword" style="color:#81A1C1">from</span><span class="token plain"> typing </span><span class="token keyword" style="color:#81A1C1">import</span><span class="token plain"> Callable</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">dummy</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">func</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> Callable</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> Any</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">-</span><span class="token operator" style="color:#81A1C1">&gt;</span><span class="token plain"> Callable</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> Any</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"> func</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>At first glance, this dummy function seems trivial.</p>
<p>it just returns the function it receives without any modification.</p>
<p>However, with a slight adjustment, we can transform it into something more useful:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token keyword" style="color:#81A1C1">from</span><span class="token plain"> typing </span><span class="token keyword" style="color:#81A1C1">import</span><span class="token plain"> ParamSpec</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> TypeVar</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">P</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> R </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> ParamSpec</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token string" style="color:#A3BE8C">"P"</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> TypeVar</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token string" style="color:#A3BE8C">"R"</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">dummy</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">func</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> Callable</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token plain">P</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> R</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">-</span><span class="token operator" style="color:#81A1C1">&gt;</span><span class="token plain"> Callable</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token plain">P</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> R</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">wrapper</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token operator" style="color:#81A1C1">*</span><span class="token plain">args</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> P</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">args</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">**</span><span class="token plain">kwargs</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> P</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">kwargs</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">-</span><span class="token operator" style="color:#81A1C1">&gt;</span><span class="token plain"> R</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        result </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> func</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token operator" style="color:#81A1C1">*</span><span class="token plain">args</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">**</span><span class="token plain">kwargs</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"> result</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"> wrapper</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This is a decorator! In Python, decorators satisfy both criteria:
they take a function as input and often return a new function(in our example, <code>wrapper</code>) with modified behavior.</p>
<p>So, decorators in Python are not just a convenient syntax—they’re a direct, real-world application of higher-order function concepts.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="functions-as-first-class-citizens">Functions as First-Class Citizens<a href="https://lihil.cc/ja/blog/decorators-and--functional-programming#functions-as-first-class-citizens" class="hash-link" aria-label="Functions as First-Class Citizens への直接リンク" title="Functions as First-Class Citizens への直接リンク">​</a></h3>
<p>How can Python support decorators so seamlessly? The answer lies in a foundational language feature: functions are first-class citizens.</p>
<p>This means functions in Python can be:</p>
<ul>
<li>
<p>Assigned to variables
we can do inside <code>wrapper</code></p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token plain">new_func </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> func</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">result </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> func</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token operator" style="color:#81A1C1">*</span><span class="token plain">args</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">**</span><span class="token plain">kwargs</span><span class="token punctuation" style="color:#8FBCBB">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p>Passed as arguments
This</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token decorator annotation punctuation" style="color:#8FBCBB">@dummy</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">add</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">a</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">int</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> b</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">int</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">-</span><span class="token operator" style="color:#81A1C1">&gt;</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">int</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"> a </span><span class="token operator" style="color:#81A1C1">+</span><span class="token plain"> b</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>is equivalent to</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token plain">add </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> dummy</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">add</span><span class="token punctuation" style="color:#8FBCBB">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>when we decorate <code>add</code> with <code>dummy</code>, python would automatically passes <code>add</code> as an argument to <code>dummy</code></p>
</li>
<li>
<p>Returned from other functions
Inside <code>dummy</code>, we return <code>wrapper</code> as a value, which is a function defined within <code>dummy</code>.</p>
</li>
<li>
<p>Stored in data structures like lists or dictionaries
we won't dig deep into this, but when dummy is defined, it is stored within module's global namespace, which is a dict under the hood.</p>
</li>
</ul>
<p>In contrast, in some statically typed or older programming languages(say java before java 8), functions are not first-class.</p>
<p>This would break in pre-java8</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token plain">public class Example {</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    public static void callTwice(Function func) {</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        func(); // Error: not a valid function call</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        func();</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    public static void main(String[] args) {</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        callTwice(sayHello); // sayHello isn't a value</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    public static void sayHello() {</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        System.out.println("Hello");</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="therefore">Therefore...<a href="https://lihil.cc/ja/blog/decorators-and--functional-programming#therefore" class="hash-link" aria-label="Therefore... への直接リンク" title="Therefore... への直接リンク">​</a></h2>
<p>If you've used a decorator like <code>@functools.lru_cache</code>, <code>@app.get</code>, or <code>@login_required</code>, then you've already dipped your toes into functional programming. You’re working with functions that modify or enhance the behavior of other functions—precisely the kind of thing functional programming is all about.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="functional-programming-with-decorators">Functional Programming with Decorators<a href="https://lihil.cc/ja/blog/decorators-and--functional-programming#functional-programming-with-decorators" class="hash-link" aria-label="Functional Programming with Decorators への直接リンク" title="Functional Programming with Decorators への直接リンク">​</a></h2>
<p>Decorators don't just align with functional programming.</p>
<p>they can enable several important techniques:</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-function-composition">1. Function Composition<a href="https://lihil.cc/ja/blog/decorators-and--functional-programming#1-function-composition" class="hash-link" aria-label="1. Function Composition への直接リンク" title="1. Function Composition への直接リンク">​</a></h3>
<p>In functional programming, composition is the idea of building complex behavior by combining simple functions. Decorators can be used to layer transformations or validations around a core function, much like composing small functions into a pipeline.</p>
<p>You can chain multiple decorators to achieve a composition-like behavior, each adding behavior before or after the main function is run.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token decorator annotation punctuation" style="color:#8FBCBB">@decor1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token decorator annotation punctuation" style="color:#8FBCBB">@decor2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token decorator annotation punctuation" style="color:#8FBCBB">@decor3</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">decor</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">a</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">int</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> b</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">int</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">-</span><span class="token operator" style="color:#81A1C1">&gt;</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">int</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This pattern is powerful, but it comes with some caveats:</p>
<ul>
<li>
<p>Signature incompatibility:
If one decorator modifies the function’s signature (e.g., changes the number or type of arguments), it may break compatibility with other decorators in the chain.For decorators that need to inspect the function signature, if one decorator does not preserve it, the others may break.</p>
</li>
<li>
<p>Order sensitivity: The order in which decorators are applied matters. For example, using <code>@abc.abstractmethod</code> on a method that has already been wrapped by another decorator may lead to incorrect behavior or errors.</p>
</li>
<li>
<p>Readability: As the number of decorators grows, it becomes harder to understand what the function actually does at a glance.</p>
</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="example-from-lihil">Example from lihil<a href="https://lihil.cc/ja/blog/decorators-and--functional-programming#example-from-lihil" class="hash-link" aria-label="Example from lihil への直接リンク" title="Example from lihil への直接リンク">​</a></h4>
<p>In lihil, an endpoint can receive multiple plugins (which are essentially decorators) using a cleaner and more structured syntax:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token decorator annotation punctuation" style="color:#8FBCBB">@user</span><span class="token decorator annotation punctuation" style="color:#8FBCBB">.</span><span class="token decorator annotation punctuation" style="color:#8FBCBB">post</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">plugins</span><span class="token operator" style="color:#81A1C1">=</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token plain">plugin1</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> plugin2</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> plugin3</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">async</span><span class="token plain"> </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">create_user</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Under the hood, lihil applies these plugins in sequence by decorating the endpoint function:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token keyword" style="color:#81A1C1">for</span><span class="token plain"> plugin </span><span class="token keyword" style="color:#81A1C1">in</span><span class="token plain"> plugins</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    func </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> plugin</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">func</span><span class="token punctuation" style="color:#8FBCBB">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This approach maintains the core idea of composition while improving clarity and control over the decoration process.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-currying">2. Currying<a href="https://lihil.cc/ja/blog/decorators-and--functional-programming#2-currying" class="hash-link" aria-label="2. Currying への直接リンク" title="2. Currying への直接リンク">​</a></h3>
<p>Currying is the process of transforming a function that takes multiple arguments into a sequence of functions that each take a single argument. While Python doesn't support automatic currying like Haskell, you can manually simulate currying using decorators—returning nested functions that capture arguments through closure.</p>
<p>This is especially powerful when writing configuration-like decorators, where parameters are fixed upfront and later used to modify a function's behavior.</p>
<p>Consider the following example:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token plain"> </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">curry</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">func</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> Callable</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> R</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">*</span><span class="token plain">curry_args</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> Any</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">**</span><span class="token plain">curry_kwargs</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> Any</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">     </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">wrapper</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token operator" style="color:#81A1C1">*</span><span class="token plain">args</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> Any</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">**</span><span class="token plain">kwargs</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> Any</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">-</span><span class="token operator" style="color:#81A1C1">&gt;</span><span class="token plain"> R</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">         </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"> func</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token operator" style="color:#81A1C1">*</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">curry_args </span><span class="token operator" style="color:#81A1C1">+</span><span class="token plain"> args</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">**</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">curry_kwargs </span><span class="token operator" style="color:#81A1C1">|</span><span class="token plain"> kwargs</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">     </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"> wrapper</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Here, curry is a higher-order function that returns a new function (wrapper) with some arguments pre-filled. These pre-filled values are remembered through closure, and the remaining arguments can be supplied later when the returned function is called.</p>
<p>To demonstrate how this works, imagine a simple subtraction function:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">sub</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">a</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">int</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> b</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">int</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">-</span><span class="token operator" style="color:#81A1C1">&gt;</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">int</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"> a </span><span class="token operator" style="color:#81A1C1">-</span><span class="token plain"> b</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">sub_five </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> curry</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">sub</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> b</span><span class="token operator" style="color:#81A1C1">=</span><span class="token number" style="color:#81A1C1">5</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">assert</span><span class="token plain"> sub_five</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">a</span><span class="token operator" style="color:#81A1C1">=</span><span class="token number" style="color:#81A1C1">8</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">==</span><span class="token plain"> </span><span class="token number" style="color:#81A1C1">3</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>We can use curry to fix one of the arguments, say b = 5, creating a new function that subtracts 5 from any input</p>
<p>By pre-binding the second argument <code>b</code>, we've effectively turned <code>sub(a, b)</code> into a function that only needs <code>a</code>. This mirrors the essence of currying in functional programming—progressively transforming a multi-argument function into a chain of single-argument calls.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="3-closures">3. Closures<a href="https://lihil.cc/ja/blog/decorators-and--functional-programming#3-closures" class="hash-link" aria-label="3. Closures への直接リンク" title="3. Closures への直接リンク">​</a></h3>
<p>A closure occurs when a function "remembers" variables from the scope in which it was created, even after that scope has finished executing. This is how decorators store context—whether it's a permission requirement, a configuration flag, or a runtime condition.</p>
<p>Closures are what make decorators stateful, enabling powerful behaviors like caching, logging, or retry logic without modifying the function’s internal logic. They allow decorators to wrap and extend functions while retaining information across calls.</p>
<p>let's take a look at a real-world example: Python’s built-in lru_cache decorator from the functools module.</p>
<p>Internally, it uses a closure to remember the function’s arguments and their corresponding results.</p>
<p>Here's a simplified version of its implementation (based on Python 3.12), with some details omitted to highlight the key point:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token plain"> </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">_lru_cache_wrapper</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">user_function</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> maxsize</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> typed</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> _CacheInfo</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">     </span><span class="token comment" style="color:#4C566A;font-style:italic"># Constants shared by all lru cache instances:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">     sentinel </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">object</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain">          </span><span class="token comment" style="color:#4C566A;font-style:italic"># unique object used to signal cache misses</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">     make_key </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> _make_key         </span><span class="token comment" style="color:#4C566A;font-style:italic"># build a key from the function arguments</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">     cache </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#8FBCBB">{</span><span class="token punctuation" style="color:#8FBCBB">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">     hits </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> misses </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> </span><span class="token number" style="color:#81A1C1">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">      </span><span class="token comment" style="color:#4C566A;font-style:italic"># case when maxsize is None</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">      </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">wrapper</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token operator" style="color:#81A1C1">*</span><span class="token plain">args</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">**</span><span class="token plain">kwds</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">          </span><span class="token comment" style="color:#4C566A;font-style:italic"># Simple caching without ordering or size limit</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">          </span><span class="token keyword" style="color:#81A1C1">nonlocal</span><span class="token plain"> hits</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> misses</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">          key </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> make_key</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">args</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> kwds</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> typed</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">          result </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> cache_get</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">key</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> sentinel</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">          </span><span class="token keyword" style="color:#81A1C1">if</span><span class="token plain"> result </span><span class="token keyword" style="color:#81A1C1">is</span><span class="token plain"> </span><span class="token keyword" style="color:#81A1C1">not</span><span class="token plain"> sentinel</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">              hits </span><span class="token operator" style="color:#81A1C1">+=</span><span class="token plain"> </span><span class="token number" style="color:#81A1C1">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">              </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"> result</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">          misses </span><span class="token operator" style="color:#81A1C1">+=</span><span class="token plain"> </span><span class="token number" style="color:#81A1C1">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">          result </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> user_function</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token operator" style="color:#81A1C1">*</span><span class="token plain">args</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">**</span><span class="token plain">kwds</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">          cache</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token plain">key</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> result</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">          </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"> result</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Here, the inner function <code>wrapper</code> forms a closure over several variables—<code>cache</code>, <code>hits</code>, <code>misses</code>, and <code>make_key</code>(a util function).</p>
<p>These variables live outside the wrapper function, but remain accessible to it even after <code>_lru_cache_wrapper</code> has finished executing. As a result, wrapper is able to remember past function calls and cache results accordingly.</p>
<p>This technique enables powerful optimizations like memoization, all while keeping the decorator’s logic entirely separate from the original function body.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="other-functional-programming-techniques-in-python">Other Functional Programming Techniques in Python<a href="https://lihil.cc/ja/blog/decorators-and--functional-programming#other-functional-programming-techniques-in-python" class="hash-link" aria-label="Other Functional Programming Techniques in Python への直接リンク" title="Other Functional Programming Techniques in Python への直接リンク">​</a></h3>
<p>Beyond decorators, Python supports many functional idioms that align with the same principles:</p>
<ol>
<li>
<p>Comprehensions
list, dict, and set comprehensions are Python’s upgrades to <code>map</code> and <code>filter</code>, expressed in a concise and readable way. They're pure, declarative, and avoid side effects.</p>
</li>
<li>
<p>Generators
Generators support lazy evaluation, a key technique in functional programming. Using yield, Python functions can produce a sequence of results over time, supporting pipelines and memory-efficient data flows.</p>
</li>
<li>
<p>Built-in Functions
Python's standard library includes functional tools like map, filter, reduce, any, all, and functools.partial. These utilities operate on data immutably and often use higher-order functions—core values of the functional paradigm.</p>
</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="put-them-all-together">Put them all together<a href="https://lihil.cc/ja/blog/decorators-and--functional-programming#put-them-all-together" class="hash-link" aria-label="Put them all together への直接リンク" title="Put them all together への直接リンク">​</a></h3>
<p>Let's write some functions that illustrate these concepts.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token plain">T </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> TypeVar</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token string" style="color:#A3BE8C">"T"</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">is_even</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">x</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">int</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">-</span><span class="token operator" style="color:#81A1C1">&gt;</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">bool</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">x </span><span class="token operator" style="color:#81A1C1">%</span><span class="token plain"> </span><span class="token number" style="color:#81A1C1">2</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">==</span><span class="token plain"> </span><span class="token number" style="color:#81A1C1">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">larger_than</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">x</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">int</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> threshold</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">int</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">-</span><span class="token operator" style="color:#81A1C1">&gt;</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">bool</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"> x </span><span class="token operator" style="color:#81A1C1">&gt;</span><span class="token plain"> threshold</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Now we define a utility function that checks whether a value satisfies a list of conditions. This uses a generator expression and <code>all()</code> for declarative, short-circuiting evaluation:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">meets_conditions</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token operator" style="color:#81A1C1">*</span><span class="token plain">conditions</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> Callable</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token plain">T</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">bool</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> target</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> T</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">-</span><span class="token operator" style="color:#81A1C1">&gt;</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">bool</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">all</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">condition</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">target</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token keyword" style="color:#81A1C1">for</span><span class="token plain"> condition </span><span class="token keyword" style="color:#81A1C1">in</span><span class="token plain"> conditions</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token comment" style="color:#4C566A;font-style:italic"># generator comprehension</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Finally, we wrap everything into a decorator. It accepts multiple conditions and applies them to the result of a function. We also use <code>functools.partial</code> to pre-fill parameters—a form of currying:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">check_result</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token operator" style="color:#81A1C1">*</span><span class="token plain">conditions</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> Callable</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token plain">T</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">bool</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">decorator</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">func</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> Callable</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token plain">P</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> T</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">wrapper</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token operator" style="color:#81A1C1">*</span><span class="token plain">args</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> P</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">args</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">**</span><span class="token plain">kwargs</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> P</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">kwargs</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">-</span><span class="token operator" style="color:#81A1C1">&gt;</span><span class="token plain"> T</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">            result </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> func</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token operator" style="color:#81A1C1">*</span><span class="token plain">args</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">**</span><span class="token plain">kwargs</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">            </span><span class="token keyword" style="color:#81A1C1">if</span><span class="token plain"> </span><span class="token keyword" style="color:#81A1C1">not</span><span class="token plain"> meets_conditions</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token operator" style="color:#81A1C1">*</span><span class="token plain">conditions</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> target</span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain">result</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">                </span><span class="token keyword" style="color:#81A1C1">raise</span><span class="token plain"> ValueError</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token string" style="color:#A3BE8C">"Return value did not meet required conditions"</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">            </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"> result</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"> wrapper</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"> decorator</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token decorator annotation punctuation" style="color:#8FBCBB">@check_result</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">is_even</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> partial</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">larger_than</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> threshold</span><span class="token operator" style="color:#81A1C1">=</span><span class="token number" style="color:#81A1C1">5</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">add</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">a</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">int</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> b</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">int</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">-</span><span class="token operator" style="color:#81A1C1">&gt;</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">int</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"> a </span><span class="token operator" style="color:#81A1C1">+</span><span class="token plain"> b</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">assert</span><span class="token plain"> add</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token number" style="color:#81A1C1">3</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> </span><span class="token number" style="color:#81A1C1">5</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">==</span><span class="token plain"> </span><span class="token number" style="color:#81A1C1">8</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">add</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token number" style="color:#81A1C1">1</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> </span><span class="token number" style="color:#81A1C1">1</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token comment" style="color:#4C566A;font-style:italic"># This would fail</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">add</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token number" style="color:#81A1C1">4</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> </span><span class="token number" style="color:#81A1C1">3</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token comment" style="color:#4C566A;font-style:italic"># This would fail too</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="wrapping-up">Wrapping Up<a href="https://lihil.cc/ja/blog/decorators-and--functional-programming#wrapping-up" class="hash-link" aria-label="Wrapping Up への直接リンク" title="Wrapping Up への直接リンク">​</a></h2>
<p>Decorators in Python are a clear, powerful example of how functional programming concepts can thrive in an imperative language. By understanding decorators as higher-order functions, we unlock a whole world of expressive, reusable, and modular code.</p>
<p>And while the classic decorator pattern is “a function that takes a function and returns a function,” it doesn’t stop there.</p>
<p>In Python, methods can receive and return other methods, and callable objects (like classes with <strong>call</strong>) can decorate other callables.</p>
<p>These variations still follow the same core idea:</p>
<blockquote>
<p>taking one callable and returning another, often with enhanced behavior.</p>
</blockquote>
<p>This flexibility is what makes decorators such a practical bridge to functional programming. Whether you’re enforcing constraints, composing behaviors, caching results, or injecting dependencies, decorators offer a clean, composable, and Pythonic way to do it—all while leveraging first-class functions and closures.</p>
<p>What do you think? Have you used decorators beyond the classic function-to-function pattern?</p>
<p>Would you be interested in exploring the object-oriented side of decorators—like how methods or callable classes can act as decorators too?</p>
<p>Let me know your thoughts or questions—I'd love to hear how you use (or plan to use) decorators in your own projects!</p>]]></content:encoded>
            <category>python</category>
        </item>
        <item>
            <title><![CDATA[Set Up User Authentication in Minutes — With or Without a Standalone Database Using lihil-auth]]></title>
            <link>https://lihil.cc/ja/blog/lihil-auth</link>
            <guid>https://lihil.cc/ja/blog/lihil-auth</guid>
            <pubDate>Mon, 26 May 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[security]]></description>
            <content:encoded><![CDATA[<p><img decoding="async" loading="lazy" alt="security" src="https://lihil.cc/ja/assets/images/security-d9a9ab6a748229087285372cd80631b9.jpg" width="4576" height="3051" class="img_ev3q"></p>
<p>As someone who has worked on multiple web projects, I’ve found user authentication to be a recurring pain point. Whether I was integrating a third-party auth provider like Supabase, or worse — rolling my own auth system — I often found myself rewriting the same boilerplate:</p>
<ul>
<li>
<p>Configuring JWTs</p>
</li>
<li>
<p>Decoding tokens from headers</p>
</li>
<li>
<p>Serializing them back</p>
</li>
<li>
<p>Hashing passwords</p>
</li>
<li>
<p>Validating login credentials</p>
</li>
</ul>
<p>And that’s not even touching error handling, route wiring, or OpenAPI documentation.</p>
<p>So I built lihil-auth, a plugin system that makes user authentication a breeze. It supports both third-party platforms like <code>Supabase</code> and self-hosted solutions using JWT — with minimal effort.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="supabase-auth-in-one-line">Supabase Auth in One Line<a href="https://lihil.cc/ja/blog/lihil-auth#supabase-auth-in-one-line" class="hash-link" aria-label="Supabase Auth in One Line への直接リンク" title="Supabase Auth in One Line への直接リンク">​</a></h3>
<p>If you're using Supabase, setting up authentication is as simple as:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token keyword" style="color:#81A1C1">from</span><span class="token plain"> lihil </span><span class="token keyword" style="color:#81A1C1">import</span><span class="token plain"> Lihil</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">from</span><span class="token plain"> lihil</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">plugins</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">auth</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">supabase </span><span class="token keyword" style="color:#81A1C1">import</span><span class="token plain"> signin_route_factory</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> signup_route_factory</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">app </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> Lihil</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">app</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">include_routes</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    signin_route_factory</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">route_path</span><span class="token operator" style="color:#81A1C1">=</span><span class="token string" style="color:#A3BE8C">"/login"</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    signup_route_factory</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">route_path</span><span class="token operator" style="color:#81A1C1">=</span><span class="token string" style="color:#A3BE8C">"/signup"</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token punctuation" style="color:#8FBCBB">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Here, <code>signin_route_factory</code> and <code>signup_route_factory</code> generate the <code>/login</code> and <code>/signup</code> routes for you, respectively. They handle everything from user registration to login, including password hashing and JWT generation(thanks to supabase).</p>
<p>You can customize credential type by configuring <code>sign_up_with</code> parameter, where you might want to use <code>phone</code> instead of <code>email</code> for signing up users.</p>
<p>These routes immediately become available in your OpenAPI docs (/docs), allowing you to explore, debug, and test them interactively(thanks to swagger-ui):</p>
<p><img decoding="async" loading="lazy" alt="Supabase Routes" src="https://lihil.cc/ja/assets/images/openapi_supabase_routes-b6ba4936c94e5f0ef621019aac6363d8.png" width="1736" height="1078" class="img_ev3q">
<img decoding="async" loading="lazy" alt="Supabase debug" src="https://lihil.cc/ja/assets/images/openapi_supabase_debug-b14b387170c10c9d5834a6fdb36b71da.png" width="1158" height="1162" class="img_ev3q"></p>
<p>With just that, you have a ready-to-use login route backed by Supabase.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="full-docs-supabase-plugin-documentation">Full docs: <a href="https://lihil.cc/docs/advance/plugin/supabase" target="_blank" rel="noopener noreferrer">Supabase Plugin Documentation</a><a href="https://lihil.cc/ja/blog/lihil-auth#full-docs-supabase-plugin-documentation" class="hash-link" aria-label="full-docs-supabase-plugin-documentation への直接リンク" title="full-docs-supabase-plugin-documentation への直接リンク">​</a></h4>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="want-to-use-your-own-database">Want to use Your Own Database?<a href="https://lihil.cc/ja/blog/lihil-auth#want-to-use-your-own-database" class="hash-link" aria-label="Want to use Your Own Database? への直接リンク" title="Want to use Your Own Database? への直接リンク">​</a></h3>
<p>No problem. The JWT plugin lets you manage users and passwords your own way, while lihil takes care of encoding/decoding JWTs and injecting them as typed objects.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="basic-jwt-authentication-example">Basic JWT Authentication Example<a href="https://lihil.cc/ja/blog/lihil-auth#basic-jwt-authentication-example" class="hash-link" aria-label="Basic JWT Authentication Example への直接リンク" title="Basic JWT Authentication Example への直接リンク">​</a></h4>
<p>You might want to include public user profile information in your JWT, such as user ID and role.
so that you don't have to query the database for every request.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token keyword" style="color:#81A1C1">from</span><span class="token plain"> lihil </span><span class="token keyword" style="color:#81A1C1">import</span><span class="token plain"> Payload</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> Route</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">from</span><span class="token plain"> lihil</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">plugins</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">auth</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">jwt </span><span class="token keyword" style="color:#81A1C1">import</span><span class="token plain"> JWTAuthParam</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> JWTAuthPlugin</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> JWTConfig</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">from</span><span class="token plain"> lihil</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">plugins</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">auth</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">oauth </span><span class="token keyword" style="color:#81A1C1">import</span><span class="token plain"> OAuth2PasswordFlow</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> OAuthLoginForm</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">me </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> Route</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token string" style="color:#A3BE8C">"/me"</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">token </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> Route</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token string" style="color:#A3BE8C">"/token"</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">jwt_auth_plugin </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> JWTAuthPlugin</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">jwt_secret</span><span class="token operator" style="color:#81A1C1">=</span><span class="token string" style="color:#A3BE8C">"mysecret"</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> jwt_algorithms</span><span class="token operator" style="color:#81A1C1">=</span><span class="token string" style="color:#A3BE8C">"HS256"</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">class</span><span class="token plain"> </span><span class="token class-name" style="color:#8FBCBB">UserProfile</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">Struct</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    user_id</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">str</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> field</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">name</span><span class="token operator" style="color:#81A1C1">=</span><span class="token string" style="color:#A3BE8C">"sub"</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    role</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> Literal</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token string" style="color:#A3BE8C">"admin"</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> </span><span class="token string" style="color:#A3BE8C">"user"</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> </span><span class="token string" style="color:#A3BE8C">"user"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token decorator annotation punctuation" style="color:#8FBCBB">@me</span><span class="token decorator annotation punctuation" style="color:#8FBCBB">.</span><span class="token decorator annotation punctuation" style="color:#8FBCBB">get</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">auth_scheme</span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain">OAuth2PasswordFlow</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">token_url</span><span class="token operator" style="color:#81A1C1">=</span><span class="token string" style="color:#A3BE8C">"token"</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> plugins</span><span class="token operator" style="color:#81A1C1">=</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token plain">jwt_auth_plugin</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">decode_plugin</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">async</span><span class="token plain"> </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">get_user</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">profile</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> Annotated</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token plain">UserProfile</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> JWTAuthParam</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">-</span><span class="token operator" style="color:#81A1C1">&gt;</span><span class="token plain"> User</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">assert</span><span class="token plain"> profile</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">role </span><span class="token operator" style="color:#81A1C1">==</span><span class="token plain"> </span><span class="token string" style="color:#A3BE8C">"user"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"> User</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">name</span><span class="token operator" style="color:#81A1C1">=</span><span class="token string" style="color:#A3BE8C">"user"</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> email</span><span class="token operator" style="color:#81A1C1">=</span><span class="token string" style="color:#A3BE8C">"user@email.com"</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token decorator annotation punctuation" style="color:#8FBCBB">@token</span><span class="token decorator annotation punctuation" style="color:#8FBCBB">.</span><span class="token decorator annotation punctuation" style="color:#8FBCBB">post</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">plugins</span><span class="token operator" style="color:#81A1C1">=</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token plain">jwt_auth_plugin</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">encode_plugin</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">expires_in_s</span><span class="token operator" style="color:#81A1C1">=</span><span class="token number" style="color:#81A1C1">3600</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">async</span><span class="token plain"> </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">login_get_token</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">credentials</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> OAuthLoginForm</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">-</span><span class="token operator" style="color:#81A1C1">&gt;</span><span class="token plain"> UserProfile</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"> UserProfile</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">user_id</span><span class="token operator" style="color:#81A1C1">=</span><span class="token string" style="color:#A3BE8C">"user123"</span><span class="token punctuation" style="color:#8FBCBB">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Here we define a <code>UserProfile</code> struct that includes the user ID and role, we then might use the <code>role</code> to determine access permissions in our application.</p>
<p>You might wonder if we can trust the <code>role</code> field in the JWT. The answer is yes, because the JWT is signed with a secret key, meaning that any information
encoded in the JWT is <code>read-only</code> and cannot be tampered with by the client. If the client tries to modify the JWT, the signature will no longer match, and the server will reject the token.</p>
<p>This also means that you should not include any sensitive information in the JWT, as it can be decoded by anyone who has access to the token.</p>
<p>We then use <code>jwt_auth_plugin.decode_plugin</code> to decode the JWT and inject the <code>UserProfile</code> into the request handler.
When you return <code>UserProfile</code> from <code>login_get_token</code>, it will automatically be serialized as a JSON Web Token.</p>
<p>By default, the JWT would be returned as oauth2 token response, but you can also return it as a simple string if you prefer.
You can change this behavior by setting <code>scheme_type</code> in <code>encode_plugin</code></p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token keyword" style="color:#81A1C1">class</span><span class="token plain"> </span><span class="token class-name" style="color:#8FBCBB">OAuth2Token</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">Base</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    access_token</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">str</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    expires_in</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">int</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    token_type</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> Literal</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token string" style="color:#A3BE8C">"Bearer"</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> </span><span class="token string" style="color:#A3BE8C">"Bearer"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    refresh_token</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> Unset</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token builtin" style="color:#8FBCBB">str</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> UNSET</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    scope</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> Unset</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token builtin" style="color:#8FBCBB">str</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> UNSET</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The client can receive the JWT and update its header for subsequent requests:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token plain">token_data </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> </span><span class="token keyword" style="color:#81A1C1">await</span><span class="token plain"> res</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">json</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">token_type</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> token </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> token_data</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token string" style="color:#A3BE8C">"token_type"</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> token_data</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token string" style="color:#A3BE8C">"access_token"</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">headers </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#8FBCBB">{</span><span class="token string" style="color:#A3BE8C">"Authorization"</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token string-interpolation string" style="color:#A3BE8C">f"</span><span class="token string-interpolation interpolation punctuation" style="color:#8FBCBB">{</span><span class="token string-interpolation interpolation">token_type</span><span class="token string-interpolation interpolation punctuation" style="color:#8FBCBB">.</span><span class="token string-interpolation interpolation">capitalize</span><span class="token string-interpolation interpolation punctuation" style="color:#8FBCBB">(</span><span class="token string-interpolation interpolation punctuation" style="color:#8FBCBB">)</span><span class="token string-interpolation interpolation punctuation" style="color:#8FBCBB">}</span><span class="token string-interpolation string" style="color:#A3BE8C"> </span><span class="token string-interpolation interpolation punctuation" style="color:#8FBCBB">{</span><span class="token string-interpolation interpolation">token</span><span class="token string-interpolation interpolation punctuation" style="color:#8FBCBB">}</span><span class="token string-interpolation string" style="color:#A3BE8C">"</span><span class="token punctuation" style="color:#8FBCBB">}</span><span class="token plain"> </span><span class="token comment" style="color:#4C566A;font-style:italic"># use this header for subsequent requests</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="role-based-authorization-example">Role-Based Authorization Example<a href="https://lihil.cc/ja/blog/lihil-auth#role-based-authorization-example" class="hash-link" aria-label="Role-Based Authorization Example への直接リンク" title="Role-Based Authorization Example への直接リンク">​</a></h4>
<p>You can utilize function dependencies to enforce role-based access control in your application.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">is_admin</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">profile</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> Annotated</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token plain">UserProfile</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> JWTAuthParam</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">-</span><span class="token operator" style="color:#81A1C1">&gt;</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">bool</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">if</span><span class="token plain"> profile</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">role </span><span class="token operator" style="color:#81A1C1">!=</span><span class="token plain"> </span><span class="token string" style="color:#A3BE8C">"admin"</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        </span><span class="token keyword" style="color:#81A1C1">raise</span><span class="token plain"> HTTPException</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">problem_status</span><span class="token operator" style="color:#81A1C1">=</span><span class="token number" style="color:#81A1C1">403</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> detail</span><span class="token operator" style="color:#81A1C1">=</span><span class="token string" style="color:#A3BE8C">"Forbidden: Admin access required"</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token decorator annotation punctuation" style="color:#8FBCBB">@me</span><span class="token decorator annotation punctuation" style="color:#8FBCBB">.</span><span class="token decorator annotation punctuation" style="color:#8FBCBB">get</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">auth_scheme</span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain">OAuth2PasswordFlow</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">token_url</span><span class="token operator" style="color:#81A1C1">=</span><span class="token string" style="color:#A3BE8C">"token"</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> plugins</span><span class="token operator" style="color:#81A1C1">=</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token plain">jwt_auth_plugin</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">decode_plugin</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">async</span><span class="token plain"> </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">get_admin_user</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">profile</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> Annotated</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token plain">UserProfile</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> JWTAuthParam</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> </span><span class="token keyword" style="color:#81A1C1">_</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> Annotated</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token builtin" style="color:#8FBCBB">bool</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> use</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">is_admin</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">-</span><span class="token operator" style="color:#81A1C1">&gt;</span><span class="token plain"> User</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"> User</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">name</span><span class="token operator" style="color:#81A1C1">=</span><span class="token string" style="color:#A3BE8C">"user"</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> email</span><span class="token operator" style="color:#81A1C1">=</span><span class="token string" style="color:#A3BE8C">"user@email.com"</span><span class="token punctuation" style="color:#8FBCBB">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Here, for the <code>get_admin_user</code> endpoint, we define a function dependency <code>is_admin</code> that checks if the user has an admin role. If the user does not have the required role, the request will fail with a 403 Forbidden Error .</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="returning-simple-string-tokens">Returning Simple String Tokens<a href="https://lihil.cc/ja/blog/lihil-auth#returning-simple-string-tokens" class="hash-link" aria-label="Returning Simple String Tokens への直接リンク" title="Returning Simple String Tokens への直接リンク">​</a></h4>
<p>In some cases, you might always want to query the database for user information, and you don't need to return a structured object like <code>UserProfile</code>. Instead, you can return a simple string value that will be encoded as a JWT.</p>
<p>If so, you can simply return a string from the <code>login_get_token</code> endpoint, and it will be encoded as a JWT automatically:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token decorator annotation punctuation" style="color:#8FBCBB">@token</span><span class="token decorator annotation punctuation" style="color:#8FBCBB">.</span><span class="token decorator annotation punctuation" style="color:#8FBCBB">post</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">plugins</span><span class="token operator" style="color:#81A1C1">=</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token plain">jwt_auth_plugin</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">encode_plugin</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">expires_in_s</span><span class="token operator" style="color:#81A1C1">=</span><span class="token number" style="color:#81A1C1">3600</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">async</span><span class="token plain"> </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">login_get_token</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">credentials</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> OAuthLoginForm</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">-</span><span class="token operator" style="color:#81A1C1">&gt;</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">str</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"> </span><span class="token string" style="color:#A3BE8C">"user123"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="full-docs-jwt-plugin-documentation">Full docs: <a href="https://lihil.cc/docs/advance/plugin/jwt" target="_blank" rel="noopener noreferrer">JWT Plugin Documentation</a><a href="https://lihil.cc/ja/blog/lihil-auth#full-docs-jwt-plugin-documentation" class="hash-link" aria-label="full-docs-jwt-plugin-documentation への直接リンク" title="full-docs-jwt-plugin-documentation への直接リンク">​</a></h4>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="installation">Installation<a href="https://lihil.cc/ja/blog/lihil-auth#installation" class="hash-link" aria-label="Installation への直接リンク" title="Installation への直接リンク">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="to-use-jwt-only">To use jwt only<a href="https://lihil.cc/ja/blog/lihil-auth#to-use-jwt-only" class="hash-link" aria-label="To use jwt only への直接リンク" title="To use jwt only への直接リンク">​</a></h3>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token plain">pip install "lihil[standard]"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="to-use-both-jwt-and-supabase">To use both jwt and supabase<a href="https://lihil.cc/ja/blog/lihil-auth#to-use-both-jwt-and-supabase" class="hash-link" aria-label="To use both jwt and supabase への直接リンク" title="To use both jwt and supabase への直接リンク">​</a></h3>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token plain">pip install "lihil[standard,supabase]"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<hr>
<p>Github: <a href="https://github.com/raceychan/lihil" target="_blank" rel="noopener noreferrer">lihil</a></p>
<p>Official Docs: <a href="https://lihil.cc/" target="_blank" rel="noopener noreferrer">lihil.cc</a></p>]]></content:encoded>
            <category>web development</category>
            <category>authentication</category>
        </item>
        <item>
            <title><![CDATA[What to Do When HTTP Status Codes Don’t Fit Your Business Error]]></title>
            <link>https://lihil.cc/ja/blog/what-to-do-when-http-status-codes-dont-fit-your-business-error</link>
            <guid>https://lihil.cc/ja/blog/what-to-do-when-http-status-codes-dont-fit-your-business-error</guid>
            <pubDate>Sun, 27 Apr 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[404mail]]></description>
            <content:encoded><![CDATA[<p><img decoding="async" loading="lazy" alt="404_mail" src="https://lihil.cc/ja/assets/images/404_mail-5b5df967f6e8f1b1139713c9ab4012d3.jpg" width="1024" height="683" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="question">Question:<a href="https://lihil.cc/ja/blog/what-to-do-when-http-status-codes-dont-fit-your-business-error#question" class="hash-link" aria-label="Question: への直接リンク" title="Question: への直接リンク">​</a></h3>
<p><strong>How would you choose a status code for an order that could not be processed because the customer's shipping address is outside the delivery zone?</strong></p>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>Spoiler</summary><div><div class="collapsibleContent_i85q"><h3 class="anchor anchorWithStickyNavbar_LWe7" id="you-shouldnt-be-looking-for-a-specific-status-code-for-busineess-error">You shouldn't be looking for a specific status code for busineess error.<a href="https://lihil.cc/ja/blog/what-to-do-when-http-status-codes-dont-fit-your-business-error#you-shouldnt-be-looking-for-a-specific-status-code-for-busineess-error" class="hash-link" aria-label="You shouldn't be looking for a specific status code for busineess error. への直接リンク" title="You shouldn't be looking for a specific status code for busineess error. への直接リンク">​</a></h3><p>Instead, use a 4xx status code with a well-defined structural error response and provide detailed documentation of the error response format.</p></div></div></details>
<p>Whether you are struggling to find an appropiate http status code, or if you have a specific http status code to use, this blog is for you.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-http-status-code-and-why-you-should-care">What is http status code and why you should care<a href="https://lihil.cc/ja/blog/what-to-do-when-http-status-codes-dont-fit-your-business-error#what-is-http-status-code-and-why-you-should-care" class="hash-link" aria-label="What is http status code and why you should care への直接リンク" title="What is http status code and why you should care への直接リンク">​</a></h3>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="status-code-is-popular">Status code is popular<a href="https://lihil.cc/ja/blog/what-to-do-when-http-status-codes-dont-fit-your-business-error#status-code-is-popular" class="hash-link" aria-label="Status code is popular への直接リンク" title="Status code is popular への直接リンク">​</a></h4>
<p>Even if you are not a technical guy, it is very likley that you have heard these numbers <code>404</code>, <code>502</code>. This is because http status code is so popular that It is literally everywhere on the internet.</p>
<p>HTTP status codes have long been a cornerstone of web application error handling. Defined in RFC 7231, these codes serve as a standardized way for servers to communicate the outcome of a request to the client.
The standard defines several categories of status codes, such as <code>2xx</code> for success, <code>4xx</code> for client errors, and <code>5xx</code> for server errors.
Quote from <a href="https://datatracker.ietf.org/doc/html/rfc7231#section-8.2.2" target="_blank" rel="noopener noreferrer">RFC 7231</a>:</p>
<blockquote>
<p>HTTP clients are not required to
understand the meaning of all registered status codes, though such
understanding is obviously desirable. However, a client MUST
understand the class of any status code, as indicated by the first
digit, and treat an unrecognized status code as being equivalent to
the x00 status code of that class</p>
</blockquote>
<p>It has become an industrial consensus to check these status codes as a way to quickly determine whether a request was successful or failed. For example, many libraries and frameworks will raise an exception if a request results in an error status. Here's a simple example using Python's <code>requests</code> library:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token keyword" style="color:#81A1C1">import</span><span class="token plain"> requests</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">response </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> requests</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">get</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token string" style="color:#A3BE8C">"https://api.example.com/data"</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">response</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">raise_for_status</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token comment" style="color:#4C566A;font-style:italic"># this would raise exception when status code &gt; 400</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">print</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token string" style="color:#A3BE8C">"Data retrieved successfully!"</span><span class="token punctuation" style="color:#8FBCBB">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<blockquote>
<p>In this example, <code>raise_for_status()</code> automatically raises an <code>HTTPError</code> if the server returns a 4xx or 5xx status code. This is a common pattern in many applications to ensure that only successful requests are processed further.</p>
</blockquote>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="why-is-it-difficult-to-choose-a-status-code-for-your-bussiness-error">Why is it difficult to choose a status code for your bussiness error<a href="https://lihil.cc/ja/blog/what-to-do-when-http-status-codes-dont-fit-your-business-error#why-is-it-difficult-to-choose-a-status-code-for-your-bussiness-error" class="hash-link" aria-label="Why is it difficult to choose a status code for your bussiness error への直接リンク" title="Why is it difficult to choose a status code for your bussiness error への直接リンク">​</a></h3>
<p>It's common(but not necessarily correct) to use <code>4xx</code> codes like <code>400 Bad Request</code> or <code>403 Forbidden</code> when something goes wrong. For example, a "premium" user trying to access a feature available only to "pro" users might return a <code>403 Forbidden</code> status. In such cases, the error is clear, and the status code maps well to the scenario.</p>
<p>But as web applications grow in complexity and deal with more nuanced business rules, things get trickier. Consider a scenario where <strong>an order could not be processed because of a mismatch between the customer's shipping address and the delivery zone</strong>. How should this issue be represented in terms of HTTP status codes?</p>
<p>There isn't an easy or clear answer. While we could use <code>400 Bad Request</code>, it doesn't quite capture the specific business rule violation that's occurring. Similarly, a <code>409 Conflict</code> could work in some cases, but it still doesn’t feel precise enough. As the number of potential issues grows—whether they’re related to payment failures, address mismatches, or resource conflicts—the more apparent it becomes that HTTP status codes are not built to handle the full complexity of modern business logic.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="donts">Don'ts<a href="https://lihil.cc/ja/blog/what-to-do-when-http-status-codes-dont-fit-your-business-error#donts" class="hash-link" aria-label="Don'ts への直接リンク" title="Don'ts への直接リンク">​</a></h3>
<p>Currently, there are a few ways the industry deals with the problem of handling business logic errors in web applications. These solutions often involve workarounds or generalizations due to the limitations of HTTP status codes. Here are some of the common approaches:</p>
<ol>
<li><strong>Embedding Custom Status Inside Request Body</strong></li>
</ol>
<p>One approach is to always return a <code>200 OK</code> status code, even when the request fails, and include a custom status code in the response body. This method involves returning a business-specific error code along with additional details.</p>
<p><strong>Example</strong>:</p>
<div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token punctuation" style="color:#8FBCBB">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">  </span><span class="token property">"business_code"</span><span class="token operator" style="color:#81A1C1">:</span><span class="token plain"> </span><span class="token string" style="color:#A3BE8C">"CUSTOMIZED_BUSINESS_ERROR"</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">  </span><span class="token property">"detail"</span><span class="token operator" style="color:#81A1C1">:</span><span class="token plain"> </span><span class="token string" style="color:#A3BE8C">"The shipping address is outside the serviceable delivery zone."</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token punctuation" style="color:#8FBCBB">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>I have personally encountered this solution from my work a several times during my career. when the system contains only a few components, and with detailed documentation, it could work, but as the system grows and additional components (like proxies, API gateways, and logging systems) are added, this keeps creating new problems you wouldn't have to solve otherwise.</p>
<ol start="2">
<li>self-define 3-digits status code, for example, 6xx means some business rules, 700 means others, etc.</li>
</ol>
<p>Some solutions attempt to define their own set of status codes beyond the standard <code>2xx</code>, <code>4xx</code>, and <code>5xx</code> categories. For example, <code>6xx</code> might represent business rules, with specific codes for each scenario (e.g., <code>700</code> for some other business logic). While this avoids reading the request body to determine failure, it violates the HTTP standards, meaning many tools might throw errors or not support these codes.
<strong>Example</strong>:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token number" style="color:#81A1C1">600</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> CONNECTION ERROR </span><span class="token operator" style="color:#81A1C1">-</span><span class="token plain"> This indicates a general connection error</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token number" style="color:#81A1C1">601</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> INCOMPLETE ERROR </span><span class="token operator" style="color:#81A1C1">-</span><span class="token plain"> This indicates sever sends an incomplete page</span><span class="token operator" style="color:#81A1C1">/</span><span class="token builtin" style="color:#8FBCBB">object</span><span class="token plain"> </span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token keyword" style="color:#81A1C1">as</span><span class="token plain"> indicated by Content</span><span class="token operator" style="color:#81A1C1">-</span><span class="token plain">Length header</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token number" style="color:#81A1C1">701</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> ERROR TEXT FOUND </span><span class="token operator" style="color:#81A1C1">-</span><span class="token plain"> This code </span><span class="token keyword" style="color:#81A1C1">is</span><span class="token plain"> returned </span><span class="token keyword" style="color:#81A1C1">if</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">any</span><span class="token plain"> error text </span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">such </span><span class="token keyword" style="color:#81A1C1">as</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> </span><span class="token string" style="color:#A3BE8C">"Service Unavailable"</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> are found </span><span class="token keyword" style="color:#81A1C1">in</span><span class="token plain"> the main page </span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">frame HTML contents included</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain"> Note that the error text must be defined </span><span class="token keyword" style="color:#81A1C1">in</span><span class="token plain"> advance of the test</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain"> Error text means </span><span class="token keyword" style="color:#81A1C1">if</span><span class="token plain"> the text </span><span class="token keyword" style="color:#81A1C1">is</span><span class="token plain"> found</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> this session should be considered a failure</span><span class="token punctuation" style="color:#8FBCBB">.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>According to <a href="https://datatracker.ietf.org/doc/html/rfc7231#section-8.2.2" target="_blank" rel="noopener noreferrer">RFC 7231</a>,</p>
<blockquote>
<p>New status codes are required to fall under one of the categories
defined in <a href="https://datatracker.ietf.org/doc/html/rfc7231#section-6" target="_blank" rel="noopener noreferrer">Section 6</a>.</p>
</blockquote>
<p>status codes &gt;= 600 are invalid because they fall outside of the defined categories.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="dos">Dos<a href="https://lihil.cc/ja/blog/what-to-do-when-http-status-codes-dont-fit-your-business-error#dos" class="hash-link" aria-label="Dos への直接リンク" title="Dos への直接リンク">​</a></h4>
<ol>
<li><strong>A 4xx status code + Generic Error Message</strong></li>
</ol>
<div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token punctuation" style="color:#8FBCBB">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">  </span><span class="token property">"status"</span><span class="token operator" style="color:#81A1C1">:</span><span class="token plain"> </span><span class="token number" style="color:#81A1C1">400</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">  </span><span class="token property">"message"</span><span class="token operator" style="color:#81A1C1">:</span><span class="token plain"> </span><span class="token string" style="color:#A3BE8C">"Something went wrong"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token punctuation" style="color:#8FBCBB">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>A common fallback is to return a <code>4xx</code> status code (typically <code>400 Bad Request</code>) and include a generic error message such as "Something went wrong" in the response body. This approach hides the real cause of the business logic failure and lumps all client errors into one vague category. While this might suffice for small-scale applications or early prototypes, it quickly becomes inadequate as the complexity of business rules increases.</p>
<p>Some systems go a step further by returning a one-line reason phrase or a slightly extended message, but still fall short of conveying structured, actionable error details to clients.</p>
<ol start="2">
<li><strong>Using the Same Status Code for Multiple Business Logic Issues</strong></li>
</ol>
<div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token punctuation" style="color:#8FBCBB">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">  </span><span class="token property">"status"</span><span class="token operator" style="color:#81A1C1">:</span><span class="token plain"> </span><span class="token number" style="color:#81A1C1">400</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">  </span><span class="token property">"message"</span><span class="token operator" style="color:#81A1C1">:</span><span class="token plain"> </span><span class="token string" style="color:#A3BE8C">"Payment failed"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token punctuation" style="color:#8FBCBB">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token punctuation" style="color:#8FBCBB">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">  </span><span class="token property">"status"</span><span class="token operator" style="color:#81A1C1">:</span><span class="token plain"> </span><span class="token number" style="color:#81A1C1">400</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">  </span><span class="token property">"message"</span><span class="token operator" style="color:#81A1C1">:</span><span class="token plain"> </span><span class="token string" style="color:#A3BE8C">"Invalid shipping address"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token punctuation" style="color:#8FBCBB">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>As business logic errors grow in number and variety, some teams attempt to fit them into a limited set of existing status codes. For instance, both a payment failure due to insufficient funds and a mismatch in shipping address might be returned as <code>400 Bad Request</code>. While this approach simplifies server-side handling, it severely limits the clarity of error messages, making it hard for clients to distinguish between different types of business failures. This also places unnecessary burden on client-side developers to reverse-engineer the true nature of the error from vague responses.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="best-practice">Best Practice<a href="https://lihil.cc/ja/blog/what-to-do-when-http-status-codes-dont-fit-your-business-error#best-practice" class="hash-link" aria-label="Best Practice への直接リンク" title="Best Practice への直接リンク">​</a></h4>
<p><strong>Structured Error Message + Documentation (With Standards Compliance)</strong></p>
<p>A thoughtful approach to business rule violations is to return an appropriate <code>4xx</code> status code—ideally one that aligns semantically with the error (for example, <code>407 Proxy Authentication Required</code>, if applicable)—to indicate that the request was unsuccessful due to a business constraint.</p>
<p>In addition, the response body can include a <strong>structured error message</strong> based on <a href="https://datatracker.ietf.org/doc/html/rfc9457" target="_blank" rel="noopener noreferrer">RFC 9457 (Problem Details for HTTP APIs)</a>, which defines fields such as <code>type</code>, <code>title</code>, <code>status</code>, <code>detail</code>, and <code>instance</code>. This format encourages clarity and consistency, making it easier for both developers and automated systems to understand, handle, and trace errors.</p>
<p>Equally important is having each error type <strong>clearly documented</strong> so that client developers know what an error means and how to address it. Well-maintained documentation enables richer client experiences, reduces guesswork, and helps prevent issues before they arise.</p>
<p>Stripe does an excellent job in this area with their <a href="https://docs.stripe.com/error-codes" target="_blank" rel="noopener noreferrer">dedicated error code documentation</a>, which provides detailed explanations for a wide range of business-related errors. Their commitment to transparency and developer experience is evident and commendable.</p>
<p>That said, there are a couple of areas where further improvements could enhance the experience even more:</p>
<ul>
<li>Their structured error format, while clear, doesn’t explicitly follow RFC 9457, and omits fields like <code>instance</code> that can be valuable for debugging.</li>
<li>It’s not clear whether their documentation is automatically generated or manually maintained. If it’s the latter, this could introduce challenges in keeping it fully up to date with evolving APIs.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="how-lihil-solves-this-problem">How lihil solves this problem<a href="https://lihil.cc/ja/blog/what-to-do-when-http-status-codes-dont-fit-your-business-error#how-lihil-solves-this-problem" class="hash-link" aria-label="How lihil solves this problem への直接リンク" title="How lihil solves this problem への直接リンク">​</a></h3>
<p><strong>Structured Error Messages + Auto-Generated Documentation</strong></p>
<p><a href="https://lihil.cc/" target="_blank" rel="noopener noreferrer"><code>lihil</code></a> tackles the problem by making structured error handling first-class. You can declare rich, type-safe exceptions by subclassing <code>HTTPException[T]</code>, where <code>T</code> defines the structure of the error's <code>detail</code> field. These exceptions can then be directly attached to endpoints using the <code>errors=</code> parameter. This not only ensures consistent error responses but also enables <code>lihil</code> to automatically generate OpenAPI documentation for each declared error—including a link to a detailed problem page under the "External documentation" tab.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockTitle_Ktv7">How you define a structual exception in lihil</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token keyword" style="color:#81A1C1">from</span><span class="token plain"> lihil </span><span class="token keyword" style="color:#81A1C1">import</span><span class="token plain"> Empty</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> Lihil</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> Resp</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> Route</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> status</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> Meta</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">from</span><span class="token plain"> lihil</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">interface </span><span class="token keyword" style="color:#81A1C1">import</span><span class="token plain"> Base</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">from</span><span class="token plain"> lihil</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">problems </span><span class="token keyword" style="color:#81A1C1">import</span><span class="token plain"> HTTPException</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">class</span><span class="token plain"> </span><span class="token class-name" style="color:#8FBCBB">AddressOutOfScopeProblem</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">Base</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    current_address</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> Annotated</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token builtin" style="color:#8FBCBB">str</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> Meta</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">examples</span><span class="token operator" style="color:#81A1C1">=</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token string" style="color:#A3BE8C">"home"</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    service_radius</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> Annotated</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token builtin" style="color:#8FBCBB">float</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> Meta</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">examples</span><span class="token operator" style="color:#81A1C1">=</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token number" style="color:#81A1C1">3.5</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    distance</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> Annotated</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token builtin" style="color:#8FBCBB">float</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> Meta</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">examples</span><span class="token operator" style="color:#81A1C1">=</span><span class="token number" style="color:#81A1C1">4</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    message</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">str</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> </span><span class="token string" style="color:#A3BE8C">""</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">__post_init__</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        self</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">message </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> </span><span class="token string-interpolation string" style="color:#A3BE8C">f"Your current address </span><span class="token string-interpolation interpolation punctuation" style="color:#8FBCBB">{</span><span class="token string-interpolation interpolation">self</span><span class="token string-interpolation interpolation punctuation" style="color:#8FBCBB">.</span><span class="token string-interpolation interpolation">current_address</span><span class="token string-interpolation interpolation punctuation" style="color:#8FBCBB">}</span><span class="token string-interpolation string" style="color:#A3BE8C"> is </span><span class="token string-interpolation interpolation punctuation" style="color:#8FBCBB">{</span><span class="token string-interpolation interpolation">self</span><span class="token string-interpolation interpolation punctuation" style="color:#8FBCBB">.</span><span class="token string-interpolation interpolation">distance</span><span class="token string-interpolation interpolation punctuation" style="color:#8FBCBB">}</span><span class="token string-interpolation string" style="color:#A3BE8C"> miles away and our service radius is </span><span class="token string-interpolation interpolation punctuation" style="color:#8FBCBB">{</span><span class="token string-interpolation interpolation">self</span><span class="token string-interpolation interpolation punctuation" style="color:#8FBCBB">.</span><span class="token string-interpolation interpolation">service_radius</span><span class="token string-interpolation interpolation punctuation" style="color:#8FBCBB">}</span><span class="token string-interpolation string" style="color:#A3BE8C">"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">class</span><span class="token plain"> </span><span class="token class-name" style="color:#8FBCBB">InvalidOrderError</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">HTTPException</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token plain">AddressOutOfScopeProblem</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token string" style="color:#A3BE8C">"Address out of service zone"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    __status__ </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> </span><span class="token number" style="color:#81A1C1">422</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    instance</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> Annotated</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token builtin" style="color:#8FBCBB">str</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> Meta</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">examples</span><span class="token operator" style="color:#81A1C1">=</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token string" style="color:#A3BE8C">"2cd20e0c-9ddc-4fdc-8f61-b32f62ac784d"</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    detail</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> AddressOutOfScopeProblem</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">orders </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> Route</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token string" style="color:#A3BE8C">"orders"</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token decorator annotation punctuation" style="color:#8FBCBB">@orders</span><span class="token decorator annotation punctuation" style="color:#8FBCBB">.</span><span class="token decorator annotation punctuation" style="color:#8FBCBB">post</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">errors</span><span class="token operator" style="color:#81A1C1">=</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token plain">InvalidOrderError</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">async</span><span class="token plain"> </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">create_orders</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">-</span><span class="token operator" style="color:#81A1C1">&gt;</span><span class="token plain"> Annotated</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token plain">Empty</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> status</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">CREATED</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">lhl </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> Lihil</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">orders</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">if</span><span class="token plain"> __name__ </span><span class="token operator" style="color:#81A1C1">==</span><span class="token plain"> </span><span class="token string" style="color:#A3BE8C">"__main__"</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    lhl</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">run</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">__file__</span><span class="token punctuation" style="color:#8FBCBB">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Running the above code and it is automatically documented in your OpenAPI.</p>
<p><img decoding="async" loading="lazy" alt="Order error diagram" src="https://lihil.cc/ja/assets/images/order_error-c3d649e69ad39d6ffdcfb3d22e189958.png" width="1424" height="1217" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="what-makes-it-good">What makes it good.<a href="https://lihil.cc/ja/blog/what-to-do-when-http-status-codes-dont-fit-your-business-error#what-makes-it-good" class="hash-link" aria-label="What makes it good. への直接リンク" title="What makes it good. への直接リンク">​</a></h3>
<p>As you might see from the OpenAPI, each of these error response follows the <a href="https://datatracker.ietf.org/doc/html/rfc9457" target="_blank" rel="noopener noreferrer">RFC 9457</a> format, including fields like <code>type</code>, <code>title</code>, <code>status</code>, <code>detail</code>, and <code>instance</code>. You can customize how errors are rendered by registering handlers with <code>@problem_solver</code>, which maps specific exceptions or status codes to structured responses. Specific exception handlers take precedence over status-code-based ones, giving you fine-grained control.</p>
<p>By default, <code>lihil</code> also generates detailed responses for common issues such as missing parameters, returning structured 422 responses for <code>InvalidRequestErrors</code>—complete with field-level information. These responses are not only machine-readable but also fully documented out of the box.</p>
<p>Best of all, all this documentation is automatically synced with your code. There's no need to manually update or maintain a separate error code reference. <code>lihil</code> keeps your API behavior and documentation in perfect alignment.</p>]]></content:encoded>
            <category>web development</category>
        </item>
    </channel>
</rss>