"use strict";(self.webpackChunkblogs=self.webpackChunkblogs||[]).push([[5669],{5359:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>d,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"http/endpoint","title":"endpoint","description":"An endpoint is the most atomic ASGI component in lihil that defines how clients interact with the resource exposed by the Route.","source":"@site/docs/http/endpoint.md","sourceDirName":"http","slug":"/http/endpoint","permalink":"/docs/http/endpoint","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1.1,"frontMatter":{"sidebar_position":1.1,"title":"endpoint"},"sidebar":"tutorialSidebar","previous":{"title":"form","permalink":"/docs/http/request/from-data"},"next":{"title":"route","permalink":"/docs/http/route"}}');var t=r(74848),i=r(28453);const d={sidebar_position:1.1,title:"endpoint"},o="endpoint",a={},c=[{value:"Param Parsing",id:"param-parsing",level:3},{value:"Explicitly declare a Param",id:"explicitly-declare-a-param",level:3},{value:"Implicitly declare a Param",id:"implicitly-declare-a-param",level:4},{value:"Data validation",id:"data-validation",level:3},{value:"Constraints",id:"constraints",level:3},{value:"Return Marks",id:"return-marks",level:3},{value:"Response with status code",id:"response-with-status-code",level:4},{value:"Return Union",id:"return-union",level:4},{value:"Custom Encoder/Decoder",id:"custom-encoderdecoder",level:4},{value:"Properties",id:"properties",level:3},{value:"Override endpoint properties",id:"override-endpoint-properties",level:3},{value:"Provide a properties for every endpoint in the route:",id:"provide-a-properties-for-every-endpoint-in-the-route",level:3}];function l(e){const n={a:"a",code:"code",h1:"h1",h3:"h3",h4:"h4",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"endpoint",children:"endpoint"})}),"\n",(0,t.jsxs)(n.p,{children:["An ",(0,t.jsx)(n.code,{children:"endpoint"})," is the most atomic ASGI component in ",(0,t.jsx)(n.code,{children:"lihil"})," that defines how clients interact with the resource exposed by the ",(0,t.jsx)(n.code,{children:"Route"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"param-parsing",children:"Param Parsing"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from lihil import Route\nfrom ididi import NodeConfig\nfrom typing import Annotated, NewType\nfrom sqlalchemy.ext.asyncio import AsyncConnection, AsyncEngine\n\n\nasync def get_conn(engine: AsyncEngine) -> AsyncConnection:\n    async with engine.begin() as conn:\n        yield conn\n\nUserID = NewType("UserID", str)\n\ndef user_id_factory() -> UserID:\n    return UserID(str(uuid4()))\n\nuser_route = Route("/users", deps=[get_conn, (user_id_factory, NodeConfig(reuse=False))])\n\n@user_route.post\nasync def create_user(\n    user: UserData, user_id: UserID, conn: AsyncConnection\n) -> Annotated[UserDB, stauts.Created]:\n\n    sql = user_sql(user=user, id_=user_id)\n    await conn.execute(sql)\n    return UserDB.from_user(user, id=user_id)\n'})}),"\n",(0,t.jsx)(n.p,{children:"Here,"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"user_id"})," will be created by ",(0,t.jsx)(n.code,{children:"user_id_factory"})," and return a uuid in str."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"conn"})," will be created by ",(0,t.jsx)(n.code,{children:"get_conn"})," and return an instance of ",(0,t.jsx)(n.code,{children:"AsyncConnection"}),", where the the connection will be returned to engine after request."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"UserDB"})," will be json-serialized, and return a response with content-type being ",(0,t.jsx)(n.code,{children:"application/json"}),", status code being ",(0,t.jsx)(n.code,{children:"201"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"explicitly-declare-a-param",children:"Explicitly declare a Param"}),"\n",(0,t.jsxs)(n.p,{children:["Explicitly declaring a parameter with ",(0,t.jsx)(n.code,{children:"Param"})," tells Lihil to treat it as-is, without further analysis."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'async def login(cred: Annotated[str, Param("header", alias="User-Credentials")], x_access_token: Annotated[str, Param("header")]) : ...\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Here param ",(0,t.jsx)(n.code,{children:"cred"})," expects a header with key ",(0,t.jsx)(n.code,{children:"User-Credentials"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["If key not provided, The kebab case of param name is used, for example, here ",(0,t.jsx)(n.code,{children:"x_access_token"})," expects a header with key ",(0,t.jsx)(n.code,{children:"x-access-token"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"implicitly-declare-a-param",children:"Implicitly declare a Param"}),"\n",(0,t.jsx)(n.p,{children:"If a param is not declared with any param mark, the following rule would apply to parse it:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"If the param name appears in route path, it is interpreted as a path param."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["If the param type is a subclass of ",(0,t.jsx)(n.code,{children:"msgspec.Struct"}),", it is interpreted as a body param."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"If the param type is registered in the route graph, or is a lihil-primitive type, it will be interpered as a dependency and will be resolved by lihil"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Otherise, it is interpreted as a query param."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.mermaid,{value:"flowchart TD\n    A[Param without param mark] --\x3e B[Is param name in route path?]\n    B -- Yes --\x3e P[Interpret as Path param]\n    B -- No --\x3e C[Is type a subclass of Struct?]\n    C -- Yes --\x3e R[Interpret as Body param]\n    C -- No --\x3e D[Is type registered in route graph or lihil-primitive type?]\n    D -- Yes --\x3e S[Interpret as Dependency]\n    D -- No --\x3e Q[Interpret as Query param]"}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from typing import Annotated\nfrom lihil import Route, Payload\n\nuser_route = Route("/users/{user_id}", deps=[Cache, Engine])\n\nclass UserUpdate(Payload): ...\nclass Engine: ...\nclass Cache: ...\n\n\n@user_route.put\nasync def update_user(user_id: str, engine: Engine, cache: Cache):\n    return "ok"\n'})}),"\n",(0,t.jsx)(n.p,{children:"In this example:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"user_id"})," appears in the route path, so it is a path param"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"engine"})," is annotated with the ",(0,t.jsx)(n.code,{children:"Use"})," mark, so it is a dependency"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"cache"})," is registered in the user_route, so it is also a dependency"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Only ",(0,t.jsx)(n.code,{children:"user_id"})," needs to be provided by the client request, rest will be resolved by lihil."]}),"\n",(0,t.jsxs)(n.p,{children:["Since return param is not declared, ",(0,t.jsx)(n.code,{children:'"ok"'})," will be serialized as json ",(0,t.jsx)(n.code,{children:"'\"ok\"'"}),", status code will be ",(0,t.jsx)(n.code,{children:"200"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"data-validation",children:"Data validation"}),"\n",(0,t.jsx)(n.p,{children:"lihil provide you data validation functionalities out of the box using msgspec."}),"\n",(0,t.jsx)(n.h3,{id:"constraints",children:"Constraints"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["You might combine ",(0,t.jsx)(n.code,{children:"typing.Annotated"})," and ",(0,t.jsx)(n.code,{children:"Param"})," to put constraints on params,"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from lihil import Param\nall_users = Route("/users")\n\n@all_users.get\nasync def get_users(numers: Annotated[int, Param(gt=0)]):\n    ...\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Here ",(0,t.jsx)(n.code,{children:"get_user"})," expects a query param ",(0,t.jsx)(n.code,{children:"numers"}),", an integer with value greater than ",(0,t.jsx)(n.code,{children:"0"}),"."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Constraints with structual data"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from typing import Annotated\n\nfrom lihil import Payload, Param\n\nUnixName = Annotated[\n    str, Param(min_length=1, max_length=32, pattern="^[a-z_][a-z0-9_-]*$")\n]\n\nclass User(Payload):\n    name: UnixName\n    groups: Annotated[set[UnixName], Param(max_length=16)] = set()\n    cpu_limit: Annotated[float, Param(ge=0.1, le=8)] = 1\n    mem_limit: Annotated[int, Param(ge=256, le=8192)] = 1024\n\n@all_users.post\nasync def create_user(user: User): ...\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Here ",(0,t.jsx)(n.code,{children:"create_user"})," expects a body param ",(0,t.jsx)(n.code,{children:"user"}),", a structual data where each field has constraints."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Constraints with supported types"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Checkout ",(0,t.jsx)(n.a,{href:"https://jcristharif.com/msgspec/constraints.html",children:"msgspec constraints"})," for more details on specific constraints that you can set on different types."]}),"\n",(0,t.jsx)(n.h3,{id:"return-marks",children:"Return Marks"}),"\n",(0,t.jsxs)(n.p,{children:["Often you would like to change the status code, or content type of your endpoint, to do so, you can use one or a combination of several ",(0,t.jsx)(n.code,{children:"return marks"}),". for example, to change stauts code:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from lihil import Annotated, status\n\nasync def create_user(user: UserData, engine: Engine) -> Annotated[UserDB, status.Created]:\n    ...\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Now ",(0,t.jsx)(n.code,{children:"create_user"})," would return a status code ",(0,t.jsx)(n.code,{children:"201"}),", instead of the default ",(0,t.jsx)(n.code,{children:"200"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"There are several return marks you might want to use:"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Return Mark"}),(0,t.jsx)(n.th,{children:"Purpose"}),(0,t.jsx)(n.th,{children:"Type Argument(s)"}),(0,t.jsx)(n.th,{children:"Notes"}),(0,t.jsx)(n.th,{children:"Example"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Json[T]"})}),(0,t.jsxs)(n.td,{children:["Response with ",(0,t.jsx)(n.code,{children:"application/json"})," content type"]}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"T"}),": response body type"]}),(0,t.jsx)(n.td,{children:"Default return type if not specified"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Json[list[int]]"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Stream[T]"})}),(0,t.jsxs)(n.td,{children:["Server-sent events with ",(0,t.jsx)(n.code,{children:"text/event-stream"})," content type"]}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"T"}),": event data type"]}),(0,t.jsx)(n.td,{children:"For event streaming"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Stream[str]"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Text"})}),(0,t.jsxs)(n.td,{children:["Plain text response with ",(0,t.jsx)(n.code,{children:"text/plain"})," content type"]}),(0,t.jsx)(n.td,{children:"None"}),(0,t.jsx)(n.td,{children:"Use for simple text responses"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Text"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"HTML"})}),(0,t.jsxs)(n.td,{children:["HTML response with ",(0,t.jsx)(n.code,{children:"text/html"})," content type"]}),(0,t.jsx)(n.td,{children:"None"}),(0,t.jsx)(n.td,{children:"Use for HTML content"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"HTML"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Empty"})}),(0,t.jsx)(n.td,{children:"Empty response (no body)"}),(0,t.jsx)(n.td,{children:"None"}),(0,t.jsx)(n.td,{children:"Indicates no content to return"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Empty"})})]})]})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from lihil import Json\n\nasync def demo() -> Json[list[int]]: ...\n"})}),"\n",(0,t.jsxs)(n.p,{children:["return marks have no runtime/typing effect outside of lihil, your type checker would treat ",(0,t.jsx)(n.code,{children:"Json[T]"})," as ",(0,t.jsx)(n.code,{children:"T"}),"."]}),"\n",(0,t.jsx)(n.h4,{id:"response-with-status-code",children:"Response with status code"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Annotated[T, status.OK]"})," for response with status code ",(0,t.jsx)(n.code,{children:"200"}),". where ",(0,t.jsx)(n.code,{children:"T"})," can be anything json serializable, or another return mark."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["For instance, in the ",(0,t.jsx)(n.code,{children:"create_user"})," example, we use ",(0,t.jsx)(n.code,{children:"Annotated[UserDB, status.Created]"})," to declare our return type, here ",(0,t.jsx)(n.code,{children:"T"})," is ",(0,t.jsx)(n.code,{children:"UserDB"}),"."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["By default, the return convert is json-serialized, so that it is equiavlent to ",(0,t.jsx)(n.code,{children:"Annotated[Json[UserDB], status.Created]"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["If you would like to return a response with content type ",(0,t.jsx)(n.code,{children:"text/html"}),", you might use ",(0,t.jsx)(n.code,{children:"HTML"})]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'async def hello() -> HTML:\n    return "<p>hello, world!</p>"\n'})}),"\n",(0,t.jsx)(n.h4,{id:"return-union",children:"Return Union"}),"\n",(0,t.jsxs)(n.p,{children:["it is valid to return union of multiple types, they will be shown as ",(0,t.jsx)(n.code,{children:"anyOf"})," schemas in the open api specification."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"async def create_user() -> User | TemporaryUser: ...\n"})}),"\n",(0,t.jsx)(n.h4,{id:"custom-encoderdecoder",children:"Custom Encoder/Decoder"}),"\n",(0,t.jsx)(n.p,{children:"You can also use your own customized encoder/decoder for request params and function return."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'def encoder_user_id(user_id: UUID) -> bytes:\n    return str(user_id)\n\ndef decoder_user_id(user_id: str) -> UUID:\n    return UUID(user_id)\n\nuser_route = Route("/users/{user_id}")\n\n@user_route(encoder=encode_user_id)\nasync def get_user(\n    user_id: Annotated[UUID, Param(decoder=decode_user_id)]\n) -> str:\n    return user_id\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def decoder[T](param: str | bytes) -> T: ...\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"decoder"})," should expect a single param with type either ",(0,t.jsx)(n.code,{children:"str"}),", for non-body param, or ",(0,t.jsx)(n.code,{children:"bytes"}),", for body param, and returns required param type, in the ",(0,t.jsx)(n.code,{children:"decode_user_id"})," case, it is ",(0,t.jsx)(n.code,{children:"str"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def encoder[T](param: T) -> bytes: ...\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"encoder"})," should expect a single param with any type that the endpoint function returns, in the ",(0,t.jsx)(n.code,{children:"encode_user_id"})," case, it is ",(0,t.jsx)(n.code,{children:"str"}),", and returns bytes."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"properties",children:"Properties"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Endpoint can have these properties:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:'title="lihil.routing"',children:'\nclass IEndpointProps(TypedDict, total=False):\n    errors: Sequence[type[DetailBase[Any]]] | type[DetailBase[Any]]\n    "Errors that might be raised from the current `endpoint`. These will be treated as responses and displayed in OpenAPI documentation."\n    in_schema: bool\n    "Whether to include this endpoint inside openapi docs, default to True"\n    to_thread: bool\n    "Whether this endpoint should be run wihtin a separate thread, only apply to sync function"\n    scoped: Literal[True] | None\n    "Whether current endpoint should be scoped, default to None"\n    auth_scheme: AuthBase | None\n    "Auth Scheme for access control, default to None"\n    tags: Sequence[str] | None\n    "OAS tag, endpoints with the same tag will be grouped together, default to route tag"\n    plugins: list[IPlugin]\n    "Decorators to decorate the endpoint function"\n    deps: list[DepNode] | None\n    "Dependencies that might be used in "\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"scoped"}),": if an endpoint requires any dependency that is an async context manager, or its factory returns an async generator, the endpoint would be scoped, and setting scoped to None won't change that, however, for an endpoint that is not scoped, setting ",(0,t.jsx)(n.code,{children:"scoped=True"})," would make it scoped."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"override-endpoint-properties",children:"Override endpoint properties"}),"\n",(0,t.jsx)(n.p,{children:"You can alter endpoint properties by changing them in route decorator."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"@router.get(errors=[UserNotFoundError, UserInactiveError])\nasync get_user(user_id: str): ...\n"})}),"\n",(0,t.jsx)(n.h3,{id:"provide-a-properties-for-every-endpoint-in-the-route",children:"Provide a properties for every endpoint in the route:"}),"\n",(0,t.jsx)(n.p,{children:"You might provide default properties when intialize a route,"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from lihil.routing import Route, EndpointProps\n\ndefault_props = EndpointProps(errors=[UserNotFoundError, UserInactiveError])\nprop_route = Route(props=default_props)\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Here ",(0,t.jsx)(n.code,{children:"default_props"})," would be applied to every endpoint added to ",(0,t.jsx)(n.code,{children:"prop_route"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["endpoint properties provided via route decorator like ",(0,t.jsx)(n.code,{children:"route.get"})," would override roperties provided by route."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>d,x:()=>o});var s=r(96540);const t={},i=s.createContext(t);function d(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);