"use strict";(self.webpackChunkblogs=self.webpackChunkblogs||[]).push([[429],{4277:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>h,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"http/request/path","title":"Path","description":"In an HTTP request, the URL path plays a central role in routing. It\'s how the server knows what resource the client is trying to access. But paths aren\'t just static\u2014they often carry dynamic values known as path parameters.","source":"@site/docs/http/request/path.md","sourceDirName":"http/request","slug":"/http/request/path-parameter","permalink":"/docs/http/request/path-parameter","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"Path","slug":"path-parameter"},"sidebar":"tutorialSidebar","previous":{"title":"Request","permalink":"/docs/http/request/"},"next":{"title":"Query","permalink":"/docs/http/request/query-parameter"}}');var s=r(4848),n=r(8453);const i={sidebar_position:1,title:"Path",slug:"path-parameter"},h="Path Parameters",o={},l=[{value:"What Are Path Parameters?",id:"what-are-path-parameters",level:2},{value:"Path Parameters in lihil",id:"path-parameters-in-lihil",level:2},{value:"Path vs Other Parameters",id:"path-vs-other-parameters",level:2}];function c(e){const t={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"path-parameters",children:"Path Parameters"})}),"\n",(0,s.jsxs)(t.p,{children:["In an HTTP request, the URL path plays a central role in routing. It's how the server knows ",(0,s.jsx)(t.em,{children:"what resource"})," the client is trying to access. But paths aren't just static\u2014they often carry dynamic values known as ",(0,s.jsx)(t.strong,{children:"path parameters"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"what-are-path-parameters",children:"What Are Path Parameters?"}),"\n",(0,s.jsx)(t.p,{children:"A path parameter is a variable part of the URL path. It\u2019s typically used to identify a specific resource. For example:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-http",children:"GET /users/42 HTTP/1.1\nHost: example.com\n"})}),"\n",(0,s.jsx)(t.p,{children:"In this example, /users/42 is requesting the user whose ID is 42. The 42 is a path parameter\u2014data embedded directly in the URL structure."}),"\n",(0,s.jsx)(t.p,{children:"embedded directly in the URL structure."}),"\n",(0,s.jsx)(t.h2,{id:"path-parameters-in-lihil",children:"Path Parameters in lihil"}),"\n",(0,s.jsx)(t.p,{children:"In lihil, path parameters are first-class citizens. You declare them directly in your route definition, and lihil automatically extracts them from the URL and passes them into your endpoint as regular Python arguments."}),"\n",(0,s.jsx)(t.p,{children:"For example:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'from lihil import Route\n\nuser = Route("/users/{user_id}")\n\n@user.get\nasync def get_user(user_id: int) -> User:\n    ...\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Here, ",(0,s.jsx)(t.code,{children:"user_id"})," is a path parameter. When a request like ",(0,s.jsx)(t.code,{children:"GET /users/42"})," comes in, lihil parses the URL, converts 42 to an integer (based on the type hint), and passes it to your function."]}),"\n",(0,s.jsx)(t.p,{children:"You don\u2019t need to write any parsing logic. You don\u2019t even need to look at the IRequest object directly. lihil handles everything from extracting the value to performing type conversion."}),"\n",(0,s.jsx)(t.h2,{id:"path-vs-other-parameters",children:"Path vs Other Parameters"}),"\n",(0,s.jsx)(t.p,{children:"Path parameters are one-dimensional: they carry a single, fixed value\u2014like an ID, slug, or name. They are perfect for identifying a specific resource."}),"\n",(0,s.jsx)(t.p,{children:"Compare this with:"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"Query"})," parameters, which can represent filters, pagination, or lists of values."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"Headers"}),", which usually carry metadata or control instructions."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"Request body"}),", which holds structured data like JSON or form submissions."]}),"\n",(0,s.jsx)(t.p,{children:"Each of these has its place, and lihil supports them all\u2014but path parameters are the most direct and visible part of the URL."}),"\n",(0,s.jsx)(t.p,{children:"In the next post, we'll explore query parameters and headers\u2014how they appear in requests, what they're used for, and how lihil helps you declare and validate them cleanly."})]})}function p(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>i,x:()=>h});var a=r(6540);const s={},n=a.createContext(s);function i(e){const t=a.useContext(n);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function h(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(n.Provider,{value:t},e.children)}}}]);