"use strict";(self.webpackChunkblogs=self.webpackChunkblogs||[]).push([[2585],{28453:(e,a,r)=>{r.d(a,{R:()=>s,x:()=>l});var t=r(96540);const n={},i=t.createContext(n);function s(e){const a=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function l(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:s(e.components),t.createElement(i.Provider,{value:a},e.children)}},73937:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"http/request/query","title":"query","description":"Query parameters are a flexible way to pass data to your server through the URL\u2014especially for things like filters, pagination, or optional inputs. They appear after a ? in the URL and are made up of key-value pairs.","source":"@site/docs/http/request/query.md","sourceDirName":"http/request","slug":"/http/request/query-parameter","permalink":"/docs/http/request/query-parameter","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"query","slug":"query-parameter"},"sidebar":"tutorialSidebar","previous":{"title":"path","permalink":"/docs/http/request/path-parameter"},"next":{"title":"header","permalink":"/docs/http/request/header-parameter"}}');var n=r(74848),i=r(28453);const s={sidebar_position:2,title:"query",slug:"query-parameter"},l="Query Parameters",o={},d=[{value:"What Do Query Parameters Look Like?",id:"what-do-query-parameters-look-like",level:2},{value:"Query Parameters in lihil",id:"query-parameters-in-lihil",level:2},{value:"Array-like Query Parameters",id:"array-like-query-parameters",level:2},{value:"Data Validation",id:"data-validation",level:2},{value:"Custom Validation",id:"custom-validation",level:2}];function c(e){const a={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(a.header,{children:(0,n.jsx)(a.h1,{id:"query-parameters",children:"Query Parameters"})}),"\n",(0,n.jsxs)(a.p,{children:["Query parameters are a flexible way to pass data to your server through the URL\u2014especially for things like filters, pagination, or optional inputs. They appear after a ",(0,n.jsx)(a.code,{children:"?"})," in the URL and are made up of key-value pairs."]}),"\n",(0,n.jsx)(a.h2,{id:"what-do-query-parameters-look-like",children:"What Do Query Parameters Look Like?"}),"\n",(0,n.jsx)(a.p,{children:"Here\u2019s a simple request with query parameters:"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-http",children:"GET /articles?keyword=book&page=2 HTTP/1.1\nHost: example.com\n"})}),"\n",(0,n.jsx)(a.p,{children:"In this case:"}),"\n",(0,n.jsxs)(a.ul,{children:["\n",(0,n.jsxs)(a.li,{children:[(0,n.jsx)(a.code,{children:"keyword"})," is a query parameter with the value ",(0,n.jsx)(a.code,{children:"book"}),"."]}),"\n",(0,n.jsxs)(a.li,{children:[(0,n.jsx)(a.code,{children:"page"})," is another query parameter with the value ",(0,n.jsx)(a.code,{children:"2"}),"."]}),"\n"]}),"\n",(0,n.jsxs)(a.p,{children:["Multiple parameters are joined using ",(0,n.jsx)(a.code,{children:"&"}),". All values are strings in the raw request, though they can often be interpreted as numbers, booleans, lists, etc."]}),"\n",(0,n.jsx)(a.h2,{id:"query-parameters-in-lihil",children:"Query Parameters in lihil"}),"\n",(0,n.jsx)(a.p,{children:"In lihil, you don\u2019t need to manually extract or convert query parameters from the URL. You simply declare them as arguments to your endpoint, and lihil handles the rest\u2014including parsing and type conversion."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-python",children:'\nfrom lihil import Route\n\narticles = Route("/articles")\n\n@articles.get\nasync def search(keyword: str, page: int = 1):\n    ...\n'})}),"\n",(0,n.jsxs)(a.p,{children:["If a request comes in as ",(0,n.jsx)(a.code,{children:"/articles?keyword=book&page=2"}),", lihil will automatically:"]}),"\n",(0,n.jsxs)(a.ul,{children:["\n",(0,n.jsxs)(a.li,{children:["\n",(0,n.jsx)(a.p,{children:"extract keyword and page from the query string,"}),"\n"]}),"\n",(0,n.jsxs)(a.li,{children:["\n",(0,n.jsx)(a.p,{children:"convert page to an integer (based on the type hint),"}),"\n"]}),"\n",(0,n.jsxs)(a.li,{children:["\n",(0,n.jsx)(a.p,{children:"pass both values to your function."}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(a.p,{children:"If page is not provided, the default value 1 will be used."}),"\n",(0,n.jsxs)(a.p,{children:["If a query parameter without default value is missing or has an invalid type that can't be coerced, lihil will respond with an ",(0,n.jsx)(a.code,{children:"InvalidRequest"})," error automatically."]}),"\n",(0,n.jsx)(a.h2,{id:"array-like-query-parameters",children:"Array-like Query Parameters"}),"\n",(0,n.jsx)(a.p,{children:"Unlike path parameters, query parameters can behave like two-dimensional data. That means you can have multiple values for the same key\u2014perfect for arrays or repeated options:"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-http",children:"GET /filter?tag=python&tag=web&tag=backend HTTP/1.1\n"})}),"\n",(0,n.jsx)(a.p,{children:"In lihil, you can declare this with a list type:"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-python",children:'from lihil import Route\n\n@Route("/filter")\nasync def filter_by_tags(tag: list[str]):\n    ...\n'})}),"\n",(0,n.jsx)(a.p,{children:"lihil will collect all tag values and give them to you as a list."}),"\n",(0,n.jsxs)(a.p,{children:["For ",(0,n.jsx)(a.code,{children:"/filter?tag=web&tag=python"}),", you'll receive ",(0,n.jsx)(a.code,{children:'["web", "python", "backend"]'})," as the value of tag."]}),"\n",(0,n.jsx)(a.h2,{id:"data-validation",children:"Data Validation"}),"\n",(0,n.jsx)(a.p,{children:"For array-style query parameters, lihil.Param allows you to enforce constraints like max length or item validation."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-python",children:'\nfrom lihil import Param\n\nTags = Param(max_length=5)\n\n@route("/articles")\nasync def search_articles(tags: list[str] = Tags) -> JSONResponse:\n    ...\n'})}),"\n",(0,n.jsx)(a.p,{children:"In this case, if a request includes more than 5 tags, lihil will reject it with a 422 error."}),"\n",(0,n.jsx)(a.p,{children:"You can also validate scalar query parameters the same way\u2014for example, to enforce range limits or regex rules."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-python",children:'\nPage = Param(ge=1)\n\n@route("/articles")\nasync def list_articles(page: int = Page) -> JSONResponse:\n    ...\n'})}),"\n",(0,n.jsx)(a.h2,{id:"custom-validation",children:"Custom Validation"}),"\n",(0,n.jsx)(a.p,{children:"Need more control? You can define a custom decoder for advanced validation logic. This works for both single and list-based query parameters."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-python",children:'\nfrom lihil import Param, HTTPException\n\nclass BlockedTag(HTTPException[str]):\n    "This tag is not allowed"\n\ndef tag_decoder(value: str) -> str:\n    if value in {"banned", "spam"}:\n        raise BlockedTag(f"Tag \'{value}\' is blocked")\n    return value\n\n@route("/filter")\nasync def filter_tags(tags: list[str] = Param(decoder=tag_decoder)) -> JSONResponse:\n    ...\n'})}),"\n",(0,n.jsxs)(a.p,{children:["In this example, if a user tries to filter with a blocked tag like ",(0,n.jsx)(a.code,{children:'"banned"'})," or ",(0,n.jsx)(a.code,{children:'"spam"'}),", lihil will raise a ",(0,n.jsx)(a.code,{children:"BlockedTag"})," error. The request will be rejected with a 422 error, and the message will indicate which tag was blocked."]}),"\n",(0,n.jsx)(a.p,{children:"Query parameters are not just key-value strings\u2014they're a flexible and powerful part of request handling. With lihil, you get type conversion, validation, and structure with minimal effort."})]})}function h(e={}){const{wrapper:a}={...(0,i.R)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}}}]);