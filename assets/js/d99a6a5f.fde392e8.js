"use strict";(self.webpackChunkblogs=self.webpackChunkblogs||[]).push([[7742],{3570:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>r,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"http/lifespan","title":"Lifespan","description":"lifespan is a ASGI-protocol that would be invoked when your app starts and stops.","source":"@site/docs/http/lifespan.md","sourceDirName":"http","slug":"/http/lifespan","permalink":"/docs/http/lifespan","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"error-handling","permalink":"/docs/http/error-handling"},"next":{"title":"middleware","permalink":"/docs/http/middleware"}}');var s=t(4848),a=t(8453);const l={},r="Lifespan",p={},o=[{value:"when to use lifespan &amp; what to do in lifespan handler",id:"when-to-use-lifespan--what-to-do-in-lifespan-handler",level:2},{value:"app state",id:"app-state",level:2},{value:"Technic details",id:"technic-details",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"lifespan",children:"Lifespan"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"lifespan"})," is a ASGI-protocol that would be invoked when your app starts and stops."]}),"\n",(0,s.jsx)(n.p,{children:"lihil expects a lifespan with following interface:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'type LifeSpan[T: Mapping[str, Any] | None] = Callable[\n    ["Lihil[T]"], AsyncContextManager[T] | AsyncGenerator[T, None]\n]\n'})}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from typing import TypedDict\n\nclass ExampleState(TypedDict):\n    engine: AsyncEngine\n\n\nasync def example_lifespan(app: Lihil[None]):\n    engine = create_async_engine(app.app_congig)\n    yield ExampleState(engine=Engine)\n    await engine.dispose()\n\nlhl = Lihil(lifespan=example_lifespan)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"when-to-use-lifespan--what-to-do-in-lifespan-handler",children:"when to use lifespan & what to do in lifespan handler"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"test service availability"}),"\n",(0,s.jsx)(n.li,{children:"create singleton objects that should not be recycled untill app dies"}),"\n",(0,s.jsx)(n.li,{children:"clean up"}),"\n",(0,s.jsx)(n.li,{children:"logging"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"app-state",children:"app state"}),"\n",(0,s.jsxs)(n.p,{children:["object yield from the lifespan is called ",(0,s.jsx)(n.code,{children:"AppState"})]}),"\n",(0,s.jsxs)(n.p,{children:["You might declare dependency injection in your endpoint using the ",(0,s.jsx)(n.code,{children:"AppState"})," mark."]}),"\n",(0,s.jsx)(n.p,{children:"Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"async def get_app_name(app_name: AppState[str]):\n    return app_name\n"})}),"\n",(0,s.jsx)(n.h2,{id:"technic-details",children:"Technic details"}),"\n",(0,s.jsx)(n.p,{children:"When an asgi server(for example, uvicorn),  starts and stops, it sends an lifespan event to the web framework it is hosting(for example, lihil).\nThe lihil receives the lifespan message, it would first run user provided lifespan handler(if there is one), then run internal setups."})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>r});var i=t(6540);const s={},a=i.createContext(s);function l(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);