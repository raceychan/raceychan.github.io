"use strict";(self.webpackChunkblogs=self.webpackChunkblogs||[]).push([[429],{4277:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>h});const r=JSON.parse('{"id":"http/request/path","title":"path","description":"In an HTTP request, the URL path plays a central role in routing. It\'s how the server knows what resource the client is trying to access. But paths aren\'t just static\u2014they often carry dynamic values known as path parameters.","source":"@site/docs/http/request/path.md","sourceDirName":"http/request","slug":"/http/request/path-parameter","permalink":"/docs/http/request/path-parameter","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"path","slug":"path-parameter"},"sidebar":"tutorialSidebar","previous":{"title":"Request","permalink":"/docs/http/request/"},"next":{"title":"query","permalink":"/docs/http/request/query-parameter"}}');var n=a(74848),s=a(28453);const i={sidebar_position:1,title:"path",slug:"path-parameter"},o="Path Parameters",l={},h=[{value:"What Are Path Parameters?",id:"what-are-path-parameters",level:2},{value:"Path Parameters in lihil",id:"path-parameters-in-lihil",level:2},{value:"Path vs Other Parameters",id:"path-vs-other-parameters",level:2},{value:"Type validation",id:"type-validation",level:2},{value:"Data Validation",id:"data-validation",level:2},{value:"Custom validation",id:"custom-validation",level:2}];function c(e){const t={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"path-parameters",children:"Path Parameters"})}),"\n",(0,n.jsxs)(t.p,{children:["In an HTTP request, the URL path plays a central role in routing. It's how the server knows ",(0,n.jsx)(t.em,{children:"what resource"})," the client is trying to access. But paths aren't just static\u2014they often carry dynamic values known as ",(0,n.jsx)(t.strong,{children:"path parameters"}),"."]}),"\n",(0,n.jsx)(t.h2,{id:"what-are-path-parameters",children:"What Are Path Parameters?"}),"\n",(0,n.jsx)(t.p,{children:"A path parameter is a variable part of the URL path. It\u2019s typically used to identify a specific resource. For example:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-http",children:"GET /users/42 HTTP/1.1\nHost: example.com\n"})}),"\n",(0,n.jsx)(t.p,{children:"In this example, /users/42 is requesting the user whose ID is 42. The 42 is a path parameter\u2014data embedded directly in the URL structure."}),"\n",(0,n.jsx)(t.p,{children:"embedded directly in the URL structure."}),"\n",(0,n.jsx)(t.h2,{id:"path-parameters-in-lihil",children:"Path Parameters in lihil"}),"\n",(0,n.jsx)(t.p,{children:"In lihil, path parameters are first-class citizens. You declare them directly in your route definition, and lihil automatically extracts them from the URL and passes them into your endpoint as regular Python arguments."}),"\n",(0,n.jsx)(t.p,{children:"For example:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:'from lihil import Route\n\nuser = Route("/users/{user_id}")\n\n@user.get\nasync def get_user(user_id: int) -> User:\n    ...\n'})}),"\n",(0,n.jsxs)(t.p,{children:["Here, ",(0,n.jsx)(t.code,{children:"user_id"})," is a path parameter. When a request like ",(0,n.jsx)(t.code,{children:"GET /users/42"})," comes in, lihil parses the URL, converts 42 to an integer (based on the type hint), and passes it to your function."]}),"\n",(0,n.jsx)(t.p,{children:"You don\u2019t need to write any parsing logic. You don\u2019t even need to look at the IRequest object directly. lihil handles everything from extracting the value to performing type conversion."}),"\n",(0,n.jsx)(t.h2,{id:"path-vs-other-parameters",children:"Path vs Other Parameters"}),"\n",(0,n.jsx)(t.p,{children:"Path parameters are one-dimensional: they carry a single, fixed value\u2014like an ID, slug, or name. They are perfect for identifying a specific resource."}),"\n",(0,n.jsx)(t.p,{children:"Compare this with:"}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"query"})," parameters, which can represent filters, pagination, or lists of values."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"headers"}),", which usually carry metadata or control instructions."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"request body"}),", which holds structured data like JSON or form submissions."]}),"\n",(0,n.jsx)(t.p,{children:"Each of these has its place, and lihil supports them all\u2014but path parameters are the most direct and visible part of the URL."}),"\n",(0,n.jsx)(t.p,{children:"In the next post, we'll explore query parameters and headers\u2014how they appear in requests, what they're used for, and how lihil helps you declare and validate them cleanly."}),"\n",(0,n.jsx)(t.h2,{id:"type-validation",children:"Type validation"}),"\n",(0,n.jsxs)(t.p,{children:["Path parameters are validated based on their type hints. If you declare a path parameter as an ",(0,n.jsx)(t.code,{children:"int"}),", lihil will automatically convert it to an integer. If the conversion fails, lihil will return a 422 Invalid Request error."]}),"\n",(0,n.jsx)(t.p,{children:"If a union of types is provided, lihil will try to convert the value to each type in the union until one succeeds. If none succeed, a 422 error is returned."}),"\n",(0,n.jsx)(t.admonition,{type:"warning",children:(0,n.jsxs)(t.p,{children:["If a union contains str or bytes, the conversion will always succeed, as these types can represent any value. This means that if you have a union like ",(0,n.jsx)(t.code,{children:"Union[int, str]"}),", the path parameter will always be treated as a string."]})}),"\n",(0,n.jsx)(t.h2,{id:"data-validation",children:"Data Validation"}),"\n",(0,n.jsxs)(t.p,{children:["You might also want to validate the value of the path parameter. For example, if you want to ensure that the user ID is positive, you can set such constraints using ",(0,n.jsx)(t.code,{children:"lihil.Param"}),"."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:'from lihil import Route, Param \n\nPositiveInt = Param(gt=0)\n\nuser = Route("/users/{user_id}")\n\n@user.get\nasync def get_user(user_id: PositiveInt) -> User: ...\n'})}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"lihil.Param"})," allows you to set various constraints on the path parameter, such as minimum and maximum values, regex patterns, and more. This is particularly useful for ensuring that the data you receive is valid before processing it."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"lihil.Param"})," uses ",(0,n.jsx)(t.code,{children:"msgspec.Meta"})," under the hood, so you can use all the features of ",(0,n.jsx)(t.code,{children:"msgspec.Meta"})," to validate your path parameters."]}),"\n",(0,n.jsx)(t.h2,{id:"custom-validation",children:"Custom validation"}),"\n",(0,n.jsx)(t.p,{children:"You can also create custom validators for path parameters. This is useful when you have complex validation logic that can't be expressed with simple constraints."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:'from lihil import Route, Param, HTTPException\n\n\nclass MyError(HTTPException[T]):\n    "I don\'t like this value"\n\n\ndef decoder(value: str) -> int:\n    # Custom decoding logic\n    if value == "42":\n        raise MyError("I don\'t like this value")\n    return int(value)\n\nasync def create_user(user_id: int, user_age: Annotated[int, Param(decoder=decoder)]) -> User:\n    # Your logic here\n    pass\n'})})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},28453:(e,t,a)=>{a.d(t,{R:()=>i,x:()=>o});var r=a(96540);const n={},s=r.createContext(n);function i(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);