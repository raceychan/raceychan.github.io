"use strict";(self.webpackChunkblogs=self.webpackChunkblogs||[]).push([[7742],{3570:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"http/lifespan","title":"lifespan","description":"lifespan is a ASGI-protocol that would be invoked when your app starts and stops.","source":"@site/docs/http/lifespan.md","sourceDirName":"http","slug":"/http/lifespan","permalink":"/docs/http/lifespan","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"error-handling","permalink":"/docs/http/error-handling"},"next":{"title":"middleware","permalink":"/docs/http/middleware"}}');var t=a(4848),i=a(8453);const r={},o="lifespan",l={},c=[{value:"when to use lifespan &amp; what to do in lifespan handler",id:"when-to-use-lifespan--what-to-do-in-lifespan-handler",level:2},{value:"Test service availability",id:"test-service-availability",level:3},{value:"Create Singleton Objects That Require the Event Loop",id:"create-singleton-objects-that-require-the-event-loop",level:3},{value:"Clean Up Resources",id:"clean-up-resources",level:3},{value:"Logging",id:"logging",level:3},{value:"Register Metrics (e.g., Prometheus)",id:"register-metrics-eg-prometheus",level:3},{value:"Schedule Background Tasks or Initialize Task Scheduler",id:"schedule-background-tasks-or-initialize-task-scheduler",level:3},{value:"Preload Caches or In-memory Data",id:"preload-caches-or-in-memory-data",level:3},{value:"Technic details",id:"technic-details",level:2}];function p(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"lifespan",children:"lifespan"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"lifespan"})," is a ASGI-protocol that would be invoked when your app starts and stops."]}),"\n",(0,t.jsx)(n.p,{children:"lihil expects a lifespan with following interface:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'type LifeSpan = Callable[\n    ["Lihil"], AsyncContextManager[None] | AsyncGenerator[None, None]\n]\n'})}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:'\nasync def example_lifespan(app: Lihil):\n    engine = app.graph.resolve(create_async_engine)\n    await engine.execute(text("SELECT 1"))\n    yield\n    await engine.dispose()\n\nlhl = Lihil(lifespan=example_lifespan)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"when-to-use-lifespan--what-to-do-in-lifespan-handler",children:"when to use lifespan & what to do in lifespan handler"}),"\n",(0,t.jsx)(n.p,{children:"ASGI lifespan handlers are an excellent way to manage startup and shutdown logic for async applications. These handlers run once when the application starts and when it stops, making them ideal for managing resources that need to be initialized and cleaned up asynchronously."}),"\n",(0,t.jsx)(n.h3,{id:"test-service-availability",children:"Test service availability"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from sqlalchemy.ext.asyncio import create_async_engine\n\nasync def lifespan(app: Lihil):\n    engine = create_async_engine(app.config.database.url)\n    await engine.execute(text("SELECT 1"))  \n    yield \n    await engine.dispose()  # close connections on shutdown\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:'await engine.execute(text("SELECT 1"))'})," sends a dummy query to your database and therefore tests the availability of a service, and if it fails, the application will fail fast without starting."]}),"\n",(0,t.jsx)(n.h3,{id:"create-singleton-objects-that-require-the-event-loop",children:"Create Singleton Objects That Require the Event Loop"}),"\n",(0,t.jsx)(n.p,{children:"When working with async clients or services, such as Kafka producers or database clients, you need to ensure they are started within the event loop:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from aiokafka import AIOKafkaProducer\n\nasync def lifespan(app: Lihil):\n    kafka = AIOKafkaProducer(bootstrap_servers=app.config.kafka.url)\n    await kafka.start()\n    yield  \n    await kafka.stop()\n"})}),"\n",(0,t.jsx)(n.p,{children:"Here, the Kafka producer is created as a singleton object within the lifespan handler. The producer connects to the Kafka broker on startup and is properly shut down when the app stops."}),"\n",(0,t.jsx)(n.h3,{id:"clean-up-resources",children:"Clean Up Resources"}),"\n",(0,t.jsx)(n.p,{children:"During shutdown, it\u2019s important to clean up any connections, release resources, or stop services gracefully:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"async def lifespan(app: Lihil):\n    engine = create_async_engine(...)\n    kafka = AIOKafkaProducer(...)\n    await kafka.start()\n    yield  \n    await kafka.stop()  # Stop Kafka producer cleanly\n    await engine.dispose()  # Dispose of engine or any database connections\n"})}),"\n",(0,t.jsx)(n.h3,{id:"logging",children:"Logging"}),"\n",(0,t.jsx)(n.p,{children:"Lifespan handlers are also a good place to log key events, such as app startup and shutdown:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import logging\n\nlogger = logging.getLogger(__name__)\n\nasync def lifespan(app):\n    logger.info("App is starting...")\n    await engine.execute(text("SELECT 1"))\n    yield \n    logger.info("App is shutting down...")\n    await engine.dispose()\n'})}),"\n",(0,t.jsx)(n.h3,{id:"register-metrics-eg-prometheus",children:"Register Metrics (e.g., Prometheus)"}),"\n",(0,t.jsx)(n.p,{children:"In some cases, you might want to initialize monitoring or metrics services on startup:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from prometheus_client import start_http_server, Counter\n\nmetrics_counter = Counter('app_start', 'App has started')\n\nasync def lifespan(app):\n    # Start Prometheus metrics server on a separate port\n    start_http_server(app.config.prometheus.url)\n    metrics_counter.inc()  # Increment a counter to track app startup\n    yield \n"})}),"\n",(0,t.jsx)(n.h3,{id:"schedule-background-tasks-or-initialize-task-scheduler",children:"Schedule Background Tasks or Initialize Task Scheduler"}),"\n",(0,t.jsx)(n.p,{children:"If your app needs to schedule periodic tasks (e.g., using Celery or another scheduler), you can do this in the lifespan handler:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import asyncio\n\nasync def schedule_tasks():\n    while True:\n        print("Running periodic task...")\n        await asyncio.sleep(60)  # Run every 60 seconds\n\nasync def lifespan(app):\n    task = asyncio.create_task(schedule_tasks())\n    yield\n    # Cancel the background task during shutdown\n    task.cancel()\n    try:\n        await task\n    except asyncio.CancelledError:\n        pass\n'})}),"\n",(0,t.jsx)(n.h3,{id:"preload-caches-or-in-memory-data",children:"Preload Caches or In-memory Data"}),"\n",(0,t.jsx)(n.p,{children:"If your application relies on preloading certain data (such as caching or configuration), you can do so in the lifespan handler to speed up app startup:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'async def preload_cache():\n    # Example: Preload frequently accessed data into the cache\n    await cache.set("key", "value")\n\nasync def lifespan(app):\n    # Preload cache on app startup\n    await preload_cache()\n    yield \n'})}),"\n",(0,t.jsx)(n.h2,{id:"technic-details",children:"Technic details"}),"\n",(0,t.jsx)(n.p,{children:"When an asgi server(for example, uvicorn),  starts and stops, it sends an lifespan event to the web framework it is hosting(for example, lihil).\nThe lihil receives the lifespan message, it would first run user provided lifespan handler(if there is one), then run internal setups."})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>r,x:()=>o});var s=a(6540);const t={},i=s.createContext(t);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);