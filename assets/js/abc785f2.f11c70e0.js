"use strict";(self.webpackChunkblogs=self.webpackChunkblogs||[]).push([[1381],{4233:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"http/request/header","title":"header","description":"Headers are key-value pairs sent along with an HTTP request. They carry metadata about the request\u2014like content type, authorization tokens, client information, and more. Headers are not part of the URL or the body, but are sent in a separate section between the request line and the body.","source":"@site/docs/http/request/header.md","sourceDirName":"http/request","slug":"/http/request/header-parameter","permalink":"/docs/http/request/header-parameter","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"header","slug":"header-parameter"},"sidebar":"tutorialSidebar","previous":{"title":"query","permalink":"/docs/http/request/query-parameter"},"next":{"title":"cookie","permalink":"/docs/http/request/cookie-parameter"}}');var r=a(4848),s=a(8453);const i={sidebar_position:3,title:"header",slug:"header-parameter"},o="Headers",d={},l=[{value:"Accessing Headers in lihil",id:"accessing-headers-in-lihil",level:2},{value:"Multi-Value Headers",id:"multi-value-headers",level:2},{value:"Header Key Mapping",id:"header-key-mapping",level:2},{value:"Custom Decoder",id:"custom-decoder",level:2}];function c(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"headers",children:"Headers"})}),"\n",(0,r.jsx)(t.p,{children:"Headers are key-value pairs sent along with an HTTP request. They carry metadata about the request\u2014like content type, authorization tokens, client information, and more. Headers are not part of the URL or the body, but are sent in a separate section between the request line and the body."}),"\n",(0,r.jsx)(t.p,{children:"Here\u2019s what a request with headers might look like:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-http",children:"GET /profile HTTP/1.1\nHost: example.com\nUser-Agent: curl/8.5.0\nAccept: application/json, text/plain, text/html\n"})}),"\n",(0,r.jsx)(t.p,{children:"Each header is structured as a key-value pair, and according to the HTTP specification (RFC 7230), a header key can appear multiple times with different values. When that happens, the values are either:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"sent as separate header lines with the same key"}),"\n",(0,r.jsx)(t.li,{children:"combined into a single comma-separated value."}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"accessing-headers-in-lihil",children:"Accessing Headers in lihil"}),"\n",(0,r.jsxs)(t.p,{children:["While lihil abstracts away raw headers, you can easily declare header parameters directly in your endpoint using ",(0,r.jsx)(t.code,{children:'Param("header")'}),"."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'from lihil import Route, Param\nfrom typing import Annotated\n\nroute = Route("/greet")\n\n@route.get\nasync def greet_user(\n    user_agent: Annotated[str, Param("header")],  # Auto-maps to "user-agent"\n    accept: Annotated[list[str], Param("header")],  # Handles comma-separated Accept\n):\n    return {"ua": user_agent, "accepts": accept}\n'})}),"\n",(0,r.jsx)(t.h2,{id:"multi-value-headers",children:"Multi-Value Headers"}),"\n",(0,r.jsxs)(t.p,{children:["Some headers\u2014like ",(0,r.jsx)(t.code,{children:"Accept"}),", ",(0,r.jsx)(t.code,{children:"Accept-Language"}),", ",(0,r.jsx)(t.code,{children:"Cache-Control"})," naturally support multiple values, separated by commas."]}),"\n",(0,r.jsx)(t.p,{children:"lihil supports this out of the box. To accept a multi-value header, just use a list[str] type hint:"}),"\n",(0,r.jsx)(t.p,{children:"To accept a multi-value header, just use a list[str] type hint:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'accept: Annotated[list[str], Param("header")]\n'})}),"\n",(0,r.jsx)(t.p,{children:"This will correctly parse:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-http",children:"Accept: text/html, application/json\n"})}),"\n",(0,r.jsx)(t.p,{children:"into:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'["text/html", "application/json"]\n'})}),"\n",(0,r.jsx)(t.h2,{id:"header-key-mapping",children:"Header Key Mapping"}),"\n",(0,r.jsx)(t.p,{children:"HTTP header names often use kebab-case (e.g. X-Request-ID), but Python variables can't contain dashes. lihil solves this in two ways:"}),"\n",(0,r.jsxs)(t.p,{children:["Auto-mapping: By default, lihil will convert ",(0,r.jsx)(t.code,{children:"my_token"})," to ",(0,r.jsx)(t.code,{children:"my-token"}),"."]}),"\n",(0,r.jsx)(t.p,{children:"Explicit aliasing: You can use the alias option to specify the exact header key:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'request_id: Annotated[str, Param("header", alias="x-request-id")]\n'})}),"\n",(0,r.jsx)(t.h2,{id:"custom-decoder",children:"Custom Decoder"}),"\n",(0,r.jsx)(t.p,{children:"for more complex headers, you can define a custom decoder function. This function takes the raw header value and returns the desired type."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'from lihil import Route, Param\nfrom typing import Annotated\n\ndef custom_decoder(value: str) -> str:\n    # Custom decoding logic\n    return value.lower()\n\nroute = Route("/greet")\n\n@route\nasync def create_user(\n    user_agent: Annotated[str, Param("header")],\n    custom_header: Annotated[str, Param("header", decoder=custom_decoder)],\n):\n    return {"ua": user_agent, "custom": custom_header}\n'})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,t,a)=>{a.d(t,{R:()=>i,x:()=>o});var n=a(6540);const r={},s=n.createContext(r);function i(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);