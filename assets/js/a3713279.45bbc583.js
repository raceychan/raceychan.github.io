"use strict";(self.webpackChunkblogs=self.webpackChunkblogs||[]).push([[9588],{28453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>r});var l=i(96540);const o={},s=l.createContext(o);function t(e){const n=l.useContext(s);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),l.createElement(s.Provider,{value:n},e.children)}},43876:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>p,frontMatter:()=>t,metadata:()=>l,toc:()=>c});const l=JSON.parse('{"id":"deployment","title":"Deployment","description":"Prerequisites","source":"@site/docs/deployment.md","sourceDirName":".","slug":"/deployment","permalink":"/docs/deployment","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"title":"Deployment","sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Testing","permalink":"/docs/testing"},"next":{"title":"FastAPI","permalink":"/docs/comparison/fastapi"}}');var o=i(74848),s=i(28453);const t={title:"Deployment",sidebar_position:4},r=void 0,a={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Dockerize your project",id:"dockerize-your-project",level:2},{value:"Dockerfile Configuration",id:"dockerfile-configuration",level:3},{value:"Python Image Selection",id:"python-image-selection",level:3},{value:"Build Commands",id:"build-commands",level:3},{value:"Run Container",id:"run-container",level:3},{value:"Test images locally using Docker compose",id:"test-images-locally-using-docker-compose",level:2},{value:"Docker Compose Configuration",id:"docker-compose-configuration",level:3},{value:"Docker Compose Commands",id:"docker-compose-commands",level:3},{value:"Environment Configuration",id:"environment-configuration",level:3},{value:"Volume Mounts",id:"volume-mounts",level:3},{value:"Health Checks",id:"health-checks",level:3},{value:"Deploy in k8s",id:"deploy-in-k8s",level:2},{value:"Deployment Manifest",id:"deployment-manifest",level:3},{value:"Service Manifest",id:"service-manifest",level:3},{value:"ConfigMap for Configuration",id:"configmap-for-configuration",level:3},{value:"Persistent Volume for Database",id:"persistent-volume-for-database",level:3},{value:"Deployment Commands",id:"deployment-commands",level:3},{value:"Production Considerations",id:"production-considerations",level:3}];function d(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Docker Engine 20.10+"}),"\n",(0,o.jsx)(n.li,{children:"Docker Compose v2.0+"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"dockerize-your-project",children:"Dockerize your project"}),"\n",(0,o.jsx)(n.h3,{id:"dockerfile-configuration",children:"Dockerfile Configuration"}),"\n",(0,o.jsxs)(n.p,{children:["Create a ",(0,o.jsx)(n.code,{children:"dockerfile"})," in your project root with the following configuration:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dockerfile",children:'FROM python:3.12-slim-bookworm\n\nWORKDIR /app\n\n# Copy dependency files\nCOPY pyproject.toml ./\n\n# Install dependencies only\nRUN pip install . && pip uninstall -y src\n# Copy configuration\nCOPY settings.toml ./\nCOPY .env ./\n\n# Copy source code\nCOPY src/ ./src/\n\nEXPOSE 8000\n\nCMD ["python", "-m", "src.main"]\n'})}),"\n",(0,o.jsx)(n.h3,{id:"python-image-selection",children:"Python Image Selection"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Recommended"}),": ",(0,o.jsx)(n.code,{children:"python:3.12-slim-bookworm"})]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Debian-based with minimal footprint"}),"\n",(0,o.jsx)(n.li,{children:"Good security and compatibility balance"}),"\n",(0,o.jsx)(n.li,{children:"Optimal for production deployments"}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Alternatives"}),":"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"python:3.12-alpine"})," - Smaller size but potential compatibility issues"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"python:3.12"})," - Full Debian image, larger but more compatible"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"python:3.11-slim-bookworm"})," - For Python 3.11 compatibility"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"build-commands",children:"Build Commands"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Build the Docker image\ndocker build -t lihil-app .\n\n# Build with specific tag\ndocker build -t lihil-app:v1.0.0 .\n\n# Build without cache\ndocker build --no-cache -t lihil-app .\n"})}),"\n",(0,o.jsx)(n.h3,{id:"run-container",children:"Run Container"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Run container\ndocker run -p 8000:8000 lihil-app\n\n# Run with environment variables\ndocker run -p 8000:8000 -e ENV=production lihil-app\n\n# Run with volume mount for database\ndocker run -p 8000:8000 -v ./test.db:/app/test.db lihil-app\n"})}),"\n",(0,o.jsx)(n.h2,{id:"test-images-locally-using-docker-compose",children:"Test images locally using Docker compose"}),"\n",(0,o.jsx)(n.h3,{id:"docker-compose-configuration",children:"Docker Compose Configuration"}),"\n",(0,o.jsxs)(n.p,{children:["Create a ",(0,o.jsx)(n.code,{children:"docker-compose.yml"})," file:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'services:\n  lihil-backend:\n    build:\n      context: .\n      dockerfile: dockerfile\n    ports:\n      - "8000:8000"\n    environment:\n      - ENV=production\n    volumes:\n      - ./test.db:/app/test.db\n    restart: unless-stopped\n    command: ["uvicorn", "src.main:app", "--host", "0.0.0.0", "--port", "8000"]\n'})}),"\n",(0,o.jsx)(n.h3,{id:"docker-compose-commands",children:"Docker Compose Commands"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Start the application\ndocker-compose up\n\n# Start in detached mode\ndocker-compose up -d\n\n# Build and start\ndocker-compose up --build\n\n# Stop services\ndocker-compose down\n\n# View logs\ndocker-compose logs -f lihil-backend\n\n# Execute shell in container\ndocker-compose exec lihil-backend bash\n"})}),"\n",(0,o.jsx)(n.h3,{id:"environment-configuration",children:"Environment Configuration"}),"\n",(0,o.jsxs)(n.p,{children:["Configure environment variables in ",(0,o.jsx)(n.code,{children:"docker-compose.yml"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"environment:\n  - ENV=production\n  - DATABASE_URL=sqlite:///app/test.db\n  - LOG_LEVEL=info\n  - UVICORN_HOST=0.0.0.0\n  - UVICORN_PORT=8000\n"})}),"\n",(0,o.jsx)(n.h3,{id:"volume-mounts",children:"Volume Mounts"}),"\n",(0,o.jsx)(n.p,{children:"For database persistence:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"volumes:\n  - ./test.db:/app/test.db\n"})}),"\n",(0,o.jsx)(n.p,{children:"For development with live reload:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"volumes:\n  - ./src:/app/src\n  - ./settings.toml:/app/settings.toml\n"})}),"\n",(0,o.jsx)(n.h3,{id:"health-checks",children:"Health Checks"}),"\n",(0,o.jsx)(n.p,{children:"Add health check to your service:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'healthcheck:\n  test: ["CMD", "curl", "-f", "http://localhost:8000/health"]\n  interval: 30s\n  timeout: 10s\n  retries: 3\n  start_period: 40s\n'})}),"\n",(0,o.jsx)(n.h2,{id:"deploy-in-k8s",children:"Deploy in k8s"}),"\n",(0,o.jsx)(n.h3,{id:"deployment-manifest",children:"Deployment Manifest"}),"\n",(0,o.jsxs)(n.p,{children:["Create ",(0,o.jsx)(n.code,{children:"k8s-deployment.yaml"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: lihil-app\n  labels:\n    app: lihil-app\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: lihil-app\n  template:\n    metadata:\n      labels:\n        app: lihil-app\n    spec:\n      containers:\n      - name: lihil-app\n        image: lihil-app:latest\n        ports:\n        - containerPort: 8000\n        env:\n        - name: ENV\n          value: "production"\n        - name: UVICORN_HOST\n          value: "0.0.0.0"\n        - name: UVICORN_PORT\n          value: "8000"\n        resources:\n          requests:\n            memory: "128Mi"\n            cpu: "100m"\n          limits:\n            memory: "512Mi"\n            cpu: "500m"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /health\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n'})}),"\n",(0,o.jsx)(n.h3,{id:"service-manifest",children:"Service Manifest"}),"\n",(0,o.jsxs)(n.p,{children:["Create ",(0,o.jsx)(n.code,{children:"k8s-service.yaml"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Service\nmetadata:\n  name: lihil-service\nspec:\n  selector:\n    app: lihil-app\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 8000\n  type: LoadBalancer\n"})}),"\n",(0,o.jsx)(n.h3,{id:"configmap-for-configuration",children:"ConfigMap for Configuration"}),"\n",(0,o.jsxs)(n.p,{children:["Create ",(0,o.jsx)(n.code,{children:"k8s-configmap.yaml"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: lihil-config\ndata:\n  settings.toml: |\n    [server]\n    host = "0.0.0.0"\n    port = 8000\n    \n    [database]\n    url = "sqlite:///app/data/app.db"\n'})}),"\n",(0,o.jsx)(n.h3,{id:"persistent-volume-for-database",children:"Persistent Volume for Database"}),"\n",(0,o.jsxs)(n.p,{children:["Create ",(0,o.jsx)(n.code,{children:"k8s-pv.yaml"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: lihil-pvc\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 1Gi\n"})}),"\n",(0,o.jsx)(n.h3,{id:"deployment-commands",children:"Deployment Commands"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Apply all manifests\nkubectl apply -f k8s-deployment.yaml\nkubectl apply -f k8s-service.yaml\nkubectl apply -f k8s-configmap.yaml\nkubectl apply -f k8s-pv.yaml\n\n# Check deployment status\nkubectl get deployments\nkubectl get pods\nkubectl get services\n\n# View logs\nkubectl logs -f deployment/lihil-app\n\n# Scale deployment\nkubectl scale deployment lihil-app --replicas=5\n\n# Update image\nkubectl set image deployment/lihil-app lihil-app=lihil-app:v2.0.0\n\n# Port forward for local testing\nkubectl port-forward service/lihil-service 8000:80\n"})}),"\n",(0,o.jsx)(n.h3,{id:"production-considerations",children:"Production Considerations"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Secrets Management"}),": Use Kubernetes secrets for sensitive data"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Ingress"}),": Configure ingress controller for external access"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Resource Limits"}),": Set appropriate CPU and memory limits"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Monitoring"}),": Implement Prometheus metrics and alerts"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Logging"}),": Configure centralized logging with Fluentd/ELK stack"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);