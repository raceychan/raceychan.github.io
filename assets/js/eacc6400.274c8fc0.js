"use strict";(self.webpackChunkblogs=self.webpackChunkblogs||[]).push([[2585],{28453:(e,r,a)=>{a.d(r,{R:()=>l,x:()=>s});var t=a(96540);const n={},i=t.createContext(n);function l(e){const r=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:l(e.components),t.createElement(i.Provider,{value:r},e.children)}},73937:(e,r,a)=>{a.r(r),a.d(r,{assets:()=>o,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"http/request/query","title":"query","description":"Query parameters are a flexible way to pass data to your server through the URL\u2014especially for things like filters, pagination, or optional inputs. They appear after a ? in the URL and are made up of key-value pairs.","source":"@site/docs/http/request/query.md","sourceDirName":"http/request","slug":"/http/request/query-parameter","permalink":"/docs/http/request/query-parameter","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"query","slug":"query-parameter"},"sidebar":"tutorialSidebar","previous":{"title":"path","permalink":"/docs/http/request/path-parameter"},"next":{"title":"header","permalink":"/docs/http/request/header-parameter"}}');var n=a(74848),i=a(28453);const l={sidebar_position:2,title:"query",slug:"query-parameter"},s="Query Parameters",o={},c=[{value:"What Do Query Parameters Look Like?",id:"what-do-query-parameters-look-like",level:2},{value:"Query Parameters vs Other Request Parameters",id:"query-parameters-vs-other-request-parameters",level:2},{value:"Declaring Query Parameters in lihil",id:"declaring-query-parameters-in-lihil",level:2},{value:"Implictly declare a query param",id:"implictly-declare-a-query-param",level:3},{value:"Explictly declare a query param with <code>Param</code>",id:"explictly-declare-a-query-param-with-param",level:3},{value:"Array-like Query Parameters",id:"array-like-query-parameters",level:2},{value:"Data Validation",id:"data-validation",level:2},{value:"Custom Validation",id:"custom-validation",level:2},{value:"Recap",id:"recap",level:2}];function d(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.header,{children:(0,n.jsx)(r.h1,{id:"query-parameters",children:"Query Parameters"})}),"\n",(0,n.jsxs)(r.p,{children:["Query parameters are a flexible way to pass data to your server through the URL\u2014especially for things like filters, pagination, or optional inputs. They appear after a ",(0,n.jsx)(r.code,{children:"?"})," in the URL and are made up of key-value pairs."]}),"\n",(0,n.jsx)(r.h2,{id:"what-do-query-parameters-look-like",children:"What Do Query Parameters Look Like?"}),"\n",(0,n.jsx)(r.p,{children:"Here\u2019s a simple request with query parameters:"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-http",children:"GET /articles?keyword=book&page=2 HTTP/1.1\nHost: example.com\n"})}),"\n",(0,n.jsx)(r.p,{children:"In this example:"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"keyword"})," is a query parameter with the value ",(0,n.jsx)(r.code,{children:"book"}),"."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"page"})," is another query parameter with the value ",(0,n.jsx)(r.code,{children:"2"}),"."]}),"\n"]}),"\n",(0,n.jsx)(r.p,{children:"These values are transmitted in the request URL as plain text strings. Lihil will automatically handle parsing and type conversion based on your function signature."}),"\n",(0,n.jsx)(r.h2,{id:"query-parameters-vs-other-request-parameters",children:"Query Parameters vs Other Request Parameters"}),"\n",(0,n.jsxs)(r.ol,{children:["\n",(0,n.jsxs)(r.li,{children:["\n",(0,n.jsxs)(r.p,{children:["Location in Request\nQuery parameters are encoded in the URL, after the path pameters and starts with a ",(0,n.jsx)(r.code,{children:"?"}),", as part of the request line:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-http",children:"GET /search?query=python&sort=asc HTTP/1.1\n"})}),"\n"]}),"\n",(0,n.jsxs)(r.li,{children:["\n",(0,n.jsx)(r.p,{children:"Encoding Format\nQuery parameters are URL-encoded. For example:"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-http",children:"?q=hello%20world\n"})}),"\n",(0,n.jsx)(r.p,{children:"This means special characters (like spaces) are percent-encoded."}),"\n"]}),"\n",(0,n.jsxs)(r.li,{children:["\n",(0,n.jsx)(r.p,{children:"Data Types\nQuery parameters support:"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:"Primitive types: str, int, float, bool"}),"\n",(0,n.jsx)(r.li,{children:"Arrays/lists: list[str], list[int]"}),"\n"]}),"\n",(0,n.jsx)(r.p,{children:"Unlike body parameters, they cannot represent nested structures like dictionaries.\nUnlike path parameters, query parameters can have repeated keys (e.g., tag=python&tag=web)."}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(r.h2,{id:"declaring-query-parameters-in-lihil",children:"Declaring Query Parameters in lihil"}),"\n",(0,n.jsx)(r.p,{children:"You can declare a query parameter both implictly and explictly"}),"\n",(0,n.jsx)(r.h3,{id:"implictly-declare-a-query-param",children:"Implictly declare a query param"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:'\nfrom lihil import Route\n\narticles = Route("/articles")\n\n@articles.get\nasync def search(keyword: str, page: int = 1):\n    ...\n'})}),"\n",(0,n.jsxs)(r.p,{children:["If a request comes in as ",(0,n.jsx)(r.code,{children:"/articles?keyword=book&page=2"}),", lihil will:"]}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:"extract keyword and page from the query string,"}),"\n",(0,n.jsx)(r.li,{children:"convert page to an integer (based on the type hint),"}),"\n",(0,n.jsx)(r.li,{children:"pass both values to your function."}),"\n",(0,n.jsx)(r.li,{children:"If page is not provided, the default value 1 will be used."}),"\n",(0,n.jsxs)(r.li,{children:["If a query parameter without default value is missing or has an invalid type that can't be coerced, lihil will respond with an ",(0,n.jsx)(r.code,{children:"InvalidRequest"})," error automatically."]}),"\n"]}),"\n",(0,n.jsxs)(r.h3,{id:"explictly-declare-a-query-param-with-param",children:["Explictly declare a query param with ",(0,n.jsx)(r.code,{children:"Param"})]}),"\n",(0,n.jsxs)(r.p,{children:["Alternatively, you might declare the param more explictly by combining ",(0,n.jsx)(r.code,{children:"typing.Annotated"})," and ",(0,n.jsx)(r.code,{children:"lihil.Param"}),"."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:'@articles.get\nasync def search(keyword: Annotated[str, Param("query")], page: Annotated[int, Param("query")] = 1):\n    ...\n'})}),"\n",(0,n.jsx)(r.h2,{id:"array-like-query-parameters",children:"Array-like Query Parameters"}),"\n",(0,n.jsx)(r.p,{children:"Unlike path parameters, query parameters can behave like two-dimensional data. That means you can have multiple values for the same key\u2014perfect for arrays or repeated options:"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-http",children:"GET /filter?tag=python&tag=web&tag=backend HTTP/1.1\n"})}),"\n",(0,n.jsx)(r.p,{children:"In lihil, you can declare this with a list type:"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:'from lihil import Route\n\n@Route("/filter")\nasync def filter_by_tags(tag: list[str]):\n    ...\n'})}),"\n",(0,n.jsx)(r.p,{children:"lihil will collect all tag values and give them to you as a list."}),"\n",(0,n.jsxs)(r.p,{children:["For ",(0,n.jsx)(r.code,{children:"/filter?tag=web&tag=python"}),", you'll receive ",(0,n.jsx)(r.code,{children:'["web", "python", "backend"]'})," as the value of tag."]}),"\n",(0,n.jsx)(r.h2,{id:"data-validation",children:"Data Validation"}),"\n",(0,n.jsx)(r.p,{children:"For array-style query parameters, lihil.Param allows you to enforce constraints like max length or item validation."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:'\nfrom lihil import Param\n\nTags = Param(max_length=5)\n\n@route("/articles")\nasync def search_articles(tags: Annotated[list[str], Tags]) -> JSONResponse:\n    ...\n'})}),"\n",(0,n.jsx)(r.p,{children:"In this case, if a request includes more than 5 tags, lihil will reject it with a 422 error."}),"\n",(0,n.jsx)(r.p,{children:"You can also validate scalar query parameters the same way\u2014for example, to enforce range limits or regex rules."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:'\nPage = Param(ge=1)\n\n@route("/articles")\nasync def list_articles(page: Annotated[int, Page]) -> JSONResponse:\n    ...\n'})}),"\n",(0,n.jsx)(r.h2,{id:"custom-validation",children:"Custom Validation"}),"\n",(0,n.jsx)(r.p,{children:"Need more control? You can define a custom decoder for advanced validation logic. This works for both single and list-based query parameters."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:'from lihil import Param, HTTPException\n\nclass BlockedTagError(HTTPException[str]):\n    "This tag is not allowed"\n\ndef tag_decoder(value: str) -> str:\n    if value in {"banned", "spam"}:\n        raise BlockedTagError(f"Tag \'{value}\' is blocked")\n    return value\n\n@route("/filter")\nasync def filter_tags(tags: Annotated[list[str]: Param(decoder=tag_decoder)]) -> JSONResponse:\n    ...\n'})}),"\n",(0,n.jsxs)(r.p,{children:["In this example, if a user tries to filter with a blocked tag like ",(0,n.jsx)(r.code,{children:'"banned"'})," or ",(0,n.jsx)(r.code,{children:'"spam"'}),", lihil will raise a ",(0,n.jsx)(r.code,{children:"BlockedTag"})," error. The request will be rejected with a 422 error, and the message will indicate which tag was blocked."]}),"\n",(0,n.jsx)(r.p,{children:"Query parameters are not just key-value strings\u2014they're a flexible and powerful part of request handling. With lihil, you get type conversion, validation, and structure with minimal effort."}),"\n",(0,n.jsx)(r.h2,{id:"recap",children:"Recap"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:["\n",(0,n.jsx)(r.p,{children:"Query parameters appear in the URL and are ideal for filters, search terms, and pagination."}),"\n"]}),"\n",(0,n.jsxs)(r.li,{children:["\n",(0,n.jsx)(r.p,{children:"They support both primitive types and repeated keys (lists)."}),"\n"]}),"\n",(0,n.jsxs)(r.li,{children:["\n",(0,n.jsx)(r.p,{children:"In lihil, you can declare them implicitly via type hints or explicitly using Param for validation."}),"\n"]}),"\n",(0,n.jsxs)(r.li,{children:["\n",(0,n.jsx)(r.p,{children:"You can add constraints or custom decoders for robust input validation."}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}}}]);