"use strict";(self.webpackChunkblogs=self.webpackChunkblogs||[]).push([[652],{20493:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"advance/plugin/message bus","title":"event","description":"Message System","source":"@site/docs/advance/plugin/message bus.md","sourceDirName":"advance/plugin","slug":"/advance/plugin/message bus","permalink":"/docs/advance/plugin/message bus","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"event"},"sidebar":"tutorialSidebar","previous":{"title":"jwt","permalink":"/docs/advance/plugin/jwt"},"next":{"title":"supabase","permalink":"/docs/advance/plugin/supabase"}}');var a=s(74848),i=s(28453);const r={title:"event"},l=void 0,c={},d=[{value:"Message System",id:"message-system",level:2},{value:"Event handlers",id:"event-handlers",level:2}];function o(e){const n={code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"message-system",children:"Message System"}),"\n",(0,a.jsxs)(n.p,{children:["Lihil has built-in support for both in-process message handling (Beta) and out-of-process message handling (implementing), it is recommended to use ",(0,a.jsx)(n.code,{children:"EventBus"})," over ",(0,a.jsx)(n.code,{children:"BackGroundTask"})," for event handling."]}),"\n",(0,a.jsx)(n.p,{children:"There are three primitives for event:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"publish: asynchronous and blocking event handling that shares the same scope with caller."}),"\n",(0,a.jsx)(n.li,{children:"emit: non-blocking asynchrounous event hanlding, has its own scope."}),"\n",(0,a.jsx)(n.li,{children:"sink: a thin wrapper around external dependency for data persistence, such as message queue or database."}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from lihil import Route, status, Empty\nfrom lihil.plugins.bus import Event, PEventBus\nfrom lihil.plugins.testclient import LocalClient\n\n\nclass TodoCreated(Event):\n    name: str\n    content: str\n\n\nasync def listen_create(created: TodoCreated, ctx):\n    assert created.name\n    assert created.content\n\n\nasync def listen_twice(created: TodoCreated, ctx):\n    assert created.name\n    assert created.content\n\nregistry = MessageRegistry(event_base=Event)\nregistry.register(listen_create, listen_twice)\nbus_plugin = BusPlugin(BusTerminal(registry))\nbus_route = Route("/bus", plugins=[bus_plugin])\n\n\n@bus_route.post\nasync def create_todo(\n    name: str, content: str, bus: PEventBus\n) -> Annotated[Empty, status.OK]:\n    await bus.publish(TodoCreated(name, content))\n'})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"PEventBus"})," is an alias for ",(0,a.jsx)(n.code,{children:'Annotated[EventBus[Any], Param("plugin")]'})]}),"\n",(0,a.jsx)(n.h2,{id:"event-handlers",children:"Event handlers"}),"\n",(0,a.jsxs)(n.p,{children:["An event can have multiple event handlers, they will be called in sequence, config your ",(0,a.jsx)(n.code,{children:"BusTerminal"})," with ",(0,a.jsx)(n.code,{children:"publisher"})," then inject it to ",(0,a.jsx)(n.code,{children:"Lihil"}),"."]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["An event handler can have as many dependencies as you want, but it should at least contain two params: a sub type of ",(0,a.jsx)(n.code,{children:"Event"}),", and a sub type of ",(0,a.jsx)(n.code,{children:"MessageContext"}),"."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"if a handler is reigstered with a parent event, it will listen to all of its sub event.\nfor example,"}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["a handler that listens to ",(0,a.jsx)(n.code,{children:"UserEvent"}),", will also be called when ",(0,a.jsx)(n.code,{children:"UserCreated(UserEvent)"}),", ",(0,a.jsx)(n.code,{children:"UserDeleted(UserEvent)"})," event is published/emitted."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["you can also publish event during event handling, to do so, declare one of your dependency as ",(0,a.jsx)(n.code,{children:"EventBus"}),","]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"async def listen_create(created: TodoCreated, _: Any, bus: PEventBus):\n    if is_expired(created.created_at):\n        event = TodoExpired.from_event(created)\n        await bus.publish(event)\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(o,{...e})}):o(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>l});var t=s(96540);const a={},i=t.createContext(a);function r(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);