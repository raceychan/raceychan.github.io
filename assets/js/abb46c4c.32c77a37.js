"use strict";(self.webpackChunkblogs=self.webpackChunkblogs||[]).push([[106],{8376:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>d,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"Basics/endpoint","title":"create an endpoint","description":"An endpoint is the most atomic ASGI component in lihil, registered under Route with Route.{http method}, such as Route.get. It defines how clients interact with the resource exposed by the Route.","source":"@site/docs/Basics/endpoint.md","sourceDirName":"Basics","slug":"/Basics/endpoint","permalink":"/docs/Basics/endpoint","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Basics/endpoint.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"create an endpoint"},"sidebar":"tutorialSidebar","previous":{"title":"jwt","permalink":"/docs/AdvancedUsage/jwt"},"next":{"title":"create a route","permalink":"/docs/Basics/route"}}');var t=s(4848),i=s(8453);const d={sidebar_position:1,title:"create an endpoint"},o="Create an endpoint",c={},a=[{value:"Quick Start:",id:"quick-start",level:2},{value:"Param Parsing",id:"param-parsing",level:3},{value:"Param Marks",id:"param-marks",level:3},{value:"Param Analysis Rules",id:"param-analysis-rules",level:4},{value:"Data validation",id:"data-validation",level:3},{value:"Constraints",id:"constraints",level:3},{value:"Return Marks",id:"return-marks",level:3},{value:"Response with status code",id:"response-with-status-code",level:4},{value:"Return Union",id:"return-union",level:4},{value:"Custom Encoder/Decoder",id:"custom-encoderdecoder",level:4},{value:"Properties",id:"properties",level:3}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"create-an-endpoint",children:"Create an endpoint"})}),"\n",(0,t.jsxs)(n.p,{children:["An ",(0,t.jsx)(n.code,{children:"endpoint"})," is the most atomic ASGI component in ",(0,t.jsx)(n.code,{children:"lihil"}),", registered under ",(0,t.jsx)(n.code,{children:"Route"})," with ",(0,t.jsx)(n.code,{children:"Route.{http method}"}),", such as ",(0,t.jsx)(n.code,{children:"Route.get"}),". It defines how clients interact with the resource exposed by the ",(0,t.jsx)(n.code,{children:"Route"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Let's start with a function that creates a ",(0,t.jsx)(n.code,{children:"User"})," in database."]}),"\n",(0,t.jsx)(n.h2,{id:"quick-start",children:"Quick Start:"}),"\n",(0,t.jsx)(n.p,{children:"Expose a random function as an endpoint"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:'title="app/users/api.py"',children:"from msgspec import Struct\nfrom sqlalchemy.ext.asyncio import AsyncEngine\nfrom .users.db import user_sql\n\nclass UserDB(UserData):\n    user_id: str\n\ndef get_engine() -> AsyncEngine:\n    return AsyncEngine()\n\nasync def create_user(user: UserData, engine: AsyncEngine) -> UserDB:\n    user_id = str(uuid4())\n    sql = user_sql(user=user, id_=user_id)\n    async with engine.begin() as conn:\n        await conn.execute(sql)\n    return UserDB.from_user(user, id=user_id)\n"})}),"\n",(0,t.jsx)(n.p,{children:"To expose this function as an endpoint:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from lihil import Route\n\nusers_route = Route("/users")\nusers_route.factory(get_engine)\nusers_route.post(create_user)\n'})}),"\n",(0,t.jsx)(n.p,{children:"With just three lines, we:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:'Create a Route with the path "/users".'}),"\n",(0,t.jsxs)(n.li,{children:["Register ",(0,t.jsx)(n.code,{children:"AsyncEngine"})," as a dependency, using ",(0,t.jsx)(n.code,{children:"get_engine"})," as its factory."]}),"\n",(0,t.jsx)(n.li,{children:"Register create_user as the POST endpoint."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"You might also use python decorator syntax to register an endpoint"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'users_route = Route("/users")\n\n@users_route.post\nasync def create_user(): ...\n'})}),"\n",(0,t.jsx)(n.h3,{id:"param-parsing",children:"Param Parsing"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from lihil import use, Ignore\nfrom typing import Annotated, NewType\nfrom sqlalchemy.ext.asyncio import AsyncConnection, AsyncEngine\n\nasync def get_conn(engine: AsyncEngine) -> AsyncConnection:\n    async with engine.begin() as conn:\n        yield conn\n\nUserID = NewType("UserID", str)\n\ndef user_id_factory() -> UserID:\n    return UserID(str(uuid4()))\n\nasync def create_user(\n    user: UserData, user_id: UserID, conn: AsyncConnection\n) -> Resp[UserDB, stauts.Created]:\n\n    sql = user_sql(user=user, id_=user_id)\n    await conn.execute(sql)\n    return UserDB.from_user(user, id=user_id)\n\nusers_route.factory(get_conn)\nusers_route.factory(user_id_factory, reuse=False)\n'})}),"\n",(0,t.jsx)(n.p,{children:"Here,"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"user_id"})," will be created by ",(0,t.jsx)(n.code,{children:"user_id_factory"})," and return a uuid in str."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"conn"})," will be created by ",(0,t.jsx)(n.code,{children:"get_conn"})," and return an instance of ",(0,t.jsx)(n.code,{children:"AsyncConnection"}),", where the the connection will be returned to engine after request."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"UserDB"})," will be json-serialized, and return a response with content-type being ",(0,t.jsx)(n.code,{children:"application/json"}),", status code being ",(0,t.jsx)(n.code,{children:"201"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"param-marks",children:"Param Marks"}),"\n",(0,t.jsx)(n.p,{children:"Explicitly declaring a parameter with a param mark tells Lihil to treat it as-is, without further analysis."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Header[T, H]"})," for header param with type ",(0,t.jsx)(n.code,{children:"T"})," and header key ",(0,t.jsx)(n.code,{children:"H"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Cookie[T, C]"})," for cookie param with type ",(0,t.jsx)(n.code,{children:"T"})," and cookie name ",(0,t.jsx)(n.code,{children:"C"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Path[T]"})," for path param with type ",(0,t.jsx)(n.code,{children:"T"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Query[T]"})," for query param with type ",(0,t.jsx)(n.code,{children:"T"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Body[T]"})," for body param with type ",(0,t.jsx)(n.code,{children:"T"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Form[T]"})," for body param with content type ",(0,t.jsx)(n.code,{children:"multipart/from-data"})," and type [T]"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Use[T]"})," for dependency with type ",(0,t.jsx)(n.code,{children:"T"})]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Header"})," and ",(0,t.jsx)(n.code,{children:"Cookie"})," allows your to provide metadata for param parsing,"]}),"\n",(0,t.jsxs)(n.p,{children:["Use ",(0,t.jsx)(n.code,{children:"typing.Literal"})," to provide header/cookie name,"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'async def login(cred: Header[str, Literal["User-Credentials"]], x_access_token: Header[str]) : ...\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Here param ",(0,t.jsx)(n.code,{children:"cred"})," expects a header with key ",(0,t.jsx)(n.code,{children:"User-Credentials"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["If key not provided, The kebab case of param name is used, for example, here ",(0,t.jsx)(n.code,{children:"x_access_token"})," expects a header with key ",(0,t.jsx)(n.code,{children:"x-access-token"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"param-analysis-rules",children:"Param Analysis Rules"}),"\n",(0,t.jsx)(n.p,{children:"If a param is not declared with any param mark, the following rule would apply to parse it:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"If the param name appears in route path, it is interpreted as a path param."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["If the param type is a subclass of ",(0,t.jsx)(n.code,{children:"msgspec.Struct"}),", it is interpreted as a body param."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"If the param type is registered in the route graph, or is a lihil-primitive type, it will be interpered as a dependency and will be resolved by lihil"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Otherise, it is interpreted as a query param."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from lihil import Route, Payload, Use, EventBus\n\nuser_route = Route("/users/{user_id}")\n\nclass UserUpdate(Payload): ...\nclass Engine: ...\nclass Cache: ...\n\nuser_route.factory(Cache)\n\n@user_route.put\nasync def update_user(user_id: str, engine: Use[Engine], cache: Cache, bus: EventBus):\n    return "ok"\n'})}),"\n",(0,t.jsx)(n.p,{children:"In this example:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"user_id"})," appears in the route path, so it is a path param"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"engine"})," is annotated with the ",(0,t.jsx)(n.code,{children:"Use"})," mark, so it is a dependency"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"cache"})," is registered in the user_route, so it is also a dependency"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"bus"})," is a lihil-builtin type, it is therefore a dependency as well."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Only ",(0,t.jsx)(n.code,{children:"user_id"})," needs to be provided by the client request, rest will be resolved by lihil."]}),"\n",(0,t.jsxs)(n.p,{children:["Since return param is not declared, ",(0,t.jsx)(n.code,{children:'"ok"'})," will be serialized as json ",(0,t.jsx)(n.code,{children:"'\"ok\"'"}),", status code will be ",(0,t.jsx)(n.code,{children:"200"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"data-validation",children:"Data validation"}),"\n",(0,t.jsx)(n.p,{children:"lihil provide you data validation functionalities out of the box using msgspec."}),"\n",(0,t.jsx)(n.h3,{id:"constraints",children:"Constraints"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["You might combine ",(0,t.jsx)(n.code,{children:"typing.Annotated"})," and ",(0,t.jsx)(n.code,{children:"msgspec.Meta"})," to put constraints on params,"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'all_users = Route("/users")\n\n@all_users.get\nasync def get_users(numers: Annotated[int, msgspec.Meta(gt=0)]):\n    ...\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Here ",(0,t.jsx)(n.code,{children:"get_user"})," expects a query param ",(0,t.jsx)(n.code,{children:"numers"}),", an integer with value greater than ",(0,t.jsx)(n.code,{children:"0"}),"."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Constraints with structual data"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from typing import Annotated\n\nfrom lihil import Payload\nfrom msgspec import Meta\n\nUnixName = Annotated[\n    str, Meta(min_length=1, max_length=32, pattern="^[a-z_][a-z0-9_-]*$")\n]\n\nclass User(Payload):\n    name: UnixName\n    groups: Annotated[set[UnixName], Meta(max_length=16)] = set()\n    cpu_limit: Annotated[float, Meta(ge=0.1, le=8)] = 1\n    mem_limit: Annotated[int, Meta(ge=256, le=8192)] = 1024\n\n@all_users.post\nasync def create_user(user: User): ...\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Here ",(0,t.jsx)(n.code,{children:"create_user"})," expects a body param ",(0,t.jsx)(n.code,{children:"user"}),", a structual data where each field has constraints."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Constraints with supported types"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Checkout ",(0,t.jsx)(n.a,{href:"https://jcristharif.com/msgspec/constraints.html",children:"msgspec constraints"})," for more details on specific constraints that you can set on different types."]}),"\n",(0,t.jsx)(n.h3,{id:"return-marks",children:"Return Marks"}),"\n",(0,t.jsxs)(n.p,{children:["Often you would like to change the status code, or content type of your endpoint,  to do so, you can use one or a combination of several ",(0,t.jsx)(n.code,{children:"return marks"}),". for example, to change stauts code:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from lihil import Resp, status\n\nasync def create_user(user: UserData, engine: Engine) -> Resp[UserDB, status.Created]:\n    ...\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Now ",(0,t.jsx)(n.code,{children:"create_user"})," would return a status code ",(0,t.jsx)(n.code,{children:"201"}),", instead of the default ",(0,t.jsx)(n.code,{children:"200"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"There are several other return marks you might want to use:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Json[T]"})," for response with content-type ",(0,t.jsx)(n.code,{children:"application/json"})]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Endpoints are assumed to return ",(0,t.jsx)(n.code,{children:"Json[T]"})," by default, ",(0,t.jsx)(n.code,{children:"async def f() -> str"})," is the same as  ",(0,t.jsx)(n.code,{children:"async def f() -> Json[str]"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Stream[T]"})," for server sent event with content-type ",(0,t.jsx)(n.code,{children:"text/event-stream"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Text"})," for response with content-type ",(0,t.jsx)(n.code,{children:"text/plain"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"HTML"})," for response with content-type ",(0,t.jsx)(n.code,{children:"text/html"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Empty"})," for empty response"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"You can use these return marks just like plain python return type hint"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from lihil import Json\n\nasync def demo() -> Json[list[int]]: ...\n"})}),"\n",(0,t.jsxs)(n.p,{children:["return marks have no runtime/typing effect outside of lihil, your type checker would treat ",(0,t.jsx)(n.code,{children:"Json[T]"})," as ",(0,t.jsx)(n.code,{children:"T"}),"."]}),"\n",(0,t.jsx)(n.h4,{id:"response-with-status-code",children:"Response with status code"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Resp[T, 200]"})," for response with status code ",(0,t.jsx)(n.code,{children:"200"}),". where ",(0,t.jsx)(n.code,{children:"T"})," can be anything json serializable, or another return mark."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["For instance, in the ",(0,t.jsx)(n.code,{children:"create_user"})," example, we use ",(0,t.jsx)(n.code,{children:"Resp[UserDB, status.Created]"})," to declare our return type, here ",(0,t.jsx)(n.code,{children:"T"})," is ",(0,t.jsx)(n.code,{children:"UserDB"}),"."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["By default, the return convert is json-serialized, so that it is equiavlent to ",(0,t.jsx)(n.code,{children:"Resp[Json[UserDB], status.Created]"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["If you would like to return a response with content type ",(0,t.jsx)(n.code,{children:"text/html"}),", you might use ",(0,t.jsx)(n.code,{children:"HTML"})]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'async def hello() -> HTML:\n    return "<p>hello, world!</p>"\n'})}),"\n",(0,t.jsx)(n.h4,{id:"return-union",children:"Return Union"}),"\n",(0,t.jsxs)(n.p,{children:["it is valid to return union of multiple types, they will be shown as ",(0,t.jsx)(n.code,{children:"anyOf"})," schemas in the open api specification."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"async def create_user() -> User | TemporaryUser: ...\n"})}),"\n",(0,t.jsx)(n.h4,{id:"custom-encoderdecoder",children:"Custom Encoder/Decoder"}),"\n",(0,t.jsxs)(n.p,{children:["You can also use your own customized encoder/decoder for request params and function return.\nTo use them, annotate your param type with ",(0,t.jsx)(n.code,{children:"CustomDecoder"})," and your return type with ",(0,t.jsx)(n.code,{children:"CustomEncoder"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from lihil.di import CustomEncoder, CustomDecoder\n\nuser_route = Route(/users/{user_id})\n\n@user_route\nasync def get_user(\n    user_id: Annotated[str, CustomDecoder(decode_user_id)]\n) -> Annotated[str, CustomEncoder(encode_user_id)]:\n    return user_id\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def decoder[T](param: str | bytes) -> T: ...\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"decoder"})," should expect a single param with type either ",(0,t.jsx)(n.code,{children:"str"}),", for non-body param, or ",(0,t.jsx)(n.code,{children:"bytes"}),", for body param, and returns required param type, in the ",(0,t.jsx)(n.code,{children:"decode_user_id"})," case, it is ",(0,t.jsx)(n.code,{children:"str"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def encoder[T](param: T) -> bytes: ...\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"encoder"})," should expect a single param with any type that the endpoint function returns, in the ",(0,t.jsx)(n.code,{children:"encode_user_id"})," case, it is ",(0,t.jsx)(n.code,{children:"str"}),", and returns bytes."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"properties",children:"Properties"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Provide extra meta data of endpoint through route decorator."}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"@router.get(errors=[UserNotFoundError, UserInactiveError])\nasync get_user(user_id: str): ...\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Endpoint can have these properties:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'errors: Sequence[type[DetailBase[Any]]] | type[DetailBase[Any]]\n"Errors that might be raised from the current `endpoint`. These will be treated as responses and displayed in OpenAPI documentation."\nin_schema: bool\n"Whether to include this endpoint inside openapi docs"\nto_thread: bool\n"Whether this endpoint should be run wihtin a separate thread, only apply to sync function"\nscoped: Literal[True] | None\n"Whether current endpoint should be scoped"\nauth_scheme: AuthBase | None\n"Auth Scheme for access control"\ntags: Sequence[str] | None\n"OAS tag, endpoints with the same tag will be grouped together"\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"scoped"}),": if an endpoint requires any dependency that is an async context manager, or its factory returns an async generator, the endpoint would be scoped, and setting scoped to None won't change that, however, for an endpoint that is not scoped, setting ",(0,t.jsx)(n.code,{children:"scoped=True"})," would make it scoped."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Provide a properties for every endpoint in the route:"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"You might provide default properties when intialize a route,"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from lihil.routing import Route, EndpointProps\n\ndefault_props = EndpointProps(errors=[UserNotFoundError, UserInactiveError])\nprop_route = Route(props=default_props)\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Here ",(0,t.jsx)(n.code,{children:"default_props"})," would be applied to every endpoint added to ",(0,t.jsx)(n.code,{children:"prop_route"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["endpoint properties provided via route decorator like ",(0,t.jsx)(n.code,{children:"route.get"})," would override roperties provided by route."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>d,x:()=>o});var r=s(6540);const t={},i=r.createContext(t);function d(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);