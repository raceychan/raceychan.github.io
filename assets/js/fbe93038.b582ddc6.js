"use strict";(self.webpackChunkblogs=self.webpackChunkblogs||[]).push([[1133],{8453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>r});var o=n(6540);const s={},i=o.createContext(s);function l(e){const t=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),o.createElement(i.Provider,{value:t},e.children)}},8800:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>r,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"testing","title":"Testing","description":"Lihil provide you two techniques for testing, TestClient and LocalClient","source":"@site/docs/testing.md","sourceDirName":".","slug":"/testing","permalink":"/docs/testing","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/testing.md","tags":[],"version":"current","frontMatter":{"title":"Testing"},"sidebar":"tutorialSidebar","previous":{"title":"Mini Course","permalink":"/docs/minicourse"}}');var s=n(4848),i=n(8453);const l={title:"Testing"},r="Testing",a={},c=[{value:"<code>TestClient</code>",id:"testclient",level:2},{value:"<code>LocalClient</code>",id:"localclient",level:2},{value:"Test any function as if it were an endpoint:",id:"test-any-function-as-if-it-were-an-endpoint",level:3},{value:"Test a complex flow with LocalCLient",id:"test-a-complex-flow-with-localclient",level:3}];function d(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"testing",children:"Testing"})}),"\n",(0,s.jsxs)(t.p,{children:["Lihil provide you two techniques for testing, ",(0,s.jsx)(t.code,{children:"TestClient"})," and ",(0,s.jsx)(t.code,{children:"LocalClient"})]}),"\n",(0,s.jsx)(t.h2,{id:"testclient",children:(0,s.jsx)(t.code,{children:"TestClient"})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"TestClient"})," provide you something that is close to manually constructing a request as client and post it to your server."]}),"\n",(0,s.jsxs)(t.p,{children:["For integration testing where each request should go through every part of your application, ",(0,s.jsx)(t.code,{children:"TestClient"})," keep your test close to user behavior."]}),"\n",(0,s.jsxs)(t.p,{children:["Note that to use ",(0,s.jsx)(t.code,{children:"TestClient"}),", you would need to install ",(0,s.jsx)(t.code,{children:"httpx"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"localclient",children:(0,s.jsx)(t.code,{children:"LocalClient"})}),"\n",(0,s.jsxs)(t.p,{children:["if you want something less verbose and with smaller granularity, you can check out ",(0,s.jsx)(t.code,{children:"LocalClient"}),","]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"LocalClient"})," is more a test helper than a full-fledged request client as opposed to ",(0,s.jsx)(t.code,{children:"TestClient"}),", you might use it to call ",(0,s.jsx)(t.code,{children:"Lihil"})," instance, ",(0,s.jsx)(t.code,{children:"Route"}),", and ",(0,s.jsx)(t.code,{children:"Endpoint"})," locally in a fast and ergonomic manner."]}),"\n",(0,s.jsx)(t.h3,{id:"test-any-function-as-if-it-were-an-endpoint",children:"Test any function as if it were an endpoint:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'from lihil import LocalClient\n\nasync def test_query_with_default():\n    async def func(name: tuple[str, ...]) -> Empty:\n        assert name == ("aloha",)\n\n    lc = LocalClient()\n\n    resp = await lc.call_endpoint(lc.make_endpoint(func))\n    await resp.body()\n'})}),"\n",(0,s.jsx)(t.h3,{id:"test-a-complex-flow-with-localclient",children:"Test a complex flow with LocalCLient"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'async def test_endpoint_login_and_validate(testroute: Route, lc: LocalClient):\n    from lihil.config import lhl_set_config\n\n    async def get_me(token: JWTAuth[UserProfile]) -> Resp[Text, status.OK]:\n        assert token.user_id == "1" and token.user_name == "2"\n        return "ok"\n\n    async def login_get_token(login_form: OAuthLoginForm) -> JWTAuth[UserProfile]:\n        return UserProfile(user_id="1", user_name="2")\n\n    testroute.get(auth_scheme=OAuth2PasswordFlow(token_url="token"))(get_me)\n    testroute.post(login_get_token)\n    lhl_set_config(\n        app_config=AppConfig(\n            security=SecurityConfig(jwt_secret="mysecret", jwt_algorithms=["HS256"])\n        )\n    )\n    testroute.setup()\n\n    login_ep = testroute.get_endpoint(login_get_token)\n\n    res = await lc.submit_form(\n        login_ep, form_data={"username": "user", "password": "test"}\n    )\n\n    token_data = await res.json()\n\n    token_type, token = token_data["token_type"], token_data["access_token"]\n    token_type: str\n\n    lc.update_headers({"Authorization": f"{token_type.capitalize()} {token}"})\n\n    meep = testroute.get_endpoint(get_me)\n\n    res = await lc(meep)\n\n    assert res.status_code == 200\n    assert await res.text() == "ok"\n'})})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);