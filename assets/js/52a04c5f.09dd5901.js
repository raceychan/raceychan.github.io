"use strict";(self.webpackChunkblogs=self.webpackChunkblogs||[]).push([[3735],{4880:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>t,default:()=>p,frontMatter:()=>s,metadata:()=>l,toc:()=>c});const l=JSON.parse('{"id":"http/config","title":"Config","description":"Application configuration is a common yet tricky problem, especially in real-world projects.","source":"@site/docs/http/config.md","sourceDirName":"http","slug":"/http/config","permalink":"/docs/http/config","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"websocket","permalink":"/docs/http/websocket"},"next":{"title":"error-handling","permalink":"/docs/http/error-handling"}}');var o=i(74848),r=i(28453);const s={},t="Config",a={},c=[{value:"Config Loading &amp; Parsing",id:"config-loading--parsing",level:2},{value:"Set Config Manually",id:"set-config-manually",level:2},{value:"Calling without arguments resets to the default:",id:"calling-without-arguments-resets-to-the-default",level:3},{value:"Get Current Config",id:"get-current-config",level:2},{value:"Extending AppConfig",id:"extending-appconfig",level:2},{value:"Auto generated command line arguments",id:"auto-generated-command-line-arguments",level:2},{value:"Using Other Config Schemas (e.g., Pydantic)",id:"using-other-config-schemas-eg-pydantic",level:2},{value:"Example Config File (config.toml)",id:"example-config-file-configtoml",level:2},{value:"Command-line Overrides",id:"command-line-overrides",level:2},{value:"AppConfig Interface",id:"appconfig-interface",level:2},{value:"Summary",id:"summary",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"config",children:"Config"})}),"\n",(0,o.jsx)(n.p,{children:"Application configuration is a common yet tricky problem, especially in real-world projects."}),"\n",(0,o.jsx)(n.p,{children:"You often need to create dependencies that rely on dynamic settings \u2014 such as setting a database engine's isolation level, or adjusting timeouts based on environment."}),"\n",(0,o.jsx)(n.p,{children:"Lihil provides a unified configuration system that supports multiple sources \u2014 files, environment variables, and CLI arguments \u2014 allowing secure and flexible config management out of the box."}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"config-loading--parsing",children:"Config Loading & Parsing"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"from lihil.config import lhl_read_config, AppConfig\n"})}),"\n",(0,o.jsx)(n.p,{children:"Lihil automatically loads configuration values from the following sources, in order of increasing priority:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"User-provided config files"}),"\n",(0,o.jsx)(n.li,{children:"Environment variables"}),"\n",(0,o.jsx)(n.li,{children:"Command-line arguments"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"This layered approach reflects real-world needs:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Static and public config, such as server ports or logging levels, can go into a versioned file (e.g. settings.toml)."}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Sensitive data, like API keys or database passwords, should come from environment variables to avoid accidental exposure."}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"For temporary overrides, like debugging with a different port or toggling a flag, CLI arguments offer maximum flexibility."}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'config = lhl_read_config("settings.toml", config_type=MyAppConfig)\n'})}),"\n",(0,o.jsx)(n.p,{children:"This automatically reads from all three sources and merges them into one config instance."}),"\n",(0,o.jsx)(n.p,{children:"Notice that you can provide multiple files and they will be read in order."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'config = lhl_read_config("dev.env", "prod.env")\n'})}),"\n",(0,o.jsx)(n.h2,{id:"set-config-manually",children:"Set Config Manually"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"from lihil import AppConfig, Lihil\n\nlhl = Lihil(app_config = AppConfig())\n"})}),"\n",(0,o.jsx)(n.p,{children:"Or use lhl_set_config() directly:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"from lihil.config import lhl_set_config\n\nlhl_set_config(MyConfig())\n"})}),"\n",(0,o.jsx)(n.h3,{id:"calling-without-arguments-resets-to-the-default",children:"Calling without arguments resets to the default:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"lhl_set_config()\n"})}),"\n",(0,o.jsx)(n.h2,{id:"get-current-config",children:"Get Current Config"}),"\n",(0,o.jsxs)(n.p,{children:["Use ",(0,o.jsx)(n.code,{children:"lhl_get_config()"})," to retrieve the active config from anywhere in your app:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"from lihil.config import lhl_get_config\n\nconfig = lhl_get_config()\n"})}),"\n",(0,o.jsx)(n.h2,{id:"extending-appconfig",children:"Extending AppConfig"}),"\n",(0,o.jsx)(n.p,{children:"You can extend AppConfig to define your own settings:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from lihil.app_config import AppConfig\n\nclass MyAppConfig(AppConfig):\n    my_custom_setting: str = "default"\n'})}),"\n",(0,o.jsx)(n.p,{children:"Then load it:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'\nfrom lihil.config import lhl_read_config\n\nconfig = lhl_read_config("settings.toml", config_type=MyAppConfig)\n'})}),"\n",(0,o.jsx)(n.h2,{id:"auto-generated-command-line-arguments",children:"Auto generated command line arguments"}),"\n",(0,o.jsxs)(n.p,{children:["If you extend your config via inheriting from ",(0,o.jsx)(n.code,{children:"AppConfig"}),",\nthe extra properties will also be generated as command line arguments and you can pass them to override."]}),"\n",(0,o.jsx)(n.h2,{id:"using-other-config-schemas-eg-pydantic",children:"Using Other Config Schemas (e.g., Pydantic)"}),"\n",(0,o.jsx)(n.p,{children:"If you use a different validation system like Pydantic, you can parse it yourself and inject it manually:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"\nfrom lihil.config import lhl_set_config, lhl_get_config\n\napp_config = PydanticSettings()\nlhl_set_config(app_config)\n"})}),"\n",(0,o.jsx)(n.h2,{id:"example-config-file-configtoml",children:"Example Config File (config.toml)"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-toml",children:'[lihil]\nis_prod = true\nversion = "1.0.0"\n\n[lihil.server]\nhost = "127.0.0.1"\nport = 9000\n\n[lihil.oas]\ntitle = "My API"\n'})}),"\n",(0,o.jsx)(n.h2,{id:"command-line-overrides",children:"Command-line Overrides"}),"\n",(0,o.jsx)(n.p,{children:"Any field can be overridden via CLI:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"python app.py --is_prod --server.port 8080\n"})}),"\n",(0,o.jsx)(n.h2,{id:"appconfig-interface",children:"AppConfig Interface"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"    class IOASConfig(Protocol):\n    @property\n    def oas_path(self) -> str: ...\n    @property\n    def doc_path(self) -> str: ...\n    @property\n    def title(self) -> str: ...\n    @property\n    def problem_path(self) -> str: ...\n    @property\n    def problem_title(self) -> str: ...\n    @property\n    def version(self) -> str: ...\n\n    class IServerConfig(Protocol):\n    @property\n    def host(self) -> str: ...\n    @property\n    def port(self) -> int: ...\n    @property\n    def workers(self) -> int: ...\n    @property\n    def reload(self) -> bool: ...\n    def asdict(self) -> dict[str, Any]: ...\n\n    class IAppConfig(Protocol):\n    @property\n    def version(self) -> str: ...\n    @property\n    def server(self) -> IServerConfig: ...\n    @property\n    def oas(self) -> IOASConfig: ...\n"})}),"\n",(0,o.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Use ",(0,o.jsx)(n.code,{children:"AppConfig"})," + ",(0,o.jsx)(n.code,{children:"lhl_read_config"})," for most use cases."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Use ",(0,o.jsx)(n.code,{children:"lhl_set_config"})," if you build the config manually (e.g. via Pydantic)."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Call ",(0,o.jsx)(n.code,{children:"lhl_get_config"})," to access the config anywhere."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Sensitive values should go into environment variables."}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Use CLI arguments for fast, local overrides."}),"\n"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>t});var l=i(96540);const o={},r=l.createContext(o);function s(e){const n=l.useContext(r);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),l.createElement(r.Provider,{value:n},e.children)}}}]);