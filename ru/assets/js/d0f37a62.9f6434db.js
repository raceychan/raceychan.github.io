"use strict";(self.webpackChunkblogs=self.webpackChunkblogs||[]).push([[5422],{5422:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/openapi_supabase_debug-b14b387170c10c9d5834a6fdb36b71da.png"},6737:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/security-d9a9ab6a748229087285372cd80631b9.jpg"},8363:e=>{e.exports=JSON.parse('{"permalink":"/ru/blog/lihil-auth","source":"@site/blog/2025-05-26-lihil-auth/content.md","title":"Set Up User Authentication in Minutes \u2014 With or Without a Standalone Database Using lihil-auth","description":"security","date":"2025-05-26T00:00:00.000Z","tags":[{"inline":false,"label":"web development","permalink":"/ru/blog/tags/web-development","description":"Best practices of webdevlopment"},{"inline":false,"label":"authentication","permalink":"/ru/blog/tags/authentication","description":"Authentication and authorization in web applications"}],"readingTime":4.075,"hasTruncateMarker":true,"authors":[{"name":"raceychan","title":"author of lihil, a developer.","url":"https://github.com/raceychan","page":{"permalink":"/ru/blog/authors/raceychan"},"socials":{"x":"https://x.com/raceychan","github":"https://github.com/raceychan"},"imageURL":"https://github.com/raceychan.png","key":"raceychan"}],"frontMatter":{"slug":"lihil-auth","title":"Set Up User Authentication in Minutes \u2014 With or Without a Standalone Database Using lihil-auth","authors":["raceychan"],"tags":["web-development","authentication"],"toc_min_heading_level":2,"toc_max_heading_level":5},"unlisted":false,"prevItem":{"title":"Decorators and Functional programming","permalink":"/ru/blog/decorators-and--functional-programming"},"nextItem":{"title":"What to Do When HTTP Status Codes Don\u2019t Fit Your Business Error","permalink":"/ru/blog/what-to-do-when-http-status-codes-dont-fit-your-business-error"}}')},21037:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/openapi_supabase_routes-b6ba4936c94e5f0ef621019aac6363d8.png"},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var i=t(96540);const s={},a=i.createContext(s);function o(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(a.Provider,{value:n},e.children)}},39696:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var i=t(8363),s=t(74848),a=t(28453);const o={slug:"lihil-auth",title:"Set Up User Authentication in Minutes \u2014 With or Without a Standalone Database Using lihil-auth",authors:["raceychan"],tags:["web-development","authentication"],toc_min_heading_level:2,toc_max_heading_level:5},r=void 0,l={authorsImageUrls:[void 0]},u=[{value:"Supabase Auth in One Line",id:"supabase-auth-in-one-line",level:3},{value:"Full docs: Supabase Plugin Documentation",id:"full-docs-supabase-plugin-documentation",level:4},{value:"Want to use Your Own Database?",id:"want-to-use-your-own-database",level:3},{value:"Basic JWT Authentication Example",id:"basic-jwt-authentication-example",level:4},{value:"Role-Based Authorization Example",id:"role-based-authorization-example",level:4},{value:"Returning Simple String Tokens",id:"returning-simple-string-tokens",level:4},{value:"Full docs: JWT Plugin Documentation",id:"full-docs-jwt-plugin-documentation",level:4},{value:"Installation",id:"installation",level:2},{value:"To use jwt only",id:"to-use-jwt-only",level:3},{value:"To use both jwt and supabase",id:"to-use-both-jwt-and-supabase",level:3}];function h(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"security",src:t(6737).A+"",width:"4576",height:"3051"})}),"\n",(0,s.jsx)(n.p,{children:"As someone who has worked on multiple web projects, I\u2019ve found user authentication to be a recurring pain point. Whether I was integrating a third-party auth provider like Supabase, or worse \u2014 rolling my own auth system \u2014 I often found myself rewriting the same boilerplate:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Configuring JWTs"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Decoding tokens from headers"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Serializing them back"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Hashing passwords"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Validating login credentials"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"And that\u2019s not even touching error handling, route wiring, or OpenAPI documentation."}),"\n",(0,s.jsxs)(n.p,{children:["So I built lihil-auth, a plugin system that makes user authentication a breeze. It supports both third-party platforms like ",(0,s.jsx)(n.code,{children:"Supabase"})," and self-hosted solutions using JWT \u2014 with minimal effort."]}),"\n",(0,s.jsx)(n.h3,{id:"supabase-auth-in-one-line",children:"Supabase Auth in One Line"}),"\n",(0,s.jsx)(n.p,{children:"If you're using Supabase, setting up authentication is as simple as:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from lihil import Lihil\nfrom lihil.plugins.auth.supabase import signin_route_factory, signup_route_factory\n\napp = Lihil()\napp.include_routes(\n    signin_route_factory(route_path="/login"),\n    signup_route_factory(route_path="/signup"),\n)\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Here, ",(0,s.jsx)(n.code,{children:"signin_route_factory"})," and ",(0,s.jsx)(n.code,{children:"signup_route_factory"})," generate the ",(0,s.jsx)(n.code,{children:"/login"})," and ",(0,s.jsx)(n.code,{children:"/signup"})," routes for you, respectively. They handle everything from user registration to login, including password hashing and JWT generation(thanks to supabase)."]}),"\n",(0,s.jsxs)(n.p,{children:["You can customize credential type by configuring ",(0,s.jsx)(n.code,{children:"sign_up_with"})," parameter, where you might want to use ",(0,s.jsx)(n.code,{children:"phone"})," instead of ",(0,s.jsx)(n.code,{children:"email"})," for signing up users."]}),"\n",(0,s.jsx)(n.p,{children:"These routes immediately become available in your OpenAPI docs (/docs), allowing you to explore, debug, and test them interactively(thanks to swagger-ui):"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.img,{alt:"Supabase Routes",src:t(21037).A+"",width:"1736",height:"1078"}),"\n",(0,s.jsx)(n.img,{alt:"Supabase debug",src:t(5422).A+"",width:"1158",height:"1162"})]}),"\n",(0,s.jsx)(n.p,{children:"With just that, you have a ready-to-use login route backed by Supabase."}),"\n",(0,s.jsxs)(n.h4,{id:"full-docs-supabase-plugin-documentation",children:["Full docs: ",(0,s.jsx)(n.a,{href:"https://lihil.cc/docs/advance/plugin/supabase",children:"Supabase Plugin Documentation"})]}),"\n",(0,s.jsx)(n.h3,{id:"want-to-use-your-own-database",children:"Want to use Your Own Database?"}),"\n",(0,s.jsx)(n.p,{children:"No problem. The JWT plugin lets you manage users and passwords your own way, while lihil takes care of encoding/decoding JWTs and injecting them as typed objects."}),"\n",(0,s.jsx)(n.h4,{id:"basic-jwt-authentication-example",children:"Basic JWT Authentication Example"}),"\n",(0,s.jsx)(n.p,{children:"You might want to include public user profile information in your JWT, such as user ID and role.\nso that you don't have to query the database for every request."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from lihil import Payload, Route\nfrom lihil.plugins.auth.jwt import JWTAuthParam, JWTAuthPlugin, JWTConfig\nfrom lihil.plugins.auth.oauth import OAuth2PasswordFlow, OAuthLoginForm\n\nme = Route("/me")\ntoken = Route("/token")\n\njwt_auth_plugin = JWTAuthPlugin(jwt_secret="mysecret", jwt_algorithms="HS256")\n\nclass UserProfile(Struct):\n    user_id: str = field(name="sub")\n    role: Literal["admin", "user"] = "user"\n\n@me.get(auth_scheme=OAuth2PasswordFlow(token_url="token"), plugins=[jwt_auth_plugin.decode_plugin()])\nasync def get_user(profile: Annotated[UserProfile, JWTAuthParam]) -> User:\n    assert profile.role == "user"\n    return User(name="user", email="user@email.com")\n\n@token.post(plugins=[jwt_auth_plugin.encode_plugin(expires_in_s=3600)])\nasync def login_get_token(credentials: OAuthLoginForm) -> UserProfile:\n    return UserProfile(user_id="user123")\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Here we define a ",(0,s.jsx)(n.code,{children:"UserProfile"})," struct that includes the user ID and role, we then might use the ",(0,s.jsx)(n.code,{children:"role"})," to determine access permissions in our application."]}),"\n",(0,s.jsxs)(n.p,{children:["You might wonder if we can trust the ",(0,s.jsx)(n.code,{children:"role"})," field in the JWT. The answer is yes, because the JWT is signed with a secret key, meaning that any information\nencoded in the JWT is ",(0,s.jsx)(n.code,{children:"read-only"})," and cannot be tampered with by the client. If the client tries to modify the JWT, the signature will no longer match, and the server will reject the token."]}),"\n",(0,s.jsx)(n.p,{children:"This also means that you should not include any sensitive information in the JWT, as it can be decoded by anyone who has access to the token."}),"\n",(0,s.jsxs)(n.p,{children:["We then use ",(0,s.jsx)(n.code,{children:"jwt_auth_plugin.decode_plugin"})," to decode the JWT and inject the ",(0,s.jsx)(n.code,{children:"UserProfile"})," into the request handler.\nWhen you return ",(0,s.jsx)(n.code,{children:"UserProfile"})," from ",(0,s.jsx)(n.code,{children:"login_get_token"}),", it will automatically be serialized as a JSON Web Token."]}),"\n",(0,s.jsxs)(n.p,{children:["By default, the JWT would be returned as oauth2 token response, but you can also return it as a simple string if you prefer.\nYou can change this behavior by setting ",(0,s.jsx)(n.code,{children:"scheme_type"})," in ",(0,s.jsx)(n.code,{children:"encode_plugin"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'class OAuth2Token(Base):\n    access_token: str\n    expires_in: int\n    token_type: Literal["Bearer"] = "Bearer"\n    refresh_token: Unset[str] = UNSET\n    scope: Unset[str] = UNSET\n'})}),"\n",(0,s.jsx)(n.p,{children:"The client can receive the JWT and update its header for subsequent requests:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'token_data = await res.json()\ntoken_type, token = token_data["token_type"], token_data["access_token"]\n\nheaders = {"Authorization": f"{token_type.capitalize()} {token}"} # use this header for subsequent requests\n'})}),"\n",(0,s.jsx)(n.h4,{id:"role-based-authorization-example",children:"Role-Based Authorization Example"}),"\n",(0,s.jsx)(n.p,{children:"You can utilize function dependencies to enforce role-based access control in your application."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'def is_admin(profile: Annotated[UserProfile, JWTAuthParam]) -> bool:\n    if profile.role != "admin":\n        raise HTTPException(problem_status=403, detail="Forbidden: Admin access required")\n\n@me.get(auth_scheme=OAuth2PasswordFlow(token_url="token"), plugins=[jwt_auth_plugin.decode_plugin()])\nasync def get_admin_user(profile: Annotated[UserProfile, JWTAuthParam], _: Annotated[bool, use(is_admin)]) -> User:\n    return User(name="user", email="user@email.com")\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Here, for the ",(0,s.jsx)(n.code,{children:"get_admin_user"})," endpoint, we define a function dependency ",(0,s.jsx)(n.code,{children:"is_admin"})," that checks if the user has an admin role. If the user does not have the required role, the request will fail with a 403 Forbidden Error ."]}),"\n",(0,s.jsx)(n.h4,{id:"returning-simple-string-tokens",children:"Returning Simple String Tokens"}),"\n",(0,s.jsxs)(n.p,{children:["In some cases, you might always want to query the database for user information, and you don't need to return a structured object like ",(0,s.jsx)(n.code,{children:"UserProfile"}),". Instead, you can return a simple string value that will be encoded as a JWT."]}),"\n",(0,s.jsxs)(n.p,{children:["If so, you can simply return a string from the ",(0,s.jsx)(n.code,{children:"login_get_token"})," endpoint, and it will be encoded as a JWT automatically:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'@token.post(plugins=[jwt_auth_plugin.encode_plugin(expires_in_s=3600)])\nasync def login_get_token(credentials: OAuthLoginForm) -> str:\n    return "user123"\n'})}),"\n",(0,s.jsxs)(n.h4,{id:"full-docs-jwt-plugin-documentation",children:["Full docs: ",(0,s.jsx)(n.a,{href:"https://lihil.cc/docs/advance/plugin/jwt",children:"JWT Plugin Documentation"})]}),"\n",(0,s.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,s.jsx)(n.h3,{id:"to-use-jwt-only",children:"To use jwt only"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'pip install "lihil[standard]"\n'})}),"\n",(0,s.jsx)(n.h3,{id:"to-use-both-jwt-and-supabase",children:"To use both jwt and supabase"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'pip install "lihil[standard,supabase]"\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.p,{children:["Github: ",(0,s.jsx)(n.a,{href:"https://github.com/raceychan/lihil",children:"lihil"})]}),"\n",(0,s.jsxs)(n.p,{children:["Official Docs: ",(0,s.jsx)(n.a,{href:"https://lihil.cc",children:"lihil.cc"})]})]})}function c(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}}}]);