<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="rss.xsl"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Lihil Official Blog</title>
        <link>https://lihil.cc/blog</link>
        <description>Lihil Official Blog</description>
        <lastBuildDate>Wed, 28 May 2025 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Decorators and Functional programming]]></title>
            <link>https://lihil.cc/blog/decorators-and--functional-programming</link>
            <guid>https://lihil.cc/blog/decorators-and--functional-programming</guid>
            <pubDate>Wed, 28 May 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[lego]]></description>
            <content:encoded><![CDATA[<p><img decoding="async" loading="lazy" alt="lego" src="https://lihil.cc/assets/images/lego-0490433a307831263d3f9192f897ede4.jpg" width="1920" height="2560" class="img_ev3q"></p>
<p>I often see people ask how to "do functional programming in Python"—as if it requires special tools or libraries.</p>
<p>But the truth is, many Python developers are already using functional programming techniques without realizing it. One of the clearest examples is the use of decorators.</p>
<p>Decorators are not only a staple of modern Python codebases but also a practical bridge between traditional imperative programming and the functional programming paradigm.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-essence-of-decorators">The Essence of Decorators<a href="https://lihil.cc/blog/decorators-and--functional-programming#the-essence-of-decorators" class="hash-link" aria-label="Direct link to The Essence of Decorators" title="Direct link to The Essence of Decorators">​</a></h2>
<p>At their core, decorators are higher-order functions: a fundamental concept in functional programming.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-a-higher-order-function">What is a Higher-Order Function?<a href="https://lihil.cc/blog/decorators-and--functional-programming#what-is-a-higher-order-function" class="hash-link" aria-label="Direct link to What is a Higher-Order Function?" title="Direct link to What is a Higher-Order Function?">​</a></h3>
<p>According to Wikipedia, a higher-order function is a function that either(or both):</p>
<ul>
<li>Takes one or more functions as arguments</li>
<li>Returns a function as its result.</li>
</ul>
<p>Let me give a naive example for this</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token keyword" style="color:#81A1C1">from</span><span class="token plain"> typing </span><span class="token keyword" style="color:#81A1C1">import</span><span class="token plain"> Callable</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">dummy</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">func</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> Callable</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> Any</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">-</span><span class="token operator" style="color:#81A1C1">&gt;</span><span class="token plain"> Callable</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> Any</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"> func</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>At first glance, this dummy function seems trivial.</p>
<p>it just returns the function it receives without any modification.</p>
<p>However, with a slight adjustment, we can transform it into something more useful:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token keyword" style="color:#81A1C1">from</span><span class="token plain"> typing </span><span class="token keyword" style="color:#81A1C1">import</span><span class="token plain"> ParamSpec</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> TypeVar</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">P</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> R </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> ParamSpec</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token string" style="color:#A3BE8C">"P"</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> TypeVar</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token string" style="color:#A3BE8C">"R"</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">dummy</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">func</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> Callable</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token plain">P</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> R</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">-</span><span class="token operator" style="color:#81A1C1">&gt;</span><span class="token plain"> Callable</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token plain">P</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> R</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">wrapper</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token operator" style="color:#81A1C1">*</span><span class="token plain">args</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> P</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">args</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">**</span><span class="token plain">kwargs</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> P</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">kwargs</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">-</span><span class="token operator" style="color:#81A1C1">&gt;</span><span class="token plain"> R</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        result </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> func</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token operator" style="color:#81A1C1">*</span><span class="token plain">args</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">**</span><span class="token plain">kwargs</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"> result</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"> wrapper</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This is a decorator! In Python, decorators satisfy both criteria:
they take a function as input and often return a new function(in our example, <code>wrapper</code>) with modified behavior.</p>
<p>So, decorators in Python are not just a convenient syntax—they’re a direct, real-world application of higher-order function concepts.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="functions-as-first-class-citizens">Functions as First-Class Citizens<a href="https://lihil.cc/blog/decorators-and--functional-programming#functions-as-first-class-citizens" class="hash-link" aria-label="Direct link to Functions as First-Class Citizens" title="Direct link to Functions as First-Class Citizens">​</a></h3>
<p>How can Python support decorators so seamlessly? The answer lies in a foundational language feature: functions are first-class citizens.</p>
<p>This means functions in Python can be:</p>
<ul>
<li>
<p>Assigned to variables
we can do inside <code>wrapper</code></p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token plain">new_func </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> func</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">result </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> func</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token operator" style="color:#81A1C1">*</span><span class="token plain">args</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">**</span><span class="token plain">kwargs</span><span class="token punctuation" style="color:#8FBCBB">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p>Passed as arguments
This</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token decorator annotation punctuation" style="color:#8FBCBB">@dummy</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">add</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">a</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">int</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> b</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">int</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">-</span><span class="token operator" style="color:#81A1C1">&gt;</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">int</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"> a </span><span class="token operator" style="color:#81A1C1">+</span><span class="token plain"> b</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>is equivalent to</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token plain">add </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> dummy</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">add</span><span class="token punctuation" style="color:#8FBCBB">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>when we decorate <code>add</code> with <code>dummy</code>, python would automatically passes <code>add</code> as an argument to <code>dummy</code></p>
</li>
<li>
<p>Returned from other functions
Inside <code>dummy</code>, we return <code>wrapper</code> as a value, which is a function defined within <code>dummy</code>.</p>
</li>
<li>
<p>Stored in data structures like lists or dictionaries
we won't dig deep into this, but when dummy is defined, it is stored within module's global namespace, which is a dict under the hood.</p>
</li>
</ul>
<p>In contrast, in some statically typed or older programming languages(say java before java 8), functions are not first-class.</p>
<p>This would break in pre-java8</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token plain">public class Example {</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    public static void callTwice(Function func) {</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        func(); // Error: not a valid function call</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        func();</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    public static void main(String[] args) {</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        callTwice(sayHello); // sayHello isn't a value</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    public static void sayHello() {</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        System.out.println("Hello");</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="therefore">Therefore...<a href="https://lihil.cc/blog/decorators-and--functional-programming#therefore" class="hash-link" aria-label="Direct link to Therefore..." title="Direct link to Therefore...">​</a></h2>
<p>If you've used a decorator like <code>@functools.lru_cache</code>, <code>@app.get</code>, or <code>@login_required</code>, then you've already dipped your toes into functional programming. You’re working with functions that modify or enhance the behavior of other functions—precisely the kind of thing functional programming is all about.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="functional-programming-with-decorators">Functional Programming with Decorators<a href="https://lihil.cc/blog/decorators-and--functional-programming#functional-programming-with-decorators" class="hash-link" aria-label="Direct link to Functional Programming with Decorators" title="Direct link to Functional Programming with Decorators">​</a></h2>
<p>Decorators don't just align with functional programming.</p>
<p>they can enable several important techniques:</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-function-composition">1. Function Composition<a href="https://lihil.cc/blog/decorators-and--functional-programming#1-function-composition" class="hash-link" aria-label="Direct link to 1. Function Composition" title="Direct link to 1. Function Composition">​</a></h3>
<p>In functional programming, composition is the idea of building complex behavior by combining simple functions. Decorators can be used to layer transformations or validations around a core function, much like composing small functions into a pipeline.</p>
<p>You can chain multiple decorators to achieve a composition-like behavior, each adding behavior before or after the main function is run.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token decorator annotation punctuation" style="color:#8FBCBB">@decor1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token decorator annotation punctuation" style="color:#8FBCBB">@decor2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token decorator annotation punctuation" style="color:#8FBCBB">@decor3</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">decor</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">a</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">int</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> b</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">int</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">-</span><span class="token operator" style="color:#81A1C1">&gt;</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">int</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This pattern is powerful, but it comes with some caveats:</p>
<ul>
<li>
<p>Signature incompatibility:
If one decorator modifies the function’s signature (e.g., changes the number or type of arguments), it may break compatibility with other decorators in the chain.For decorators that need to inspect the function signature, if one decorator does not preserve it, the others may break.</p>
</li>
<li>
<p>Order sensitivity: The order in which decorators are applied matters. For example, using <code>@abc.abstractmethod</code> on a method that has already been wrapped by another decorator may lead to incorrect behavior or errors.</p>
</li>
<li>
<p>Readability: As the number of decorators grows, it becomes harder to understand what the function actually does at a glance.</p>
</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="example-from-lihil">Example from lihil<a href="https://lihil.cc/blog/decorators-and--functional-programming#example-from-lihil" class="hash-link" aria-label="Direct link to Example from lihil" title="Direct link to Example from lihil">​</a></h4>
<p>In lihil, an endpoint can receive multiple plugins (which are essentially decorators) using a cleaner and more structured syntax:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token decorator annotation punctuation" style="color:#8FBCBB">@user</span><span class="token decorator annotation punctuation" style="color:#8FBCBB">.</span><span class="token decorator annotation punctuation" style="color:#8FBCBB">post</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">plugins</span><span class="token operator" style="color:#81A1C1">=</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token plain">plugin1</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> plugin2</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> plugin3</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">async</span><span class="token plain"> </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">create_user</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Under the hood, lihil applies these plugins in sequence by decorating the endpoint function:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token keyword" style="color:#81A1C1">for</span><span class="token plain"> plugin </span><span class="token keyword" style="color:#81A1C1">in</span><span class="token plain"> plugins</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    func </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> plugin</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">func</span><span class="token punctuation" style="color:#8FBCBB">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This approach maintains the core idea of composition while improving clarity and control over the decoration process.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-currying">2. Currying<a href="https://lihil.cc/blog/decorators-and--functional-programming#2-currying" class="hash-link" aria-label="Direct link to 2. Currying" title="Direct link to 2. Currying">​</a></h3>
<p>Currying is the process of transforming a function that takes multiple arguments into a sequence of functions that each take a single argument. While Python doesn't support automatic currying like Haskell, you can manually simulate currying using decorators—returning nested functions that capture arguments through closure.</p>
<p>This is especially powerful when writing configuration-like decorators, where parameters are fixed upfront and later used to modify a function's behavior.</p>
<p>Consider the following example:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token plain"> </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">curry</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">func</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> Callable</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> R</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">*</span><span class="token plain">curry_args</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> Any</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">**</span><span class="token plain">curry_kwargs</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> Any</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">     </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">wrapper</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token operator" style="color:#81A1C1">*</span><span class="token plain">args</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> Any</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">**</span><span class="token plain">kwargs</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> Any</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">-</span><span class="token operator" style="color:#81A1C1">&gt;</span><span class="token plain"> R</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">         </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"> func</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token operator" style="color:#81A1C1">*</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">curry_args </span><span class="token operator" style="color:#81A1C1">+</span><span class="token plain"> args</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">**</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">curry_kwargs </span><span class="token operator" style="color:#81A1C1">|</span><span class="token plain"> kwargs</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">     </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"> wrapper</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Here, curry is a higher-order function that returns a new function (wrapper) with some arguments pre-filled. These pre-filled values are remembered through closure, and the remaining arguments can be supplied later when the returned function is called.</p>
<p>To demonstrate how this works, imagine a simple subtraction function:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">sub</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">a</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">int</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> b</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">int</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">-</span><span class="token operator" style="color:#81A1C1">&gt;</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">int</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"> a </span><span class="token operator" style="color:#81A1C1">-</span><span class="token plain"> b</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">sub_five </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> curry</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">sub</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> b</span><span class="token operator" style="color:#81A1C1">=</span><span class="token number" style="color:#81A1C1">5</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">assert</span><span class="token plain"> sub_five</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">a</span><span class="token operator" style="color:#81A1C1">=</span><span class="token number" style="color:#81A1C1">8</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">==</span><span class="token plain"> </span><span class="token number" style="color:#81A1C1">3</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>We can use curry to fix one of the arguments, say b = 5, creating a new function that subtracts 5 from any input</p>
<p>By pre-binding the second argument <code>b</code>, we've effectively turned <code>sub(a, b)</code> into a function that only needs <code>a</code>. This mirrors the essence of currying in functional programming—progressively transforming a multi-argument function into a chain of single-argument calls.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="3-closures">3. Closures<a href="https://lihil.cc/blog/decorators-and--functional-programming#3-closures" class="hash-link" aria-label="Direct link to 3. Closures" title="Direct link to 3. Closures">​</a></h3>
<p>A closure occurs when a function "remembers" variables from the scope in which it was created, even after that scope has finished executing. This is how decorators store context—whether it's a permission requirement, a configuration flag, or a runtime condition.</p>
<p>Closures are what make decorators stateful, enabling powerful behaviors like caching, logging, or retry logic without modifying the function’s internal logic. They allow decorators to wrap and extend functions while retaining information across calls.</p>
<p>let's take a look at a real-world example: Python’s built-in lru_cache decorator from the functools module.</p>
<p>Internally, it uses a closure to remember the function’s arguments and their corresponding results.</p>
<p>Here's a simplified version of its implementation (based on Python 3.12), with some details omitted to highlight the key point:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token plain"> </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">_lru_cache_wrapper</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">user_function</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> maxsize</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> typed</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> _CacheInfo</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">     </span><span class="token comment" style="color:#4C566A;font-style:italic"># Constants shared by all lru cache instances:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">     sentinel </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">object</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain">          </span><span class="token comment" style="color:#4C566A;font-style:italic"># unique object used to signal cache misses</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">     make_key </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> _make_key         </span><span class="token comment" style="color:#4C566A;font-style:italic"># build a key from the function arguments</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">     cache </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#8FBCBB">{</span><span class="token punctuation" style="color:#8FBCBB">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">     hits </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> misses </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> </span><span class="token number" style="color:#81A1C1">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">      </span><span class="token comment" style="color:#4C566A;font-style:italic"># case when maxsize is None</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">      </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">wrapper</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token operator" style="color:#81A1C1">*</span><span class="token plain">args</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">**</span><span class="token plain">kwds</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">          </span><span class="token comment" style="color:#4C566A;font-style:italic"># Simple caching without ordering or size limit</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">          </span><span class="token keyword" style="color:#81A1C1">nonlocal</span><span class="token plain"> hits</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> misses</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">          key </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> make_key</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">args</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> kwds</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> typed</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">          result </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> cache_get</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">key</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> sentinel</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">          </span><span class="token keyword" style="color:#81A1C1">if</span><span class="token plain"> result </span><span class="token keyword" style="color:#81A1C1">is</span><span class="token plain"> </span><span class="token keyword" style="color:#81A1C1">not</span><span class="token plain"> sentinel</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">              hits </span><span class="token operator" style="color:#81A1C1">+=</span><span class="token plain"> </span><span class="token number" style="color:#81A1C1">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">              </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"> result</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">          misses </span><span class="token operator" style="color:#81A1C1">+=</span><span class="token plain"> </span><span class="token number" style="color:#81A1C1">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">          result </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> user_function</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token operator" style="color:#81A1C1">*</span><span class="token plain">args</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">**</span><span class="token plain">kwds</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">          cache</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token plain">key</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> result</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">          </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"> result</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Here, the inner function <code>wrapper</code> forms a closure over several variables—<code>cache</code>, <code>hits</code>, <code>misses</code>, and <code>make_key</code>(a util function).</p>
<p>These variables live outside the wrapper function, but remain accessible to it even after <code>_lru_cache_wrapper</code> has finished executing. As a result, wrapper is able to remember past function calls and cache results accordingly.</p>
<p>This technique enables powerful optimizations like memoization, all while keeping the decorator’s logic entirely separate from the original function body.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="other-functional-programming-techniques-in-python">Other Functional Programming Techniques in Python<a href="https://lihil.cc/blog/decorators-and--functional-programming#other-functional-programming-techniques-in-python" class="hash-link" aria-label="Direct link to Other Functional Programming Techniques in Python" title="Direct link to Other Functional Programming Techniques in Python">​</a></h3>
<p>Beyond decorators, Python supports many functional idioms that align with the same principles:</p>
<ol>
<li>
<p>Comprehensions
list, dict, and set comprehensions are Python’s upgrades to <code>map</code> and <code>filter</code>, expressed in a concise and readable way. They're pure, declarative, and avoid side effects.</p>
</li>
<li>
<p>Generators
Generators support lazy evaluation, a key technique in functional programming. Using yield, Python functions can produce a sequence of results over time, supporting pipelines and memory-efficient data flows.</p>
</li>
<li>
<p>Built-in Functions
Python's standard library includes functional tools like map, filter, reduce, any, all, and functools.partial. These utilities operate on data immutably and often use higher-order functions—core values of the functional paradigm.</p>
</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="turning-a-utility-into-a-decorator">Turning a Utility into a Decorator<a href="https://lihil.cc/blog/decorators-and--functional-programming#turning-a-utility-into-a-decorator" class="hash-link" aria-label="Direct link to Turning a Utility into a Decorator" title="Direct link to Turning a Utility into a Decorator">​</a></h3>
<p>Let's write some functions that illustrate these concepts.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token plain">T </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> TypeVar</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token string" style="color:#A3BE8C">"T"</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">is_even</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">x</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">int</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">-</span><span class="token operator" style="color:#81A1C1">&gt;</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">bool</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">x </span><span class="token operator" style="color:#81A1C1">%</span><span class="token plain"> </span><span class="token number" style="color:#81A1C1">2</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">==</span><span class="token plain"> </span><span class="token number" style="color:#81A1C1">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">larger_than</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">x</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">int</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> threshold</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">int</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">-</span><span class="token operator" style="color:#81A1C1">&gt;</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">bool</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"> x </span><span class="token operator" style="color:#81A1C1">&gt;</span><span class="token plain"> threshold</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Now we define a utility function that checks whether a value satisfies a list of conditions. This uses a generator expression and <code>all()</code> for declarative, short-circuiting evaluation:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">meets_conditions</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token operator" style="color:#81A1C1">*</span><span class="token plain">conditions</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> Callable</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token plain">T</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">bool</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> target</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> T</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">-</span><span class="token operator" style="color:#81A1C1">&gt;</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">bool</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">all</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">condition</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">target</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token keyword" style="color:#81A1C1">for</span><span class="token plain"> condition </span><span class="token keyword" style="color:#81A1C1">in</span><span class="token plain"> conditions</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token comment" style="color:#4C566A;font-style:italic"># generator comprehension</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Finally, we wrap everything into a decorator. It accepts multiple conditions and applies them to the result of a function. We also use <code>functools.partial</code> to pre-fill parameters—a form of currying:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">check_result</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token operator" style="color:#81A1C1">*</span><span class="token plain">conditions</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> Callable</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token plain">T</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">bool</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">decorator</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">func</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> Callable</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token plain">P</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> T</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">wrapper</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token operator" style="color:#81A1C1">*</span><span class="token plain">args</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> P</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">args</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">**</span><span class="token plain">kwargs</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> P</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">kwargs</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">-</span><span class="token operator" style="color:#81A1C1">&gt;</span><span class="token plain"> T</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">            result </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> func</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token operator" style="color:#81A1C1">*</span><span class="token plain">args</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">**</span><span class="token plain">kwargs</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">            </span><span class="token keyword" style="color:#81A1C1">if</span><span class="token plain"> </span><span class="token keyword" style="color:#81A1C1">not</span><span class="token plain"> meets_conditions</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token operator" style="color:#81A1C1">*</span><span class="token plain">conditions</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> target</span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain">result</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">                </span><span class="token keyword" style="color:#81A1C1">raise</span><span class="token plain"> ValueError</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token string" style="color:#A3BE8C">"Return value did not meet required conditions"</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">            </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"> result</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"> wrapper</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"> decorator</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token decorator annotation punctuation" style="color:#8FBCBB">@check_result</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">is_even</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> partial</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">larger_than</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> threshold</span><span class="token operator" style="color:#81A1C1">=</span><span class="token number" style="color:#81A1C1">5</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">add</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">a</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">int</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> b</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">int</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">-</span><span class="token operator" style="color:#81A1C1">&gt;</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">int</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"> a </span><span class="token operator" style="color:#81A1C1">+</span><span class="token plain"> b</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">assert</span><span class="token plain"> add</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token number" style="color:#81A1C1">3</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> </span><span class="token number" style="color:#81A1C1">5</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">==</span><span class="token plain"> </span><span class="token number" style="color:#81A1C1">8</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">add</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token number" style="color:#81A1C1">1</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> </span><span class="token number" style="color:#81A1C1">1</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token comment" style="color:#4C566A;font-style:italic"># This would fail</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">add</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token number" style="color:#81A1C1">4</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> </span><span class="token number" style="color:#81A1C1">3</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token comment" style="color:#4C566A;font-style:italic"># This would fail too</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content:encoded>
            <category>python</category>
        </item>
        <item>
            <title><![CDATA[Set Up User Authentication in Minutes — With or Without a Standalone Database Using lihil-auth]]></title>
            <link>https://lihil.cc/blog/lihil-auth</link>
            <guid>https://lihil.cc/blog/lihil-auth</guid>
            <pubDate>Mon, 26 May 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[security]]></description>
            <content:encoded><![CDATA[<p><img decoding="async" loading="lazy" alt="security" src="https://lihil.cc/assets/images/security-d9a9ab6a748229087285372cd80631b9.jpg" width="4576" height="3051" class="img_ev3q"></p>
<p>As someone who has worked on multiple web projects, I’ve found user authentication to be a recurring pain point. Whether I was integrating a third-party auth provider like Supabase, or worse — rolling my own auth system — I often found myself rewriting the same boilerplate:</p>
<ul>
<li>
<p>Configuring JWTs</p>
</li>
<li>
<p>Decoding tokens from headers</p>
</li>
<li>
<p>Serializing them back</p>
</li>
<li>
<p>Hashing passwords</p>
</li>
<li>
<p>Validating login credentials</p>
</li>
</ul>
<p>And that’s not even touching error handling, route wiring, or OpenAPI documentation.</p>
<p>So I built lihil-auth, a plugin system that makes user authentication a breeze. It supports both third-party platforms like <code>Supabase</code> and self-hosted solutions using JWT — with minimal effort.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="supabase-auth-in-one-line">Supabase Auth in One Line<a href="https://lihil.cc/blog/lihil-auth#supabase-auth-in-one-line" class="hash-link" aria-label="Direct link to Supabase Auth in One Line" title="Direct link to Supabase Auth in One Line">​</a></h3>
<p>If you're using Supabase, setting up authentication is as simple as:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token keyword" style="color:#81A1C1">from</span><span class="token plain"> lihil </span><span class="token keyword" style="color:#81A1C1">import</span><span class="token plain"> Lihil</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">from</span><span class="token plain"> lihil</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">plugins</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">auth</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">supabase </span><span class="token keyword" style="color:#81A1C1">import</span><span class="token plain"> signin_route_factory</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> signup_route_factory</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">app </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> Lihil</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">app</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">include_routes</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    signin_route_factory</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">route_path</span><span class="token operator" style="color:#81A1C1">=</span><span class="token string" style="color:#A3BE8C">"/login"</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    signup_route_factory</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">route_path</span><span class="token operator" style="color:#81A1C1">=</span><span class="token string" style="color:#A3BE8C">"/signup"</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token punctuation" style="color:#8FBCBB">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Here, <code>signin_route_factory</code> and <code>signup_route_factory</code> generate the <code>/login</code> and <code>/signup</code> routes for you, respectively. They handle everything from user registration to login, including password hashing and JWT generation(thanks to supabase).</p>
<p>You can customize credential type by configuring <code>sign_up_with</code> parameter, where you might want to use <code>phone</code> instead of <code>email</code> for signing up users.</p>
<p>These routes immediately become available in your OpenAPI docs (/docs), allowing you to explore, debug, and test them interactively(thanks to swagger-ui):</p>
<p><img decoding="async" loading="lazy" alt="Supabase Routes" src="https://lihil.cc/assets/images/openapi_supabase_routes-b6ba4936c94e5f0ef621019aac6363d8.png" width="1736" height="1078" class="img_ev3q">
<img decoding="async" loading="lazy" alt="Supabase debug" src="https://lihil.cc/assets/images/openapi_supabase_debug-b14b387170c10c9d5834a6fdb36b71da.png" width="1158" height="1162" class="img_ev3q"></p>
<p>With just that, you have a ready-to-use login route backed by Supabase.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="full-docs-supabase-plugin-documentation">Full docs: <a href="https://lihil.cc/docs/advance/plugin/supabase" target="_blank" rel="noopener noreferrer">Supabase Plugin Documentation</a><a href="https://lihil.cc/blog/lihil-auth#full-docs-supabase-plugin-documentation" class="hash-link" aria-label="Direct link to full-docs-supabase-plugin-documentation" title="Direct link to full-docs-supabase-plugin-documentation">​</a></h4>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="want-to-use-your-own-database">Want to use Your Own Database?<a href="https://lihil.cc/blog/lihil-auth#want-to-use-your-own-database" class="hash-link" aria-label="Direct link to Want to use Your Own Database?" title="Direct link to Want to use Your Own Database?">​</a></h3>
<p>No problem. The JWT plugin lets you manage users and passwords your own way, while lihil takes care of encoding/decoding JWTs and injecting them as typed objects.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="basic-jwt-authentication-example">Basic JWT Authentication Example<a href="https://lihil.cc/blog/lihil-auth#basic-jwt-authentication-example" class="hash-link" aria-label="Direct link to Basic JWT Authentication Example" title="Direct link to Basic JWT Authentication Example">​</a></h4>
<p>You might want to include public user profile information in your JWT, such as user ID and role.
so that you don't have to query the database for every request.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token keyword" style="color:#81A1C1">from</span><span class="token plain"> lihil </span><span class="token keyword" style="color:#81A1C1">import</span><span class="token plain"> Payload</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> Route</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">from</span><span class="token plain"> lihil</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">plugins</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">auth</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">jwt </span><span class="token keyword" style="color:#81A1C1">import</span><span class="token plain"> JWTAuthParam</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> JWTAuthPlugin</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> JWTConfig</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">from</span><span class="token plain"> lihil</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">plugins</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">auth</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">oauth </span><span class="token keyword" style="color:#81A1C1">import</span><span class="token plain"> OAuth2PasswordFlow</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> OAuthLoginForm</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">me </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> Route</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token string" style="color:#A3BE8C">"/me"</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">token </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> Route</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token string" style="color:#A3BE8C">"/token"</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">jwt_auth_plugin </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> JWTAuthPlugin</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">jwt_secret</span><span class="token operator" style="color:#81A1C1">=</span><span class="token string" style="color:#A3BE8C">"mysecret"</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> jwt_algorithms</span><span class="token operator" style="color:#81A1C1">=</span><span class="token string" style="color:#A3BE8C">"HS256"</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">class</span><span class="token plain"> </span><span class="token class-name" style="color:#8FBCBB">UserProfile</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">Struct</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    user_id</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">str</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> field</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">name</span><span class="token operator" style="color:#81A1C1">=</span><span class="token string" style="color:#A3BE8C">"sub"</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    role</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> Literal</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token string" style="color:#A3BE8C">"admin"</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> </span><span class="token string" style="color:#A3BE8C">"user"</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> </span><span class="token string" style="color:#A3BE8C">"user"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token decorator annotation punctuation" style="color:#8FBCBB">@me</span><span class="token decorator annotation punctuation" style="color:#8FBCBB">.</span><span class="token decorator annotation punctuation" style="color:#8FBCBB">get</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">auth_scheme</span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain">OAuth2PasswordFlow</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">token_url</span><span class="token operator" style="color:#81A1C1">=</span><span class="token string" style="color:#A3BE8C">"token"</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> plugins</span><span class="token operator" style="color:#81A1C1">=</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token plain">jwt_auth_plugin</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">decode_plugin</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">async</span><span class="token plain"> </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">get_user</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">profile</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> Annotated</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token plain">UserProfile</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> JWTAuthParam</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">-</span><span class="token operator" style="color:#81A1C1">&gt;</span><span class="token plain"> User</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">assert</span><span class="token plain"> profile</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">role </span><span class="token operator" style="color:#81A1C1">==</span><span class="token plain"> </span><span class="token string" style="color:#A3BE8C">"user"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"> User</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">name</span><span class="token operator" style="color:#81A1C1">=</span><span class="token string" style="color:#A3BE8C">"user"</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> email</span><span class="token operator" style="color:#81A1C1">=</span><span class="token string" style="color:#A3BE8C">"user@email.com"</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token decorator annotation punctuation" style="color:#8FBCBB">@token</span><span class="token decorator annotation punctuation" style="color:#8FBCBB">.</span><span class="token decorator annotation punctuation" style="color:#8FBCBB">post</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">plugins</span><span class="token operator" style="color:#81A1C1">=</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token plain">jwt_auth_plugin</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">encode_plugin</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">expires_in_s</span><span class="token operator" style="color:#81A1C1">=</span><span class="token number" style="color:#81A1C1">3600</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">async</span><span class="token plain"> </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">login_get_token</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">credentials</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> OAuthLoginForm</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">-</span><span class="token operator" style="color:#81A1C1">&gt;</span><span class="token plain"> UserProfile</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"> UserProfile</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">user_id</span><span class="token operator" style="color:#81A1C1">=</span><span class="token string" style="color:#A3BE8C">"user123"</span><span class="token punctuation" style="color:#8FBCBB">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Here we define a <code>UserProfile</code> struct that includes the user ID and role, we then might use the <code>role</code> to determine access permissions in our application.</p>
<p>You might wonder if we can trust the <code>role</code> field in the JWT. The answer is yes, because the JWT is signed with a secret key, meaning that any information
encoded in the JWT is <code>read-only</code> and cannot be tampered with by the client. If the client tries to modify the JWT, the signature will no longer match, and the server will reject the token.</p>
<p>This also means that you should not include any sensitive information in the JWT, as it can be decoded by anyone who has access to the token.</p>
<p>We then use <code>jwt_auth_plugin.decode_plugin</code> to decode the JWT and inject the <code>UserProfile</code> into the request handler.
When you return <code>UserProfile</code> from <code>login_get_token</code>, it will automatically be serialized as a JSON Web Token.</p>
<p>By default, the JWT would be returned as oauth2 token response, but you can also return it as a simple string if you prefer.
You can change this behavior by setting <code>scheme_type</code> in <code>encode_plugin</code></p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token keyword" style="color:#81A1C1">class</span><span class="token plain"> </span><span class="token class-name" style="color:#8FBCBB">OAuth2Token</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">Base</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    access_token</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">str</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    expires_in</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">int</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    token_type</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> Literal</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token string" style="color:#A3BE8C">"Bearer"</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> </span><span class="token string" style="color:#A3BE8C">"Bearer"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    refresh_token</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> Unset</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token builtin" style="color:#8FBCBB">str</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> UNSET</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    scope</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> Unset</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token builtin" style="color:#8FBCBB">str</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> UNSET</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The client can receive the JWT and update its header for subsequent requests:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token plain">token_data </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> </span><span class="token keyword" style="color:#81A1C1">await</span><span class="token plain"> res</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">json</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">token_type</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> token </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> token_data</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token string" style="color:#A3BE8C">"token_type"</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> token_data</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token string" style="color:#A3BE8C">"access_token"</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">headers </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#8FBCBB">{</span><span class="token string" style="color:#A3BE8C">"Authorization"</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token string-interpolation string" style="color:#A3BE8C">f"</span><span class="token string-interpolation interpolation punctuation" style="color:#8FBCBB">{</span><span class="token string-interpolation interpolation">token_type</span><span class="token string-interpolation interpolation punctuation" style="color:#8FBCBB">.</span><span class="token string-interpolation interpolation">capitalize</span><span class="token string-interpolation interpolation punctuation" style="color:#8FBCBB">(</span><span class="token string-interpolation interpolation punctuation" style="color:#8FBCBB">)</span><span class="token string-interpolation interpolation punctuation" style="color:#8FBCBB">}</span><span class="token string-interpolation string" style="color:#A3BE8C"> </span><span class="token string-interpolation interpolation punctuation" style="color:#8FBCBB">{</span><span class="token string-interpolation interpolation">token</span><span class="token string-interpolation interpolation punctuation" style="color:#8FBCBB">}</span><span class="token string-interpolation string" style="color:#A3BE8C">"</span><span class="token punctuation" style="color:#8FBCBB">}</span><span class="token plain"> </span><span class="token comment" style="color:#4C566A;font-style:italic"># use this header for subsequent requests</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="role-based-authorization-example">Role-Based Authorization Example<a href="https://lihil.cc/blog/lihil-auth#role-based-authorization-example" class="hash-link" aria-label="Direct link to Role-Based Authorization Example" title="Direct link to Role-Based Authorization Example">​</a></h4>
<p>You can utilize function dependencies to enforce role-based access control in your application.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">is_admin</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">profile</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> Annotated</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token plain">UserProfile</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> JWTAuthParam</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">-</span><span class="token operator" style="color:#81A1C1">&gt;</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">bool</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">if</span><span class="token plain"> profile</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">role </span><span class="token operator" style="color:#81A1C1">!=</span><span class="token plain"> </span><span class="token string" style="color:#A3BE8C">"admin"</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        </span><span class="token keyword" style="color:#81A1C1">raise</span><span class="token plain"> HTTPException</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">problem_status</span><span class="token operator" style="color:#81A1C1">=</span><span class="token number" style="color:#81A1C1">403</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> detail</span><span class="token operator" style="color:#81A1C1">=</span><span class="token string" style="color:#A3BE8C">"Forbidden: Admin access required"</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token decorator annotation punctuation" style="color:#8FBCBB">@me</span><span class="token decorator annotation punctuation" style="color:#8FBCBB">.</span><span class="token decorator annotation punctuation" style="color:#8FBCBB">get</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">auth_scheme</span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain">OAuth2PasswordFlow</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">token_url</span><span class="token operator" style="color:#81A1C1">=</span><span class="token string" style="color:#A3BE8C">"token"</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> plugins</span><span class="token operator" style="color:#81A1C1">=</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token plain">jwt_auth_plugin</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">decode_plugin</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">async</span><span class="token plain"> </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">get_admin_user</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">profile</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> Annotated</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token plain">UserProfile</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> JWTAuthParam</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> </span><span class="token keyword" style="color:#81A1C1">_</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> Annotated</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token builtin" style="color:#8FBCBB">bool</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> use</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">is_admin</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">-</span><span class="token operator" style="color:#81A1C1">&gt;</span><span class="token plain"> User</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"> User</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">name</span><span class="token operator" style="color:#81A1C1">=</span><span class="token string" style="color:#A3BE8C">"user"</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> email</span><span class="token operator" style="color:#81A1C1">=</span><span class="token string" style="color:#A3BE8C">"user@email.com"</span><span class="token punctuation" style="color:#8FBCBB">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Here, for the <code>get_admin_user</code> endpoint, we define a function dependency <code>is_admin</code> that checks if the user has an admin role. If the user does not have the required role, the request will fail with a 403 Forbidden Error .</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="returning-simple-string-tokens">Returning Simple String Tokens<a href="https://lihil.cc/blog/lihil-auth#returning-simple-string-tokens" class="hash-link" aria-label="Direct link to Returning Simple String Tokens" title="Direct link to Returning Simple String Tokens">​</a></h4>
<p>In some cases, you might always want to query the database for user information, and you don't need to return a structured object like <code>UserProfile</code>. Instead, you can return a simple string value that will be encoded as a JWT.</p>
<p>If so, you can simply return a string from the <code>login_get_token</code> endpoint, and it will be encoded as a JWT automatically:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token decorator annotation punctuation" style="color:#8FBCBB">@token</span><span class="token decorator annotation punctuation" style="color:#8FBCBB">.</span><span class="token decorator annotation punctuation" style="color:#8FBCBB">post</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">plugins</span><span class="token operator" style="color:#81A1C1">=</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token plain">jwt_auth_plugin</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">encode_plugin</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">expires_in_s</span><span class="token operator" style="color:#81A1C1">=</span><span class="token number" style="color:#81A1C1">3600</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">async</span><span class="token plain"> </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">login_get_token</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">credentials</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> OAuthLoginForm</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">-</span><span class="token operator" style="color:#81A1C1">&gt;</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">str</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">return</span><span class="token plain"> </span><span class="token string" style="color:#A3BE8C">"user123"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="full-docs-jwt-plugin-documentation">Full docs: <a href="https://lihil.cc/docs/advance/plugin/jwt" target="_blank" rel="noopener noreferrer">JWT Plugin Documentation</a><a href="https://lihil.cc/blog/lihil-auth#full-docs-jwt-plugin-documentation" class="hash-link" aria-label="Direct link to full-docs-jwt-plugin-documentation" title="Direct link to full-docs-jwt-plugin-documentation">​</a></h4>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="installation">Installation<a href="https://lihil.cc/blog/lihil-auth#installation" class="hash-link" aria-label="Direct link to Installation" title="Direct link to Installation">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="to-use-jwt-only">To use jwt only<a href="https://lihil.cc/blog/lihil-auth#to-use-jwt-only" class="hash-link" aria-label="Direct link to To use jwt only" title="Direct link to To use jwt only">​</a></h3>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token plain">pip install "lihil[standard]"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="to-use-both-jwt-and-supabase">To use both jwt and supabase<a href="https://lihil.cc/blog/lihil-auth#to-use-both-jwt-and-supabase" class="hash-link" aria-label="Direct link to To use both jwt and supabase" title="Direct link to To use both jwt and supabase">​</a></h3>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token plain">pip install "lihil[standard,supabase]"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<hr>
<p>Github: <a href="https://github.com/raceychan/lihil" target="_blank" rel="noopener noreferrer">lihil</a></p>
<p>Official Docs: <a href="https://lihil.cc/" target="_blank" rel="noopener noreferrer">lihil.cc</a></p>]]></content:encoded>
            <category>web development</category>
            <category>authentication</category>
        </item>
        <item>
            <title><![CDATA[What to Do When HTTP Status Codes Don’t Fit Your Business Error]]></title>
            <link>https://lihil.cc/blog/what-to-do-when-http-status-codes-dont-fit-your-business-error</link>
            <guid>https://lihil.cc/blog/what-to-do-when-http-status-codes-dont-fit-your-business-error</guid>
            <pubDate>Sun, 27 Apr 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[404mail]]></description>
            <content:encoded><![CDATA[<p><img decoding="async" loading="lazy" alt="404_mail" src="https://lihil.cc/assets/images/404_mail-5b5df967f6e8f1b1139713c9ab4012d3.jpg" width="1024" height="683" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="question">Question:<a href="https://lihil.cc/blog/what-to-do-when-http-status-codes-dont-fit-your-business-error#question" class="hash-link" aria-label="Direct link to Question:" title="Direct link to Question:">​</a></h3>
<p><strong>How would you choose a status code for an order that could not be processed because the customer's shipping address is outside the delivery zone?</strong></p>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>Spoiler</summary><div><div class="collapsibleContent_i85q"><h3 class="anchor anchorWithStickyNavbar_LWe7" id="you-shouldnt-be-looking-for-a-specific-status-code-for-busineess-error">You shouldn't be looking for a specific status code for busineess error.<a href="https://lihil.cc/blog/what-to-do-when-http-status-codes-dont-fit-your-business-error#you-shouldnt-be-looking-for-a-specific-status-code-for-busineess-error" class="hash-link" aria-label="Direct link to You shouldn't be looking for a specific status code for busineess error." title="Direct link to You shouldn't be looking for a specific status code for busineess error.">​</a></h3><p>Instead, use a 4xx status code with a well-defined structural error response and provide detailed documentation of the error response format.</p></div></div></details>
<p>Whether you are struggling to find an appropiate http status code, or if you have a specific http status code to use, this blog is for you.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-http-status-code-and-why-you-should-care">What is http status code and why you should care<a href="https://lihil.cc/blog/what-to-do-when-http-status-codes-dont-fit-your-business-error#what-is-http-status-code-and-why-you-should-care" class="hash-link" aria-label="Direct link to What is http status code and why you should care" title="Direct link to What is http status code and why you should care">​</a></h3>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="status-code-is-popular">Status code is popular<a href="https://lihil.cc/blog/what-to-do-when-http-status-codes-dont-fit-your-business-error#status-code-is-popular" class="hash-link" aria-label="Direct link to Status code is popular" title="Direct link to Status code is popular">​</a></h4>
<p>Even if you are not a technical guy, it is very likley that you have heard these numbers <code>404</code>, <code>502</code>. This is because http status code is so popular that It is literally everywhere on the internet.</p>
<p>HTTP status codes have long been a cornerstone of web application error handling. Defined in RFC 7231, these codes serve as a standardized way for servers to communicate the outcome of a request to the client.
The standard defines several categories of status codes, such as <code>2xx</code> for success, <code>4xx</code> for client errors, and <code>5xx</code> for server errors.
Quote from <a href="https://datatracker.ietf.org/doc/html/rfc7231#section-8.2.2" target="_blank" rel="noopener noreferrer">RFC 7231</a>:</p>
<blockquote>
<p>HTTP clients are not required to
understand the meaning of all registered status codes, though such
understanding is obviously desirable. However, a client MUST
understand the class of any status code, as indicated by the first
digit, and treat an unrecognized status code as being equivalent to
the x00 status code of that class</p>
</blockquote>
<p>It has become an industrial consensus to check these status codes as a way to quickly determine whether a request was successful or failed. For example, many libraries and frameworks will raise an exception if a request results in an error status. Here's a simple example using Python's <code>requests</code> library:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token keyword" style="color:#81A1C1">import</span><span class="token plain"> requests</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">response </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> requests</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">get</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token string" style="color:#A3BE8C">"https://api.example.com/data"</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">response</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">raise_for_status</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token comment" style="color:#4C566A;font-style:italic"># this would raise exception when status code &gt; 400</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">print</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token string" style="color:#A3BE8C">"Data retrieved successfully!"</span><span class="token punctuation" style="color:#8FBCBB">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<blockquote>
<p>In this example, <code>raise_for_status()</code> automatically raises an <code>HTTPError</code> if the server returns a 4xx or 5xx status code. This is a common pattern in many applications to ensure that only successful requests are processed further.</p>
</blockquote>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="why-is-it-difficult-to-choose-a-status-code-for-your-bussiness-error">Why is it difficult to choose a status code for your bussiness error<a href="https://lihil.cc/blog/what-to-do-when-http-status-codes-dont-fit-your-business-error#why-is-it-difficult-to-choose-a-status-code-for-your-bussiness-error" class="hash-link" aria-label="Direct link to Why is it difficult to choose a status code for your bussiness error" title="Direct link to Why is it difficult to choose a status code for your bussiness error">​</a></h3>
<p>It's common(but not necessarily correct) to use <code>4xx</code> codes like <code>400 Bad Request</code> or <code>403 Forbidden</code> when something goes wrong. For example, a "premium" user trying to access a feature available only to "pro" users might return a <code>403 Forbidden</code> status. In such cases, the error is clear, and the status code maps well to the scenario.</p>
<p>But as web applications grow in complexity and deal with more nuanced business rules, things get trickier. Consider a scenario where <strong>an order could not be processed because of a mismatch between the customer's shipping address and the delivery zone</strong>. How should this issue be represented in terms of HTTP status codes?</p>
<p>There isn't an easy or clear answer. While we could use <code>400 Bad Request</code>, it doesn't quite capture the specific business rule violation that's occurring. Similarly, a <code>409 Conflict</code> could work in some cases, but it still doesn’t feel precise enough. As the number of potential issues grows—whether they’re related to payment failures, address mismatches, or resource conflicts—the more apparent it becomes that HTTP status codes are not built to handle the full complexity of modern business logic.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="donts">Don'ts<a href="https://lihil.cc/blog/what-to-do-when-http-status-codes-dont-fit-your-business-error#donts" class="hash-link" aria-label="Direct link to Don'ts" title="Direct link to Don'ts">​</a></h3>
<p>Currently, there are a few ways the industry deals with the problem of handling business logic errors in web applications. These solutions often involve workarounds or generalizations due to the limitations of HTTP status codes. Here are some of the common approaches:</p>
<ol>
<li><strong>Embedding Custom Status Inside Request Body</strong></li>
</ol>
<p>One approach is to always return a <code>200 OK</code> status code, even when the request fails, and include a custom status code in the response body. This method involves returning a business-specific error code along with additional details.</p>
<p><strong>Example</strong>:</p>
<div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token punctuation" style="color:#8FBCBB">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">  </span><span class="token property">"business_code"</span><span class="token operator" style="color:#81A1C1">:</span><span class="token plain"> </span><span class="token string" style="color:#A3BE8C">"CUSTOMIZED_BUSINESS_ERROR"</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">  </span><span class="token property">"detail"</span><span class="token operator" style="color:#81A1C1">:</span><span class="token plain"> </span><span class="token string" style="color:#A3BE8C">"The shipping address is outside the serviceable delivery zone."</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token punctuation" style="color:#8FBCBB">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>I have personally encountered this solution from my work a several times during my career. when the system contains only a few components, and with detailed documentation, it could work, but as the system grows and additional components (like proxies, API gateways, and logging systems) are added, this keeps creating new problems you wouldn't have to solve otherwise.</p>
<ol start="2">
<li>self-define 3-digits status code, for example, 6xx means some business rules, 700 means others, etc.</li>
</ol>
<p>Some solutions attempt to define their own set of status codes beyond the standard <code>2xx</code>, <code>4xx</code>, and <code>5xx</code> categories. For example, <code>6xx</code> might represent business rules, with specific codes for each scenario (e.g., <code>700</code> for some other business logic). While this avoids reading the request body to determine failure, it violates the HTTP standards, meaning many tools might throw errors or not support these codes.
<strong>Example</strong>:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token number" style="color:#81A1C1">600</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> CONNECTION ERROR </span><span class="token operator" style="color:#81A1C1">-</span><span class="token plain"> This indicates a general connection error</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token number" style="color:#81A1C1">601</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> INCOMPLETE ERROR </span><span class="token operator" style="color:#81A1C1">-</span><span class="token plain"> This indicates sever sends an incomplete page</span><span class="token operator" style="color:#81A1C1">/</span><span class="token builtin" style="color:#8FBCBB">object</span><span class="token plain"> </span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token keyword" style="color:#81A1C1">as</span><span class="token plain"> indicated by Content</span><span class="token operator" style="color:#81A1C1">-</span><span class="token plain">Length header</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token number" style="color:#81A1C1">701</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> ERROR TEXT FOUND </span><span class="token operator" style="color:#81A1C1">-</span><span class="token plain"> This code </span><span class="token keyword" style="color:#81A1C1">is</span><span class="token plain"> returned </span><span class="token keyword" style="color:#81A1C1">if</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">any</span><span class="token plain"> error text </span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">such </span><span class="token keyword" style="color:#81A1C1">as</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> </span><span class="token string" style="color:#A3BE8C">"Service Unavailable"</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> are found </span><span class="token keyword" style="color:#81A1C1">in</span><span class="token plain"> the main page </span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">frame HTML contents included</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain"> Note that the error text must be defined </span><span class="token keyword" style="color:#81A1C1">in</span><span class="token plain"> advance of the test</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain"> Error text means </span><span class="token keyword" style="color:#81A1C1">if</span><span class="token plain"> the text </span><span class="token keyword" style="color:#81A1C1">is</span><span class="token plain"> found</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> this session should be considered a failure</span><span class="token punctuation" style="color:#8FBCBB">.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>According to <a href="https://datatracker.ietf.org/doc/html/rfc7231#section-8.2.2" target="_blank" rel="noopener noreferrer">RFC 7231</a>,</p>
<blockquote>
<p>New status codes are required to fall under one of the categories
defined in <a href="https://datatracker.ietf.org/doc/html/rfc7231#section-6" target="_blank" rel="noopener noreferrer">Section 6</a>.</p>
</blockquote>
<p>status codes &gt;= 600 are invalid because they fall outside of the defined categories.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="dos">Dos<a href="https://lihil.cc/blog/what-to-do-when-http-status-codes-dont-fit-your-business-error#dos" class="hash-link" aria-label="Direct link to Dos" title="Direct link to Dos">​</a></h4>
<ol>
<li><strong>A 4xx status code + Generic Error Message</strong></li>
</ol>
<div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token punctuation" style="color:#8FBCBB">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">  </span><span class="token property">"status"</span><span class="token operator" style="color:#81A1C1">:</span><span class="token plain"> </span><span class="token number" style="color:#81A1C1">400</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">  </span><span class="token property">"message"</span><span class="token operator" style="color:#81A1C1">:</span><span class="token plain"> </span><span class="token string" style="color:#A3BE8C">"Something went wrong"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token punctuation" style="color:#8FBCBB">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>A common fallback is to return a <code>4xx</code> status code (typically <code>400 Bad Request</code>) and include a generic error message such as "Something went wrong" in the response body. This approach hides the real cause of the business logic failure and lumps all client errors into one vague category. While this might suffice for small-scale applications or early prototypes, it quickly becomes inadequate as the complexity of business rules increases.</p>
<p>Some systems go a step further by returning a one-line reason phrase or a slightly extended message, but still fall short of conveying structured, actionable error details to clients.</p>
<ol start="2">
<li><strong>Using the Same Status Code for Multiple Business Logic Issues</strong></li>
</ol>
<div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token punctuation" style="color:#8FBCBB">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">  </span><span class="token property">"status"</span><span class="token operator" style="color:#81A1C1">:</span><span class="token plain"> </span><span class="token number" style="color:#81A1C1">400</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">  </span><span class="token property">"message"</span><span class="token operator" style="color:#81A1C1">:</span><span class="token plain"> </span><span class="token string" style="color:#A3BE8C">"Payment failed"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token punctuation" style="color:#8FBCBB">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token punctuation" style="color:#8FBCBB">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">  </span><span class="token property">"status"</span><span class="token operator" style="color:#81A1C1">:</span><span class="token plain"> </span><span class="token number" style="color:#81A1C1">400</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">  </span><span class="token property">"message"</span><span class="token operator" style="color:#81A1C1">:</span><span class="token plain"> </span><span class="token string" style="color:#A3BE8C">"Invalid shipping address"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token punctuation" style="color:#8FBCBB">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>As business logic errors grow in number and variety, some teams attempt to fit them into a limited set of existing status codes. For instance, both a payment failure due to insufficient funds and a mismatch in shipping address might be returned as <code>400 Bad Request</code>. While this approach simplifies server-side handling, it severely limits the clarity of error messages, making it hard for clients to distinguish between different types of business failures. This also places unnecessary burden on client-side developers to reverse-engineer the true nature of the error from vague responses.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="best-practice">Best Practice<a href="https://lihil.cc/blog/what-to-do-when-http-status-codes-dont-fit-your-business-error#best-practice" class="hash-link" aria-label="Direct link to Best Practice" title="Direct link to Best Practice">​</a></h4>
<p><strong>Structured Error Message + Documentation (With Standards Compliance)</strong></p>
<p>A thoughtful approach to business rule violations is to return an appropriate <code>4xx</code> status code—ideally one that aligns semantically with the error (for example, <code>407 Proxy Authentication Required</code>, if applicable)—to indicate that the request was unsuccessful due to a business constraint.</p>
<p>In addition, the response body can include a <strong>structured error message</strong> based on <a href="https://datatracker.ietf.org/doc/html/rfc9457" target="_blank" rel="noopener noreferrer">RFC 9457 (Problem Details for HTTP APIs)</a>, which defines fields such as <code>type</code>, <code>title</code>, <code>status</code>, <code>detail</code>, and <code>instance</code>. This format encourages clarity and consistency, making it easier for both developers and automated systems to understand, handle, and trace errors.</p>
<p>Equally important is having each error type <strong>clearly documented</strong> so that client developers know what an error means and how to address it. Well-maintained documentation enables richer client experiences, reduces guesswork, and helps prevent issues before they arise.</p>
<p>Stripe does an excellent job in this area with their <a href="https://docs.stripe.com/error-codes" target="_blank" rel="noopener noreferrer">dedicated error code documentation</a>, which provides detailed explanations for a wide range of business-related errors. Their commitment to transparency and developer experience is evident and commendable.</p>
<p>That said, there are a couple of areas where further improvements could enhance the experience even more:</p>
<ul>
<li>Their structured error format, while clear, doesn’t explicitly follow RFC 9457, and omits fields like <code>instance</code> that can be valuable for debugging.</li>
<li>It’s not clear whether their documentation is automatically generated or manually maintained. If it’s the latter, this could introduce challenges in keeping it fully up to date with evolving APIs.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="how-lihil-solves-this-problem">How lihil solves this problem<a href="https://lihil.cc/blog/what-to-do-when-http-status-codes-dont-fit-your-business-error#how-lihil-solves-this-problem" class="hash-link" aria-label="Direct link to How lihil solves this problem" title="Direct link to How lihil solves this problem">​</a></h3>
<p><strong>Structured Error Messages + Auto-Generated Documentation</strong></p>
<p><a href="https://lihil.cc/" target="_blank" rel="noopener noreferrer"><code>lihil</code></a> tackles the problem by making structured error handling first-class. You can declare rich, type-safe exceptions by subclassing <code>HTTPException[T]</code>, where <code>T</code> defines the structure of the error's <code>detail</code> field. These exceptions can then be directly attached to endpoints using the <code>errors=</code> parameter. This not only ensures consistent error responses but also enables <code>lihil</code> to automatically generate OpenAPI documentation for each declared error—including a link to a detailed problem page under the "External documentation" tab.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:#2E3440;--prism-color:#D8DEE9"><div class="codeBlockTitle_Ktv7">How you define a structual exception in lihil</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="background-color:#2E3440;color:#D8DEE9"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D8DEE9"><span class="token keyword" style="color:#81A1C1">from</span><span class="token plain"> lihil </span><span class="token keyword" style="color:#81A1C1">import</span><span class="token plain"> Empty</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> Lihil</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> Resp</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> Route</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> status</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> Meta</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">from</span><span class="token plain"> lihil</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">interface </span><span class="token keyword" style="color:#81A1C1">import</span><span class="token plain"> Base</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">from</span><span class="token plain"> lihil</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">problems </span><span class="token keyword" style="color:#81A1C1">import</span><span class="token plain"> HTTPException</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">class</span><span class="token plain"> </span><span class="token class-name" style="color:#8FBCBB">AddressOutOfScopeProblem</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">Base</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    current_address</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> Annotated</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token builtin" style="color:#8FBCBB">str</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> Meta</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">examples</span><span class="token operator" style="color:#81A1C1">=</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token string" style="color:#A3BE8C">"home"</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    service_radius</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> Annotated</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token builtin" style="color:#8FBCBB">float</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> Meta</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">examples</span><span class="token operator" style="color:#81A1C1">=</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token number" style="color:#81A1C1">3.5</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    distance</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> Annotated</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token builtin" style="color:#8FBCBB">float</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> Meta</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">examples</span><span class="token operator" style="color:#81A1C1">=</span><span class="token number" style="color:#81A1C1">4</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    message</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token builtin" style="color:#8FBCBB">str</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> </span><span class="token string" style="color:#A3BE8C">""</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">__post_init__</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">        self</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">message </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> </span><span class="token string-interpolation string" style="color:#A3BE8C">f"Your current address </span><span class="token string-interpolation interpolation punctuation" style="color:#8FBCBB">{</span><span class="token string-interpolation interpolation">self</span><span class="token string-interpolation interpolation punctuation" style="color:#8FBCBB">.</span><span class="token string-interpolation interpolation">current_address</span><span class="token string-interpolation interpolation punctuation" style="color:#8FBCBB">}</span><span class="token string-interpolation string" style="color:#A3BE8C"> is </span><span class="token string-interpolation interpolation punctuation" style="color:#8FBCBB">{</span><span class="token string-interpolation interpolation">self</span><span class="token string-interpolation interpolation punctuation" style="color:#8FBCBB">.</span><span class="token string-interpolation interpolation">distance</span><span class="token string-interpolation interpolation punctuation" style="color:#8FBCBB">}</span><span class="token string-interpolation string" style="color:#A3BE8C"> miles away and our service radius is </span><span class="token string-interpolation interpolation punctuation" style="color:#8FBCBB">{</span><span class="token string-interpolation interpolation">self</span><span class="token string-interpolation interpolation punctuation" style="color:#8FBCBB">.</span><span class="token string-interpolation interpolation">service_radius</span><span class="token string-interpolation interpolation punctuation" style="color:#8FBCBB">}</span><span class="token string-interpolation string" style="color:#A3BE8C">"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">class</span><span class="token plain"> </span><span class="token class-name" style="color:#8FBCBB">InvalidOrderError</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">HTTPException</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token plain">AddressOutOfScopeProblem</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    </span><span class="token string" style="color:#A3BE8C">"Address out of service zone"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    __status__ </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> </span><span class="token number" style="color:#81A1C1">422</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    instance</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> Annotated</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token builtin" style="color:#8FBCBB">str</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> Meta</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">examples</span><span class="token operator" style="color:#81A1C1">=</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token string" style="color:#A3BE8C">"2cd20e0c-9ddc-4fdc-8f61-b32f62ac784d"</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    detail</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> AddressOutOfScopeProblem</span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">orders </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> Route</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token string" style="color:#A3BE8C">"orders"</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token decorator annotation punctuation" style="color:#8FBCBB">@orders</span><span class="token decorator annotation punctuation" style="color:#8FBCBB">.</span><span class="token decorator annotation punctuation" style="color:#8FBCBB">post</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">errors</span><span class="token operator" style="color:#81A1C1">=</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token plain">InvalidOrderError</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">async</span><span class="token plain"> </span><span class="token keyword" style="color:#81A1C1">def</span><span class="token plain"> </span><span class="token function" style="color:#88C0D0">create_orders</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"> </span><span class="token operator" style="color:#81A1C1">-</span><span class="token operator" style="color:#81A1C1">&gt;</span><span class="token plain"> Annotated</span><span class="token punctuation" style="color:#8FBCBB">[</span><span class="token plain">Empty</span><span class="token punctuation" style="color:#8FBCBB">,</span><span class="token plain"> status</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">CREATED</span><span class="token punctuation" style="color:#8FBCBB">]</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">lhl </span><span class="token operator" style="color:#81A1C1">=</span><span class="token plain"> Lihil</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">orders</span><span class="token punctuation" style="color:#8FBCBB">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain"></span><span class="token keyword" style="color:#81A1C1">if</span><span class="token plain"> __name__ </span><span class="token operator" style="color:#81A1C1">==</span><span class="token plain"> </span><span class="token string" style="color:#A3BE8C">"__main__"</span><span class="token punctuation" style="color:#8FBCBB">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D8DEE9"><span class="token plain">    lhl</span><span class="token punctuation" style="color:#8FBCBB">.</span><span class="token plain">run</span><span class="token punctuation" style="color:#8FBCBB">(</span><span class="token plain">__file__</span><span class="token punctuation" style="color:#8FBCBB">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Running the above code and it is automatically documented in your OpenAPI.</p>
<p><img decoding="async" loading="lazy" alt="Order error diagram" src="https://lihil.cc/assets/images/order_error-c3d649e69ad39d6ffdcfb3d22e189958.png" width="1424" height="1217" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="what-makes-it-good">What makes it good.<a href="https://lihil.cc/blog/what-to-do-when-http-status-codes-dont-fit-your-business-error#what-makes-it-good" class="hash-link" aria-label="Direct link to What makes it good." title="Direct link to What makes it good.">​</a></h3>
<p>As you might see from the OpenAPI, each of these error response follows the <a href="https://datatracker.ietf.org/doc/html/rfc9457" target="_blank" rel="noopener noreferrer">RFC 9457</a> format, including fields like <code>type</code>, <code>title</code>, <code>status</code>, <code>detail</code>, and <code>instance</code>. You can customize how errors are rendered by registering handlers with <code>@problem_solver</code>, which maps specific exceptions or status codes to structured responses. Specific exception handlers take precedence over status-code-based ones, giving you fine-grained control.</p>
<p>By default, <code>lihil</code> also generates detailed responses for common issues such as missing parameters, returning structured 422 responses for <code>InvalidRequestErrors</code>—complete with field-level information. These responses are not only machine-readable but also fully documented out of the box.</p>
<p>Best of all, all this documentation is automatically synced with your code. There's no need to manually update or maintain a separate error code reference. <code>lihil</code> keeps your API behavior and documentation in perfect alignment.</p>]]></content:encoded>
            <category>web development</category>
        </item>
    </channel>
</rss>