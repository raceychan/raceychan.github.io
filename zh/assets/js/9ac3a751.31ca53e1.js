"use strict";(self.webpackChunkblogs=self.webpackChunkblogs||[]).push([[5141],{28453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>s});var i=r(96540);const t={},a=i.createContext(t);function o(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(a.Provider,{value:n},e.children)}},54790:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var i=r(59151),t=r(74848),a=r(28453);const o={slug:"decorators-and--functional-programming",title:"Decorators and Functional programming",authors:["raceychan"],tags:["python"],toc_min_heading_level:2,toc_max_heading_level:5},s="Decorators and Functional Programming",l={authorsImageUrls:[void 0]},c=[{value:"The Essence of Decorators",id:"the-essence-of-decorators",level:2},{value:"What is a Higher-Order Function?",id:"what-is-a-higher-order-function",level:3},{value:"Functions as First-Class Citizens",id:"functions-as-first-class-citizens",level:3},{value:"Therefore...",id:"therefore",level:2},{value:"Functional Programming with Decorators",id:"functional-programming-with-decorators",level:2},{value:"1. Function Composition",id:"1-function-composition",level:3},{value:"Example from lihil",id:"example-from-lihil",level:4},{value:"2. Currying",id:"2-currying",level:3},{value:"3. Closures",id:"3-closures",level:3},{value:"Other Functional Programming Techniques in Python",id:"other-functional-programming-techniques-in-python",level:3},{value:"Put them all together",id:"put-them-all-together",level:3},{value:"Wrapping Up",id:"wrapping-up",level:2}];function d(e){const n={blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"lego",src:r(90794).A+"",width:"1920",height:"2560"})}),"\n",(0,t.jsx)(n.p,{children:'I often see people ask how to "do functional programming in Python"\u2014as if it requires special tools or libraries.'}),"\n",(0,t.jsx)(n.p,{children:"But the truth is, many Python developers are already using functional programming techniques without realizing it. One of the clearest examples is the use of decorators."}),"\n",(0,t.jsx)(n.p,{children:"Decorators are not only a staple of modern Python codebases but also a practical bridge between traditional imperative programming and the functional programming paradigm."}),"\n",(0,t.jsx)(n.h2,{id:"the-essence-of-decorators",children:"The Essence of Decorators"}),"\n",(0,t.jsx)(n.p,{children:"At their core, decorators are higher-order functions: a fundamental concept in functional programming."}),"\n",(0,t.jsx)(n.h3,{id:"what-is-a-higher-order-function",children:"What is a Higher-Order Function?"}),"\n",(0,t.jsx)(n.p,{children:"According to Wikipedia, a higher-order function is a function that either(or both):"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Takes one or more functions as arguments"}),"\n",(0,t.jsx)(n.li,{children:"Returns a function as its result."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Let me give a naive example for this"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from typing import Callable\n\ndef dummy(func: Callable[..., Any]) -> Callable[..., Any]:\n    return func\n"})}),"\n",(0,t.jsx)(n.p,{children:"At first glance, this dummy function seems trivial."}),"\n",(0,t.jsx)(n.p,{children:"it just returns the function it receives without any modification."}),"\n",(0,t.jsx)(n.p,{children:"However, with a slight adjustment, we can transform it into something more useful:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from typing import ParamSpec, TypeVar\n\nP, R = ParamSpec("P"), TypeVar("R")\n\ndef dummy(func: Callable[P, R]) -> Callable[P, R]:\n    def wrapper(*args: P.args, **kwargs: P.kwargs) -> R:\n        result = func(*args, **kwargs)\n        return result\n    return wrapper\n'})}),"\n",(0,t.jsxs)(n.p,{children:["This is a decorator! In Python, decorators satisfy both criteria:\nthey take a function as input and often return a new function(in our example, ",(0,t.jsx)(n.code,{children:"wrapper"}),") with modified behavior."]}),"\n",(0,t.jsx)(n.p,{children:"So, decorators in Python are not just a convenient syntax\u2014they\u2019re a direct, real-world application of higher-order function concepts."}),"\n",(0,t.jsx)(n.h3,{id:"functions-as-first-class-citizens",children:"Functions as First-Class Citizens"}),"\n",(0,t.jsx)(n.p,{children:"How can Python support decorators so seamlessly? The answer lies in a foundational language feature: functions are first-class citizens."}),"\n",(0,t.jsx)(n.p,{children:"This means functions in Python can be:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Assigned to variables\nwe can do inside ",(0,t.jsx)(n.code,{children:"wrapper"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"new_func = func\nresult = func(*args, **kwargs)\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Passed as arguments\nThis"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"@dummy\ndef add(a: int, b: int) -> int:\n    return a + b\n"})}),"\n",(0,t.jsx)(n.p,{children:"is equivalent to"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"add = dummy(add)\n"})}),"\n",(0,t.jsxs)(n.p,{children:["when we decorate ",(0,t.jsx)(n.code,{children:"add"})," with ",(0,t.jsx)(n.code,{children:"dummy"}),", python would automatically passes ",(0,t.jsx)(n.code,{children:"add"})," as an argument to ",(0,t.jsx)(n.code,{children:"dummy"})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Returned from other functions\nInside ",(0,t.jsx)(n.code,{children:"dummy"}),", we return ",(0,t.jsx)(n.code,{children:"wrapper"})," as a value, which is a function defined within ",(0,t.jsx)(n.code,{children:"dummy"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Stored in data structures like lists or dictionaries\nwe won't dig deep into this, but when dummy is defined, it is stored within module's global namespace, which is a dict under the hood."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"In contrast, in some statically typed or older programming languages(say java before java 8), functions are not first-class."}),"\n",(0,t.jsx)(n.p,{children:"This would break in pre-java8"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'public class Example {\n    public static void callTwice(Function func) {\n        func(); // Error: not a valid function call\n        func();\n    }\n\n    public static void main(String[] args) {\n        callTwice(sayHello); // sayHello isn\'t a value\n    }\n\n    public static void sayHello() {\n        System.out.println("Hello");\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"therefore",children:"Therefore..."}),"\n",(0,t.jsxs)(n.p,{children:["If you've used a decorator like ",(0,t.jsx)(n.code,{children:"@functools.lru_cache"}),", ",(0,t.jsx)(n.code,{children:"@app.get"}),", or ",(0,t.jsx)(n.code,{children:"@login_required"}),", then you've already dipped your toes into functional programming. You\u2019re working with functions that modify or enhance the behavior of other functions\u2014precisely the kind of thing functional programming is all about."]}),"\n",(0,t.jsx)(n.h2,{id:"functional-programming-with-decorators",children:"Functional Programming with Decorators"}),"\n",(0,t.jsx)(n.p,{children:"Decorators don't just align with functional programming."}),"\n",(0,t.jsx)(n.p,{children:"they can enable several important techniques:"}),"\n",(0,t.jsx)(n.h3,{id:"1-function-composition",children:"1. Function Composition"}),"\n",(0,t.jsx)(n.p,{children:"In functional programming, composition is the idea of building complex behavior by combining simple functions. Decorators can be used to layer transformations or validations around a core function, much like composing small functions into a pipeline."}),"\n",(0,t.jsx)(n.p,{children:"You can chain multiple decorators to achieve a composition-like behavior, each adding behavior before or after the main function is run."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"@decor1\n@decor2\n@decor3\ndef decor(a: int, b: int) -> int: ...\n"})}),"\n",(0,t.jsx)(n.p,{children:"This pattern is powerful, but it comes with some caveats:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Signature incompatibility:\nIf one decorator modifies the function\u2019s signature (e.g., changes the number or type of arguments), it may break compatibility with other decorators in the chain.For decorators that need to inspect the function signature, if one decorator does not preserve it, the others may break."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Order sensitivity: The order in which decorators are applied matters. For example, using ",(0,t.jsx)(n.code,{children:"@abc.abstractmethod"})," on a method that has already been wrapped by another decorator may lead to incorrect behavior or errors."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Readability: As the number of decorators grows, it becomes harder to understand what the function actually does at a glance."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"example-from-lihil",children:"Example from lihil"}),"\n",(0,t.jsx)(n.p,{children:"In lihil, an endpoint can receive multiple plugins (which are essentially decorators) using a cleaner and more structured syntax:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"@user.post(plugins=[plugin1, plugin2, plugin3])\nasync def create_user(): ...\n"})}),"\n",(0,t.jsx)(n.p,{children:"Under the hood, lihil applies these plugins in sequence by decorating the endpoint function:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"for plugin in plugins:\n    func = plugin(func)\n"})}),"\n",(0,t.jsx)(n.p,{children:"This approach maintains the core idea of composition while improving clarity and control over the decoration process."}),"\n",(0,t.jsx)(n.h3,{id:"2-currying",children:"2. Currying"}),"\n",(0,t.jsx)(n.p,{children:"Currying is the process of transforming a function that takes multiple arguments into a sequence of functions that each take a single argument. While Python doesn't support automatic currying like Haskell, you can manually simulate currying using decorators\u2014returning nested functions that capture arguments through closure."}),"\n",(0,t.jsx)(n.p,{children:"This is especially powerful when writing configuration-like decorators, where parameters are fixed upfront and later used to modify a function's behavior."}),"\n",(0,t.jsx)(n.p,{children:"Consider the following example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:" def curry(func: Callable[..., R], *curry_args: Any, **curry_kwargs: Any):\n     def wrapper(*args: Any, **kwargs: Any) -> R:\n         return func(*(curry_args + args), **(curry_kwargs | kwargs))\n     return wrapper\n"})}),"\n",(0,t.jsx)(n.p,{children:"Here, curry is a higher-order function that returns a new function (wrapper) with some arguments pre-filled. These pre-filled values are remembered through closure, and the remaining arguments can be supplied later when the returned function is called."}),"\n",(0,t.jsx)(n.p,{children:"To demonstrate how this works, imagine a simple subtraction function:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def sub(a: int, b: int) -> int:\n    return a - b\n\nsub_five = curry(sub, b=5)\nassert sub_five(a=8) == 3\n"})}),"\n",(0,t.jsx)(n.p,{children:"We can use curry to fix one of the arguments, say b = 5, creating a new function that subtracts 5 from any input"}),"\n",(0,t.jsxs)(n.p,{children:["By pre-binding the second argument ",(0,t.jsx)(n.code,{children:"b"}),", we've effectively turned ",(0,t.jsx)(n.code,{children:"sub(a, b)"})," into a function that only needs ",(0,t.jsx)(n.code,{children:"a"}),". This mirrors the essence of currying in functional programming\u2014progressively transforming a multi-argument function into a chain of single-argument calls."]}),"\n",(0,t.jsx)(n.h3,{id:"3-closures",children:"3. Closures"}),"\n",(0,t.jsx)(n.p,{children:'A closure occurs when a function "remembers" variables from the scope in which it was created, even after that scope has finished executing. This is how decorators store context\u2014whether it\'s a permission requirement, a configuration flag, or a runtime condition.'}),"\n",(0,t.jsx)(n.p,{children:"Closures are what make decorators stateful, enabling powerful behaviors like caching, logging, or retry logic without modifying the function\u2019s internal logic. They allow decorators to wrap and extend functions while retaining information across calls."}),"\n",(0,t.jsx)(n.p,{children:"let's take a look at a real-world example: Python\u2019s built-in lru_cache decorator from the functools module."}),"\n",(0,t.jsx)(n.p,{children:"Internally, it uses a closure to remember the function\u2019s arguments and their corresponding results."}),"\n",(0,t.jsx)(n.p,{children:"Here's a simplified version of its implementation (based on Python 3.12), with some details omitted to highlight the key point:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:" def _lru_cache_wrapper(user_function, maxsize, typed, _CacheInfo):\n     # Constants shared by all lru cache instances:\n     sentinel = object()          # unique object used to signal cache misses\n     make_key = _make_key         # build a key from the function arguments\n\n     cache = {}\n     hits = misses = 0\n\n      # case when maxsize is None\n      def wrapper(*args, **kwds):\n          # Simple caching without ordering or size limit\n          nonlocal hits, misses\n          key = make_key(args, kwds, typed)\n          result = cache_get(key, sentinel)\n          if result is not sentinel:\n              hits += 1\n              return result\n          misses += 1\n          result = user_function(*args, **kwds)\n          cache[key] = result\n          return result\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Here, the inner function ",(0,t.jsx)(n.code,{children:"wrapper"})," forms a closure over several variables\u2014",(0,t.jsx)(n.code,{children:"cache"}),", ",(0,t.jsx)(n.code,{children:"hits"}),", ",(0,t.jsx)(n.code,{children:"misses"}),", and ",(0,t.jsx)(n.code,{children:"make_key"}),"(a util function)."]}),"\n",(0,t.jsxs)(n.p,{children:["These variables live outside the wrapper function, but remain accessible to it even after ",(0,t.jsx)(n.code,{children:"_lru_cache_wrapper"})," has finished executing. As a result, wrapper is able to remember past function calls and cache results accordingly."]}),"\n",(0,t.jsx)(n.p,{children:"This technique enables powerful optimizations like memoization, all while keeping the decorator\u2019s logic entirely separate from the original function body."}),"\n",(0,t.jsx)(n.h3,{id:"other-functional-programming-techniques-in-python",children:"Other Functional Programming Techniques in Python"}),"\n",(0,t.jsx)(n.p,{children:"Beyond decorators, Python supports many functional idioms that align with the same principles:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Comprehensions\nlist, dict, and set comprehensions are Python\u2019s upgrades to ",(0,t.jsx)(n.code,{children:"map"})," and ",(0,t.jsx)(n.code,{children:"filter"}),", expressed in a concise and readable way. They're pure, declarative, and avoid side effects."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Generators\nGenerators support lazy evaluation, a key technique in functional programming. Using yield, Python functions can produce a sequence of results over time, supporting pipelines and memory-efficient data flows."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Built-in Functions\nPython's standard library includes functional tools like map, filter, reduce, any, all, and functools.partial. These utilities operate on data immutably and often use higher-order functions\u2014core values of the functional paradigm."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"put-them-all-together",children:"Put them all together"}),"\n",(0,t.jsx)(n.p,{children:"Let's write some functions that illustrate these concepts."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'T = TypeVar("T")\n\ndef is_even(x: int) -> bool:\n    return (x % 2) == 0\n\ndef larger_than(x: int, threshold: int) -> bool:\n    return x > threshold\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Now we define a utility function that checks whether a value satisfies a list of conditions. This uses a generator expression and ",(0,t.jsx)(n.code,{children:"all()"})," for declarative, short-circuiting evaluation:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def meets_conditions(*conditions: Callable[[T], bool], target: T) -> bool:\n    return all(condition(target) for condition in conditions) # generator comprehension\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Finally, we wrap everything into a decorator. It accepts multiple conditions and applies them to the result of a function. We also use ",(0,t.jsx)(n.code,{children:"functools.partial"})," to pre-fill parameters\u2014a form of currying:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'def check_result(*conditions: Callable[[T], bool]):\n    def decorator(func: Callable[P, T]):\n        def wrapper(*args: P.args, **kwargs: P.kwargs) -> T:\n            result = func(*args, **kwargs)\n            if not meets_conditions(*conditions, target=result):\n                raise ValueError("Return value did not meet required conditions")\n            return result\n\n        return wrapper\n\n    return decorator\n\n@check_result(is_even, partial(larger_than, threshold=5))\ndef add(a: int, b: int) -> int:\n    return a + b\n\n\nassert add(3, 5) == 8\nadd(1, 1) # This would fail\nadd(4, 3) # This would fail too\n'})}),"\n",(0,t.jsx)(n.h2,{id:"wrapping-up",children:"Wrapping Up"}),"\n",(0,t.jsx)(n.p,{children:"Decorators in Python are a clear, powerful example of how functional programming concepts can thrive in an imperative language. By understanding decorators as higher-order functions, we unlock a whole world of expressive, reusable, and modular code."}),"\n",(0,t.jsx)(n.p,{children:"And while the classic decorator pattern is \u201ca function that takes a function and returns a function,\u201d it doesn\u2019t stop there."}),"\n",(0,t.jsxs)(n.p,{children:["In Python, methods can receive and return other methods, and callable objects (like classes with ",(0,t.jsx)(n.strong,{children:"call"}),") can decorate other callables."]}),"\n",(0,t.jsx)(n.p,{children:"These variations still follow the same core idea:"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"taking one callable and returning another, often with enhanced behavior."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This flexibility is what makes decorators such a practical bridge to functional programming. Whether you\u2019re enforcing constraints, composing behaviors, caching results, or injecting dependencies, decorators offer a clean, composable, and Pythonic way to do it\u2014all while leveraging first-class functions and closures."}),"\n",(0,t.jsx)(n.p,{children:"What do you think? Have you used decorators beyond the classic function-to-function pattern?"}),"\n",(0,t.jsx)(n.p,{children:"Would you be interested in exploring the object-oriented side of decorators\u2014like how methods or callable classes can act as decorators too?"}),"\n",(0,t.jsx)(n.p,{children:"Let me know your thoughts or questions\u2014I'd love to hear how you use (or plan to use) decorators in your own projects!"})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},59151:e=>{e.exports=JSON.parse('{"permalink":"/zh/blog/decorators-and--functional-programming","source":"@site/blog/2025-05-28T10_33-decorators-and--functional-programming/content.md","title":"Decorators and Functional programming","description":"lego","date":"2025-05-28T00:00:00.000Z","tags":[{"inline":false,"label":"python","permalink":"/zh/blog/tags/python","description":"general dicussion about programming in python"}],"readingTime":9.015,"hasTruncateMarker":true,"authors":[{"name":"raceychan","title":"author of lihil, a developer.","url":"https://github.com/raceychan","page":{"permalink":"/zh/blog/authors/raceychan"},"imageURL":"https://github.com/raceychan.png","key":"raceychan"}],"frontMatter":{"slug":"decorators-and--functional-programming","title":"Decorators and Functional programming","authors":["raceychan"],"tags":["python"],"toc_min_heading_level":2,"toc_max_heading_level":5},"unlisted":false,"prevItem":{"title":"Design Patterns You Should Unlearn in Python-Part1","permalink":"/zh/blog/design-patterns-you-should-unlearn-in-python-part1"},"nextItem":{"title":"Set Up User Authentication in Minutes \u2014 With or Without a Standalone Database Using lihil-auth","permalink":"/zh/blog/lihil-auth"}}')},90794:(e,n,r)=>{r.d(n,{A:()=>i});const i=r.p+"assets/images/lego-0490433a307831263d3f9192f897ede4.jpg"}}]);